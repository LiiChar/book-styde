generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["nApi"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model UserBook {
  id         Int      @id @default(autoincrement())
  user_id    Int
  chapter_id Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  chapter    Chapter  @relation(fields: [chapter_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserWork {
  id         Int      @id @default(autoincrement())
  user_id    Int
  work_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  work       Work     @relation(fields: [work_id], references: [id], onDelete: Cascade)
}

model LikesComment {
  id         Int      @id @default(autoincrement())
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  comment_id Int
  comment    Comment  @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model FeedbackComment {
  id              Int               @id @default(autoincrement())
  user_id         Int
  comment_id      Int?
  feedback_id     Int?
  content         String
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  comment         Comment?          @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  FeedbackComment FeedbackComment?  @relation("FeedbackCommentAnswer", fields: [feedback_id], references: [id], onDelete: Cascade)
  feedback        FeedbackComment[] @relation("FeedbackCommentAnswer")
  user            User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
  id           Int               @id @default(autoincrement())
  name         String            @unique
  question     String
  key_word     String
  description  String?
  group        String?
  role         String            @default("user")
  is_verify    Boolean           @default(false)
  created_at   DateTime          @default(now())
  updated_at   DateTime          @updatedAt
  comment      Comment[]
  feedback     FeedbackComment[]
  LikesComment LikesComment[]
  UserBook     UserBook[]
  UserWork     UserWork[]
}

model Comment {
  id              Int               @id @default(autoincrement())
  content         String
  user_id         Int?
  chapter_id      Int?
  rate            Int               @default(0)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  chapter         Chapter?          @relation(fields: [chapter_id], references: [id], onDelete: Cascade)
  user            User?             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  FeedbackComment FeedbackComment[]
  LikesComment    LikesComment[]
}

model Chapter {
  id         Int        @id @default(autoincrement())
  title      String     @unique
  chapter    Int
  book       String
  content    String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  comment    Comment[]
  UserBook   UserBook[]
  works      Work[]
}

model Work {
  id          Int        @id @default(autoincrement())
  chapter_id  Int
  visit       Int        @default(0)
  resolve     Int        @default(0)
  type        String
  description String?
  question    String
  answer      String
  explain     String
  variant     String?
  code        String?
  language    String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  UserWork    UserWork[]
  chapter     Chapter    @relation(fields: [chapter_id], references: [id], onDelete: Cascade)
}
