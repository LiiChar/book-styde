import { BookTypeWork, Books } from '@/types/Book';

export const questions = [
	'Как тебя могут называть?',
	'Какие года составляют твой возраст?',
	'Какой оттенок привлекает твое внимание, когда речь идет о цветах?',
	'В каком городе ты появился на свет?',
	'Какие виды активности ты предпочитаешь для физического развития?',
	'Какой напиток ты обычно выбираешь для бодрствования: кофе или чай?',
	'Какое время года приносит тебе особенное удовольствие?',
	'Какой фильм оставил на тебе наилучшее впечатление?',
	'Чем обычно наслаждаешься на завтрак?',
	'Какая звездная констелляция в момент твоего рождения определяет твой знак зодиака?',
	'В каком учебном предмете ты обнаруживаешь особенный интерес?',
	'Что приносит тебе радость и удовлетворение?',
	'Какую музыку ты предпочитаешь слушать?',
	'Какое хобби приносит тебе удовольствие и умиротворение?',
	'Что ты выберешь: занятное чтиво или увлекательный фильм?',
	'Какие животные тебе близки или вызывают интерес?',
	'Как проходит твое время в выходные дни?',
	'Какое блюдо всегда поднимает твое настроение?',
	'Какой интересный факт о себе ты можешь поделиться?',
	'Как ты видишь свое будущее, какие перспективы тебя привлекают?',
];

export const data: Books = {
	book: [
		{
			title: '',
			chapter: 1,
			part: 'javascript',
			content: '',
			parts: [
				{
					title: 'Изучение HTML- руководства и уроки',
					chapter: 1.1,
					content:
						'<header><h1>Изучение HTML: руководства и уроки</h1></header><div class="section-content"><p>Чтобы создавать веб-сайты, вы должны знать о <a>HTML</a> — фундаментальной технологии, которая используется для определения структуры веб-страницы. HTML применяется для того, чтобы определить как должен отображаться ваш контент: в виде абзаца, списка, заголовка, ссылки, изображения, мультимедийного проигрывателя, формы или же в виде одного из множества других доступных элементов, а также возможного нового элемента, который вы сами создадите.</p></div><section aria-labelledby="путь_обучения_образовательная_траектория"><h2 id="путь_обучения_образовательная_траектория"><a>Путь обучения (образовательная траектория)</a></h2><div class="section-content"><p>В идеале вы должны начать своё учебное путешествие с изучения HTML. Начните с прочтения раздела <a>"Введение в HTML"</a>. Затем вы можете перейти к изучению более продвинутых тем, таких как:</p>\n<ul>\n  <li><a>"CSS (Каскадные таблицы стилей)"</a>, и как их использовать для оформления (стилизации) HTML-документа (например, изменение шрифта и его размера, добавление границы и теней для элементов, разбиение страницы на несколько столбцов, добавление анимации и других визуальных эффектов).</li>\n  <li><a>"JavaScript"</a>, и как его использовать для придания динамической функциональности веб-страницам (например, определение вашего местоположения и отображение его на карте, создание элементов, которые будут появляться/исчезать при нажатии на кнопку, сохранение данных пользователей локально на их компьютерах и многое другое).</li>\n</ul>\n<p>Прежде чем приступить к этой теме, вы должны иметь хотя бы базовое представление об использовании компьютеров вообще и уметь "пассивно" использовать Интернет (т.е. уметь просматривать веб-страницы, быть потребителем контента). У вас должна быть базовая рабочая среда, описанная в <a>разделе "Установка базового программного обеспечения"</a>, а также вы должны понимать, как создавать файлы и управлять ими, что подробно описано в <a>разделе "Работа с файлами"</a> — обе статьи являются частью нашего модуля для новичков - <a>"Начало работы с вебом"</a>.</p>\n<p>Перед тем, как начать эту тему, рекомендуется пройтись по разделу <a>"Начало работы с вебом"</a>, однако это необязательно; многое из того, что описано в статье <a>"Основы HTML"</a>, также рассматривается и во <a>"Введении в HTML"</a>, причём даже более подробно.</p></div></section><section aria-labelledby="модули"><h2 id="модули"><a>Модули</a></h2><div class="section-content"><p>Данный раздел содержит модули, которые расположены в порядке, наиболее оптимальном для их изучения. Вам определённо следует начать с первого модуля.</p>\n<dl>\n  <dt id="введение_в_html"><a>Введение в HTML</a></dt>\n  <dd>\n    <p>Этот модуль даёт основу, которая позволит вам использовать важные понятия и синтаксис, вы рассмотрите применение HTML к тексту, узнаете как создать гиперссылки и как использовать HTML для структурирования веб-страницы.</p>\n  </dd>\n  <dt id="мультимедиа_и_встраивание"><a>Мультимедиа и встраивание</a></dt>\n  <dd>\n    <p>В этом модуле рассматривается использование HTML для подключения мультимедиа-контента к вашим веб-страницам, включая различные способы встраивания изображений, видео и аудио и даже других веб-страниц.</p>\n  </dd>\n  <dt id="html_таблицы"><a>HTML Таблицы</a></dt>\n  <dd>\n    <p>Представление табличных данных на веб-странице в понятном, <a>доступном</a> образе, может стать проблемой. Этот модуль описывает основы табличной разметки, а также более сложные функции, такие как реализация подписок и резюме.</p>\n  </dd>\n  <dt id="html_формы"><a>HTML Формы</a></dt>\n  <dd>\n    <p>Формы - очень важная часть интернета, они обеспечивают большую часть функциональных возможностей, необходимых для взаимодействия с веб-сайтом, например, регистрация и вход в систему, отправка отзывов, покупка продуктов и многое другое. В этом модуле вы начнёте с создания частей форм на стороне клиента.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="решение_общих_html_задач"><h2 id="решение_общих_html_задач"><a>Решение общих HTML задач</a></h2><div class="section-content"><p><a>Использование HTML для решения общих задач</a> содержит ссылки на разделы контента, объясняющего, как использовать HTML для решения очень распространённых проблем при создании веб-страницы: работа с заголовками, добавление изображений или видео, выделение содержимого, создание базовой формы и т.д.</p></div></section>',
					works: [],
				},
				{
					title: 'Основы HTML',
					chapter: 1.2,
					content:
						'<header><h1>Основы HTML</h1></header><div class="section-content">\n<p>HTML (Hypertext Markup Language) - это код, который используется для структурирования и отображения веб-страницы и её контента. Например, контент может быть структурирован внутри множества параграфов, маркированных списков или с использованием изображений и таблиц данных. Как видно из названия, эта статья даст вам базовое понимание HTML и его функций.</p></div><section aria-labelledby="что_такое_html_на_самом_деле"><h2 id="что_такое_html_на_самом_деле"><a>Что такое HTML на самом деле?</a></h2><div class="section-content"><p>HTML не является языком программирования; это <em>язык разметки</em>, и используется, чтобы сообщать вашему браузеру, как отображать веб-страницы, которые вы посещаете. Он может быть сложным или простым, в зависимости от того, как хочет веб-дизайнер. HTML состоит из ряда <strong><a>элементов</a></strong>, которые вы используете, чтобы вкладывать или оборачивать различные части контента, чтобы заставить контент отображаться или действовать определённым образом. Ограждающие <a>теги</a> могут сделать слово или изображение ссылкой на что-то ещё, могут сделать слова курсивом, сделать шрифт больше или меньше и так далее. Например, возьмём следующую строку контента:</p>\n<pre compile="false" disable="true" language="markup">Моя кошка очень раздражена\n</pre>\n<p>Если бы мы хотели, чтобы строка стояла сама по себе, мы могли бы указать, что это абзац, заключая его в теги абзаца:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Моя кошка очень раздражена</p>\n</pre></div></div></section><section aria-labelledby="анатомия_html_элемента"><h3 id="анатомия_html_элемента"><a>Анатомия HTML элемента</a></h3><div class="section-content"><p>Давайте рассмотрим элемент абзаца более подробно.</p>\n<p>\n  \n</p>\n<p>Главными частями нашего элемента являются:</p>\n<ol>\n  <li><strong>Открывающий тег (Opening tag)</strong>: Состоит из имени элемента (в данном случае, "p"), заключённого в открывающие и закрывающие <strong>угловые скобки</strong>. Открывающий тег указывает, где элемент начинается или начинает действовать, в данном случае — где начинается абзац.</li>\n  <li><strong>Закрывающий тег (Closing tag):</strong> Это то же самое, что и открывающий тег, за исключением того, что он включает в себя косую черту перед именем элемента. Закрывающий элемент указывает, где элемент заканчивается, в данном случае — где заканчивается абзац. Отсутствие закрывающего тега является одной из наиболее распространённых ошибок начинающих и может приводить к странным результатам.</li>\n  <li><strong>Контент (Content)</strong>: Это контент элемента, который в данном случае является просто текстом.</li>\n  <li><strong>Элемент(Element)</strong>: Открывающий тег, закрывающий тег и контент вместе составляют элемент.</li>\n</ol>\n<p>Элементы также могут иметь атрибуты, которые выглядят так:</p>\n<p>\n  \n</p>\n<p>Атрибуты содержат дополнительную информацию об элементе, которую вы не хотите показывать в фактическом контенте. В данном случае, class это <em>имя</em> <em>атрибута,</em> а <code>editor-note</code> это <em>значение атрибута</em>. Класс позволяет дать элементу идентификационное имя, которое может позже использоваться, чтобы обращаться к элементу с информацией о стиле и прочих вещах.</p>\n<p>Атрибут всегда должен иметь:</p>\n<ol>\n  <li>Пробел между ним и именем элемента (или предыдущим атрибутом, если элемент уже имеет один или несколько атрибутов).</li>\n  <li>Имя атрибута, за которым следует знак равенства.</li>\n  <li>Значение атрибута, заключённое с двух сторон в кавычки.</li>\n</ol></div></section><section aria-labelledby="вложенные_элементы"><h3 id="вложенные_элементы"><a>Вложенные элементы</a></h3><div class="section-content"><p>Вы также можете располагать элементы внутри других элементов — это называется <strong>вложением</strong>. Если мы хотим заявить, что наша кошка <strong>очень</strong> раздражена, мы можем заключить слово "очень" в элемент <a><code>&lt;strong&gt;</code></a> , который указывает, что слово должно быть сильно акцентированно:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Моя кошка <strong>очень</strong> раздражена.</p>\n</pre></div>\n<p>Вы, однако, должны убедиться, что ваши элементы правильно вложены: в примере выше мы открыли первым элемент <a><code>&lt;p&gt;</code></a>, затем элемент <a><code>&lt;strong&gt;</code></a>, потом мы должны закрыть сначала элемент <a><code>&lt;strong&gt;</code></a>, затем <a><code>&lt;p&gt;</code></a>. Приведённое ниже неверно:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Моя кошка <strong>очень раздражена.</strong></p>\n</pre></div>\n<p>Элементы должны открываться и закрываться правильно, поэтому они явно располагаются внутри или снаружи друг друга. Если они перекрываются, как в примере выше, ваш веб-браузер будет пытаться сделать наилучшее предположение на основе того, что вы пытались сказать, что может привести к неожиданным результатам. Так что не стоит этого делать!</p></div></section><section aria-labelledby="пустые_элементы"><h3 id="пустые_элементы"><a>Пустые элементы</a></h3><div class="section-content"><p>Некоторые элементы не имеют контента, и называются <strong>пустыми элементами</strong>. Возьмём элемент <a><code>&lt;img&gt;</code></a>, который уже имеется в нашем HTML:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="images/firefox-icon.png" alt="Моё тестовое изображение">\n</pre></div>\n<p>Он содержит два атрибута, но не имеет закрывающего тега <code>&lt;/img&gt;</code>, и никакого внутреннего контента. Это потому, что элемент изображения не оборачивает контент для влияния на него. Его целью является вставка изображения в HTML страницу в нужном месте.</p></div></section><section aria-labelledby="анатомия_html_документа"><h3 id="анатомия_html_документа"><a>Анатомия HTML документа</a></h3><div class="section-content"><p>Мы завершили изучение основ отдельных HTML элементов, но они не очень полезны сами по себе. Теперь мы посмотрим, как отдельные элементы объединяются в целую HTML страницу. Давайте вернёмся к коду, который мы записывали в наш <code>index.html</code> (с которым мы впервые встретились в статье <a>Работа с файлами</a>):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n\n  \n    <meta charset="utf-8">\n    <title>Моя тестовая страница</title>\n  \n  \n    <img src="images/firefox-icon.png" alt="Моё тестовое изображение">\n  \n\n</pre></div>\n<p>Здесь мы имеем:</p>\n<ul>\n  <li><code>&lt;!DOCTYPE html&gt;</code> — доктайп. В прошлом, когда HTML был молод (около 1991/1992), доктайпы должны были выступать в качестве ссылки на набор правил, которым HTML страница должна была следовать, чтобы считаться хорошим HTML, что могло означать автоматическую проверку ошибок и другие полезные вещи. Однако в наши дни, никто не заботится об этом, и они на самом деле просто исторический артефакт, который должен быть включён для того, что бы все работало правильно. На данный момент это все, что вам нужно знать.</li>\n  <li><code>&lt;html&gt;&lt;/html&gt;</code> — элемент <a><code>&lt;html&gt;</code></a>. Этот элемент оборачивает весь контент на всей странице, и иногда известен как корневой элемент.</li>\n  <li><code>&lt;head&gt;&lt;/head&gt;</code> — элемент <a><code>&lt;head&gt;</code></a>. Этот элемент выступает в качестве контейнера для всего, что вы пожелаете включить на HTML страницу, но <em>не являющегося</em> контентом, который вы показываете пользователям вашей страницы. К ним относятся такие вещи, как ключевые слова и описание страницы, которые будут появляться в результатах поиска, CSS стили нашего контента, кодировка и многое другое.</li>\n  <li><code>&lt;body&gt;&lt;/body&gt;</code> — элемент <a><code>&lt;body&gt;</code></a>. В нем содержится <em>весь</em> контент, который вы хотите показывать пользователям, когда они посещают вашу страницу, будь то текст, изображения, видео, игры, проигрываемые аудиодорожки или что-то ещё.</li>\n  <li><code>&lt;meta charset="utf-8"&gt;</code> — этот элемент устанавливает UTF-8 кодировку вашего документа, которая включает в себя большинство символов из всех известных человечеству языков. По сути, теперь документ может обрабатывать любой текстовый контент, который вы в него вложите. Нет причин не устанавливать её, так как это может помочь избежать некоторых проблем в дальнейшем.</li>\n  <li><code>&lt;title&gt;&lt;/title&gt;</code> — элемент <a><code>&lt;title&gt;</code></a>. Этот элемент устанавливает заголовок для вашей страницы, который является названием, появляющимся на вкладке браузера загружаемой страницы, и используется для описания страницы, когда вы добавляете её в закладки/избранное.</li>\n</ul></div></section><section aria-labelledby="изображения"><h2 id="изображения"><a>Изображения</a></h2><div class="section-content"><p>Давайте снова обратим наше внимание на элемент <a>изображения</a>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="images/firefox-icon.png" alt="Mоё тестовое изображение">\n</pre></div>\n<p>Как было сказано раньше, код встраивает изображение на нашу страницу в нужном месте. Это делается с помощью атрибута <code>src</code> (source, источник), который содержит путь к нашему файлу изображения.</p>\n<p>Мы также включили атрибут <code>alt</code> (alternative, альтернатива). В этом атрибуте, вы указываете поясняющий текст для пользователей, которые не могут увидеть изображение, возможно, по следующим причинам:</p>\n<ol>\n  <li>У них присутствуют нарушения зрения. Пользователи со значительным нарушением зрения часто используют инструменты, называемые Screen Readers (экранные дикторы), которые читают для них альтернативный текст.</li>\n  <li>Что-то пошло не так, в результате чего изображение не отобразилось. Например, попробуйте намеренно изменить путь в вашем атрибуте <code>src</code>, сделав его неверным. Если вы сохраните и перезагрузите страницу, то вы должны увидеть что-то подобное вместо изображения:</li>\n</ol>\n<p>\n  \n</p>\n<p>Альтернативный текст - это "пояснительный текст". Он должен предоставить читателю достаточно информации, чтобы иметь представление о том, что передаёт изображение. В этом примере наш текст "My test image" ("Моё тестовое изображение") не годится. Намного лучшей альтернативой для нашего логотипа Firefox будет "The Firefox logo: a flaming fox surrounding the Earth" ("Логотип Firefox: огненный Лис вокруг Земли").</p>\n<p>Сейчас попробуйте придумать более подходящий альтернативный текст для вашего изображения.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Узнайте больше о <a>специальных возможностях</a>.</p>\n</div></div></section><section aria-labelledby="разметка_текста"><h2 id="разметка_текста"><a>Разметка текста</a></h2><div class="section-content"><p>В этом разделе рассмотрим некоторые из основных HTML элементов, которые вы будете использовать для разметки текста.</p></div></section><section aria-labelledby="заголовки"><h3 id="заголовки"><a>Заголовки</a></h3><div class="section-content"><p>Элементы заголовка позволяют вам указывать определённые части вашего контента в качестве заголовков или подзаголовков. Точно так же, как книга имеет название, названия глав и подзаголовков, HTML документ может содержать то же самое. HTML включает шесть уровней заголовков <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a>–<a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h6&gt;</code> <small>(en-US)</small></a>, хотя обычно вы будете использовать не более 3-4 :</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><h1>Мой главный заголовок</h1>\n<h2>Мой заголовок верхнего уровня</h2>\n<h3>Мой подзаголовок</h3>\n<h4>Мой под-подзаголовок</h4>\n</pre></div>\n<p>Теперь попробуйте добавить подходящее название для вашей HTML страницы, чуть выше элемента <a><code>&lt;img&gt;</code></a>.</p></div></section><section aria-labelledby="абзацы"><h3 id="абзацы"><a>Абзацы</a></h3><div class="section-content"><p>Как было сказано раньше, элемент <a><code>&lt;p&gt;</code></a> предназначен для абзацев текста; вы будете использовать их регулярно при разметке текстового контента:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Это одиночный абзац</p>\n</pre></div>\n<p>Добавьте свой образец текста (вы создавали его в статье <a><em>Каким должен быть ваш веб-сайт?</em></a>) в один или несколько абзацев, расположенных прямо под элементом <a><code>&lt;img&gt;</code></a>.</p></div></section><section aria-labelledby="списки"><h3 id="списки"><a>Списки</a></h3><div class="section-content"><p>Большая часть веб-контента является списками и HTML имеет специальные элементы для них. Разметка списка всегда состоит по меньшей мере из двух элементов. Наиболее распространёнными типами списков являются нумерованные и ненумерованные списки:</p>\n<ol>\n  <li><strong>Ненумерованные списки</strong> - это списки, где порядок пунктов не имеет значения, как в списке покупок. Они оборачиваются в элемент <a><code>&lt;ul&gt;</code></a>.</li>\n  <li><strong>Нумерованные списки -</strong> это списки, где порядок пунктов имеет значение, как в рецепте. Они оборачиваются в элемент <a><code>&lt;ol&gt;</code></a>.</li>\n</ol>\n<p>Каждый пункт внутри списков располагается внутри элемента <a><code>&lt;li&gt;</code></a> (list item, элемент списка).</p>\n<p>Например, если мы хотим включить часть следующего фрагмента абзаца в список:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  Mozilla, мы являемся мировым сообществом технологов, мыслителей и строителей,\n  работающих вместе ...\n</p>\n</pre></div>\n<p>Мы могли бы изменить разметку на эту:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Mozilla, мы являемся мировым сообществом</p>\n\n<ul>\n  <li>технологов</li>\n  <li>мыслителей</li>\n  <li>строителей</li>\n</ul>\n\n<p>работающих вместе ...</p>\n</pre></div>\n<p>Попробуйте добавить упорядоченный или неупорядоченный список на свою страницу.</p></div></section><section aria-labelledby="ссылки"><h2 id="ссылки"><a>Ссылки</a></h2><div class="section-content"><p>Ссылки очень важны — это то, что делает Интернет Интернетом. Чтобы добавить ссылку, нам нужно использовать простой элемент — <a><code>&lt;a&gt;</code></a> — <em>a</em> это сокращение от "anchor" ("якорь"). Чтобы текст в вашем абзаце стал ссылкой, выполните следующие действия:</p>\n<ol>\n  <li>Выберите некоторый текст. Мы выбрали текст "Манифест Mozilla".</li>\n  <li>Оберните текст в элемент <a><code>&lt;a&gt;</code></a>, например так:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><a>Манифест Mozilla</a>\n</pre></div>\n  </li>\n  <li>Задайте элементу <a><code>&lt;a&gt;</code></a> атрибут href, например так:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><a href="">Манифест Mozilla</a>\n</pre></div>\n  </li>\n  <li>Заполните значение этого атрибута веб-адресом, на который вы хотите указать ссылку:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><a href="https://www.mozilla.org/ru/about/manifesto/details/">Манифест Mozilla</a>\n</pre></div>\n  </li>\n</ol>\n<p>Вы можете получить неожиданные результаты, если в самом начале веб-адреса вы опустите <code>https://</code> или <code>http://</code> часть, называемую <em>протоколом</em>. После создания ссылки, кликните по ней, чтобы убедиться, что она направляет вас туда, куда вы хотели.</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> <code>href</code> сначала может выглядеть довольно непонятым выбором для имени атрибута. Если у вас возникли проблемы с тем, чтобы запомнить его, можете запомнить, что атрибут href образуется как <em><strong>h</strong>ypertext <strong>ref</strong>erence</em> ("гипертекстовая ссылка").</p>\n</div>\n<p>Теперь добавьте ссылку на вашу страницу, если вы ещё не сделали этого.</p></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Если вы следовали всем инструкциям в этой статье, то вы должны увидеть в конечном итоге страницу, аналогичную рисунку ниже (вы также можете <a class="external" target="_blank">посмотреть её здесь</a>):</p>\n<p>\n  \n</p>\n<p>Если вы застряли, вы всегда можете сравнить свою работу с нашим <a class="external" target="_blank">готовым примером кода</a> на GitHub.</p>\n<p>Здесь вы узнали только самую поверхность HTML. Чтобы узнать больше, перейдите на страницу <a>Обучение HTML: руководства и уроки</a>.</p></div></section>',
					works: [],
				},
				{
					title: 'Введение в HTML',
					chapter: 1.3,
					content:
						'<header><h1>Введение в HTML</h1></header><div class="section-content"><p>По сути, <a>HTML</a> довольно простой язык, состоящий из элементов, которые могут быть применены к частям текста, чтобы придавать им различные значения (Это абзац? Это маркированный список? Это часть таблицы?), разделять документ на логические секции (есть ли у документа шапка? три столбца с контентом? меню навигации?) и добавлять контент на Вашу страницу, такой как фото и видео. Этот модуль расскажет вам о первых двух возможностях HTML и научит фундаментальным концепциям и синтаксису, которые вам нужно знать, чтобы понять HTML.</p></div><section aria-labelledby="необходимые_условия"><h2 id="необходимые_условия"><a>Необходимые условия</a></h2><div class="section-content"><p>Чтобы начать изучение этого модуля, вам не нужны никакие знания HTML, но вы должны иметь хотя бы базовые навыки обращения с компьютером и навыки пассивного использования Веба (т.е просто смотря на него, потребляя контент). У вас должна быть базовая рабочая среда, описанная в разделе <a>Установка базового программного обеспечения</a>), а также понимание, как создавать и управлять файлами, что подробно описано в статье <a>Работа с файлами</a> — обе статьи являются частью нашего модуля <a>Начало работы с сетью</a>.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> если вы работаете на компьютере/планшете/другом устройстве, с отсутствием возможности создания собственных файлов, вы можете испробовать примеры кода (большинство) в онлайн-редакторах кода, таких как <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble.</a></p>\n</div></div></section><section aria-labelledby="руководства"><h2 id="руководства"><a>Руководства</a></h2><div class="section-content"><p>Этот модуль содержит следующие статьи, которые помогут изучить всю основную теорию HTML и предоставят широкие возможности для проверки некоторых навыков.</p>\n<dl>\n  <dt id="начало_работы_с_html"><a>Начало работы с HTML</a></dt>\n  <dd>\n    <p>Охватывает базовые основы HTML, чтобы вы начали изучение - мы опишем элементы, атрибуты и все другие важные термины, о которых вы, возможно, уже слышали, а также где и как они располагаются в языке. Мы также покажем, структуру HTML-элемента, как устроена типичная страница HTML, и объясним другие важные языковые особенности. По ходу мы будем играть с HTML так, чтобы вам было интересно!</p>\n  </dd>\n  <dt id="что_такое_заголовок_метаданные_в_html"><a>Что такое заголовок? Метаданные в HTML</a></dt>\n  <dd>\n    <p>Заголовок HTML — это часть документа, которая <strong>не отображается</strong> в браузере при загрузке страницы. Он содержит информацию, такую как: страница <a><code>&lt;title&gt;</code></a>, ссылки на <a>CSS</a> (если вы хотите стилизовать свой HTML при помощи CSS), ссылки на пользовательские значки и метаданные (которые представляют собой данные о HTML, например, кто его написал или важные ключевые слова, которые описывают документ).</p>\n  </dd>\n  <dt id="основы_редактирования_текста_в_html"><a>Основы редактирования текста в HTML</a></dt>\n  <dd>\n    <p>Основной задачей HTML является придание тексту значения **(**также известно, как <strong>семантика</strong>), чтобы браузер знал, как его правильно отображать. В этой статье рассматривается то, как использовать HTML, чтобы разбить блок текста на структуру из заголовков и абзацев, добавить акцент/значение слов, создать списки и многое другое.</p>\n  </dd>\n  <dt id="создание_гиперссылок"><a>Создание гиперссылок</a></dt>\n  <dd>\n    <p>Гиперссылки очень важны — ведь именно они делают интернет интернетом. В этой статье описан синтаксис, необходимый для создания ссылок, а также описано их наилучшее применение на практике.</p>\n  </dd>\n  <dt id="углублённое_форматирование_текста"><a>Углублённое форматирование текста</a></dt>\n  <dd>\n    <p>Существует множество других элементов HTML для редактирования текста, про которые мы вам не рассказали в статье <a>Основы редактирования текста в HTML</a>. Описанные здесь элементы менее известны, но о них также полезно знать. Здесь вы узнаете о разметке цитат, списках описания, компьютерном коде и другом сопутствующем тексте, нижнем и верхнем индексах, контактной информации и многом другом.</p>\n  </dd>\n  <dt id="структура_документа_и_веб-сайта"><a>Структура документа и веб-сайта</a></dt>\n  <dd>\n    <p>Помимо определения отдельных частей страницы (таких как "абзац" или "изображение"), HTML также используется для определения отдельных зон веб-сайта (таких как "шапка", "меню навигации", "столбец с основным содержимым".) В этой статье рассматривается, как планировать базовую структуру веб-сайта и писать HTML для представления этой структуры.</p>\n  </dd>\n <dt id="отладка_html"><a>Отладка HTML</a></dt>\n  <dd>\n    <p>Писать на HTML хорошо, но что, если что-то идёт не так, и вы не можете найти место ошибки в коде? В этой статье вы познакомитесь с некоторыми инструментами, которые могут вам помочь.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="оценка"><h2 id="оценка"><a>Оценка</a></h2><div class="section-content"><p>Следующие задания проверят ваше понимание основ HTML, описанных в приведённых выше руководствах.</p>\n<dl>\n  <dt id="разметка_письма"><a>Разметка письма</a></dt>\n  <dd>\n    <p>Все мы рано или поздно учимся писать письма; также это полезный тест, для проверки ваших навыков форматирования текста! Поэтому, в этом задании вам будет предоставлено письмо для разметки.</p>\n  </dd>\n  <dt id="структурируем_страницу"><a>Структурируем страницу</a></dt>\n  <dd>\n    <p>Этот тест проверит вашу способность использовать HTML для структурирования простой страницы, которая содержит шапку ("хедер") , нижний колонтитул ("футер"), меню навигации, основное содержимое и боковую панель.</p>\n  </dd>\n</dl></div></section>',
					works: [],
				},
				{
					title: 'Начало работы с HTML',
					chapter: 1.4,
					content:
						'<header><h1>Начало работы с HTML</h1></header><div class="section-content">\n<p>В этой статье мы охватим азы HTML, необходимые для начала работы. Дадим определение «элементам», «атрибутам», «тегам» и прочим важным понятиям, о которых вы, возможно, слышали, а также об их роли в языке. Мы также покажем, как устроены HTML-элементы, типичная HTML-страница, и объясним другие важные аспекты языка. По ходу дела, чтобы вы не заскучали, мы поиграем с настоящей HTML-страницей!</p>\n</div><section aria-labelledby="что_такое_html"><h2 id="что_такое_html"><a>Что такое HTML?</a></h2><div class="section-content"><p><a>HTML</a> (HyperText Markup Language - язык гипертекстовой разметки) не является языком программирования; это <em>язык разметки</em>, используемый для определения структуры веб-страниц, посещаемых пользователями. Они могут иметь сложную или простую структуру, всё зависит от замысла и желания веб-разработчика. HTML состоит из ряда <a>элементов</a>, которые вы используете для того, чтобы охватить, обернуть или <em>разметить</em> различные части содержимого, чтобы оно имело определённый вид или срабатывало определённым способом. Встроенные <a>тэги</a> могут преобразовать часть содержимого в гиперссылку, по которой можно перейти на другую веб-страницу, выделить курсивом слова и так далее. Например, рассмотрим следующую строку:</p>\n<pre compile="false" disable="true" language="markup">Мой кот очень сердитый\n</pre>\n<p>Если мы хотим, чтобы строка отобразилась в таком же виде, мы можем определить её, как "параграф", заключив её в теги элемента "параграф" (<a><code>&lt;p&gt;</code></a>), например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Мой кот очень сердитый</p>\n</pre></div>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Метки в HTML нечувствительны к регистру, то есть они могут быть записаны в верхнем или нижнем регистре. Например, тег <a><code>&lt;title&gt;</code></a> может быть записан как <code>&lt;title&gt;</code>, <code>&lt;TITLE&gt;</code>, <code>&lt;Title&gt;</code>, <code>&lt;TiTlE&gt;</code>, и т.д., и он будет работать нормально. Лучшей практикой, однако, является запись всех тегов в нижнем регистре для обеспечения согласованности, удобочитаемости и других причин.</p>\n</div></div></section><section aria-labelledby="структура_html-элементов"><h2 id="структура_html-элементов"><a>Структура HTML-элементов</a></h2><div class="section-content"><p>Давайте рассмотрим элемент "параграф" чуть подробнее:</p>\n<p>\n  \n</p>\n<p>Основными частями элемента являются:</p>\n<ol>\n  <li><strong>Открывающий тег:</strong> Он состоит из названия (обозначения) элемента (в нашем случае, p), помещённого внутри <strong>угловых скобок</strong>. Данный тег служит признаком начала элемента, с этого момента тег начинает влиять на следующее после него содержимое.</li>\n  <li><strong>Закрывающий тег:</strong> выглядит как и открывающий, но содержит слеш перед названием тега. Он служит признаком конца элемента. Пропуски закрывающих тегов — типичная ошибка новичков, которая может приводить к неопределённым результатам — в лучшем случае всё сработает правильно, в других страница может вовсе не прорисоваться или прорисоваться не как ожидалось.</li>\n  <li><strong>Содержимое:</strong> Как видно, в нашем случае содержимым является простой текст.</li>\n  <li><strong>Элемент:</strong> открывающий тег + закрывающий тег + содержимое = элемент.</li>\n</ol></div></section><section aria-labelledby="активное_изучение_создание_вашего_первого_html-элемента"><h3 id="активное_изучение_создание_вашего_первого_html-элемента"><a>Активное изучение: создание вашего первого HTML-элемента</a></h3><div class="section-content"><p>Отредактируйте строку текста ниже в поле <em>Ввод</em>, обернув её тегами <code>&lt;em&gt;</code> и <code>&lt;/em&gt;</code> (вставьте <code>&lt;em&gt;</code> перед строкой, чтобы <em>указать начало элемента</em>, и <code>&lt;/em&gt;</code> после неё, чтобы <em>указать конец элемента</em>) — эти действия должны выделить строку текста курсивом! Вы можете видеть изменения в реальном времени в поле <em>Вывод</em>.</p>\n<p>Если вы ошиблись, то всегда можете начать снова, воспользовавшись кнопкой <em>Сбросить</em>. Если упражнение вызывает у вас затруднения, то нажмите кнопку <em>Показать решение</em>, чтобы увидеть правильный ответ.</p>\n<div class="code-example" id="sect2"><div class="example-header" id="sect3"></div></div></div></section><section aria-labelledby="вложенные_элементы"><h3 id="вложенные_элементы"><a>Вложенные элементы</a></h3><div class="section-content"><p>Вы также можете вкладывать элементы внутрь других элементов — это называется <strong>вложенностью</strong>. Если мы хотим подчеркнуть, что наш кот <strong>очень</strong> сердитый, мы можем заключить слово "очень" в элемент <a><code>&lt;strong&gt;</code></a> , который означает, что это слово крайне важно в данном контексте:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Мой кот <strong>очень</strong> сердитый.</p>\n</pre></div>\n<p>Вы должны удостовериться, что элементы вложены должным образом: в следующем примере мы открываем <code>p</code> элемент первым, затем элемент <code>strong</code>, затем мы закрываем элемент <code>strong</code> первым, затем <code>p</code>. Следующее писать неправильно:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Мой кот <strong>очень сердитый.</strong></p>\n</pre></div>\n<p>Элементы должны открываться и закрываться правильно таким образом, чтобы явно находиться внутри или снаружи друг друга. Если они перекрываются так, как в примере выше, то ваш браузер попытается «додумать» за вас, что вы имели в виду, и вы получите непредсказуемый результат. Так что не делайте так!</p></div></section><section aria-labelledby="блочные_и_строчные_элементы"><h3 id="блочные_и_строчные_элементы"><a>Блочные и строчные элементы</a></h3><div class="section-content"><p>Существует две важных категории элементов в HTML, которые вам стоит знать — элементы блочного уровня и строчные элементы.</p>\n<ul>\n  <li>Элементы блочного уровня формируют видимый блок на странице — они окажутся на новой строке после любого контента, который шёл до них, и любой контент после них также окажется на новой строке. Чаще всего элементами блочного уровня бывают структурные элементы страницы, представляющие собой, например, параграфы (абзацы), списки, меню навигации, футеры, или подвалы, и т. п. Элементы блочного уровня не вкладываются в строчные элементы, но иногда могут вкладываться в другие элементы блочного уровня.</li>\n  <li>Строчные элементы — это те, которые содержатся в элементах блочного уровня и окружают только малые части содержимого документа, не целые абзацы и группировки контента. Строчные элементы не приводят к появлению новой строки в документе: они обычно встречаются внутри абзаца текста, например, элемент <a><code>&lt;a&gt;</code></a> (ссылка) или акцентирующие элементы вроде <a><code>&lt;em&gt;</code></a> или <a><code>&lt;strong&gt;</code></a>.</li>\n</ul>\n<p>Посмотрите на следующий пример:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><em>Первый</em>\n<em>второй</em>\n<em>третий</em>\n\n<p>четвёртый</p>\n<p>пятый</p>\n<p>шестой</p>\n</pre></div>\n<p><a><code>&lt;em&gt;</code></a> — это строчный элемент, так что, как вы здесь видите, первые три элемента находятся на одной строке друг с другом без пробелов между ними. С другой стороны, <a><code>&lt;p&gt;</code></a> — это элемент блочного уровня, так что каждый элемент находится на новой строке, с пространством выше и ниже каждого (этот интервал определяется <a>CSS-оформлением</a> по умолчанию, которое браузеры применяют к абзацам).</p><div class="code-example" id="sect4"><div class="example-header" id="sect5"></div></div>\n<div class="notecard note" id="sect6">\n  <p><strong>Примечание:</strong> HTML5 переопределил категории элементов в HTML: смотрите <a class="external" target="_blank">Категории типов содержимого элементов</a>. Хотя эти определения точнее и однозначнее, чем те, которые были раньше, их гораздо сложнее понять, чем «блочный» и «строчный», поэтому мы будем придерживаться их в этом разделе.</p>\n</div>\n<div class="notecard note" id="sect7">\n  <p><strong>Примечание:</strong> Не путайте термины «блочный» и «строчный», используемые в этом разделе, с одноимёнными <a>типами отображения в CSS</a>. Хотя по умолчанию они коррелируют, смена типа отображения в CSS не меняет категорию элемента и не влияет на то, во что его можно вкладывать и что можно вкладывать в него. Эта довольно частая путаница — одна из причин, почему HTML5 отказался от этих терминов.</p>\n</div></div></section><section aria-labelledby="пустые_элементы"><h3 id="пустые_элементы"><a>Пустые элементы</a></h3><div class="section-content"><p>Не все элементы соответствуют вышеупомянутому шаблону: открывающий тег, контент, закрывающий тег. Некоторые элементы состоят из одного тега и обычно используются для вставки чего-либо в то место документа, где размещены. Например, элемент <a><code>&lt;img&gt;</code></a> вставляет картинку на страницу в том самом месте, где он расположен:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="https://raw.githubusercontent.com/mdn/beginner-html-site/gh-pages/images/firefox-icon.png">\n</pre></div>\n<p>Это выведет на вашу страницу следующее:</p><div class="code-example" id="sect8"><div class="example-header" id="sect9"></div></div>\n<div class="notecard note" id="sect10">\n  <p><strong>Примечание:</strong> Пустые элементы иногда называют <em>void-элементами</em>.</p>\n</div></div></section><section aria-labelledby="атрибуты"><h2 id="атрибуты"><a>Атрибуты</a></h2><div class="section-content"><p>У элементов также могут быть атрибуты, которые выглядят так:</p>\n<p>\n  \n</p>\n<p>Атрибуты содержат дополнительную информацию об элементе, которая, по вашему мнению, не должна отображаться в содержимом элемента. В данном случае атрибут <code>class</code> позволяет вам дать элементу идентификационное имя, которое в дальнейшем может быть использовано для обращения к элементу с информацией о стиле и прочими вещами.</p>\n<p>Атрибут должен иметь:</p>\n<ol>\n  <li>Пробел между атрибутом и именем элемента (или предыдущим атрибутом, если у элемента уже есть один или несколько атрибутов).</li>\n  <li>Имя атрибута и следующий за ним знак равенства.</li>\n  <li>Значение атрибута, заключённое в кавычки.</li>\n</ol></div></section><section aria-labelledby="активное_изучение_добавление_атрибутов_в_элемент"><h3 id="активное_изучение_добавление_атрибутов_в_элемент"><a>Активное изучение: Добавление атрибутов в элемент</a></h3><div class="section-content"><p>Возьмём для примера элемент <a><code>&lt;a&gt;</code></a> — означает anchor (якорь) и делает текст внутри него гиперссылкой. Может иметь несколько атрибутов, вот несколько из них:</p>\n<dl>\n  <dt id="href"><a><code>href</code></a></dt>\n  <dd>\n    <p>В значении этого атрибута прописывается веб-адрес, на который, по вашей задумке, должна указывать ссылка, куда браузер переходит, когда вы по ней кликаете. Например, <code>href="https://www.mozilla.org/"</code>.</p>\n  </dd>\n  <dt id="title"><a><code>title</code></a></dt>\n  <dd>\n    <p>Атрибут <code>title</code> описывает дополнительную информацию о ссылке, такую как: на какую страницу она ведёт. Например, <code>title="The Mozilla homepage"</code>. Она появится в виде всплывающей подсказки, когда вы наведёте курсор на ссылку.</p>\n  </dd>\n  <dt id="target"><a><code>target</code></a></dt>\n  <dd>\n    <p>Атрибут <code>target</code> определяет контекст просмотра, который будет использоваться для отображения ссылки. Например, <code>target="_blank"</code> отобразит ссылку на новой вкладке. Если вы хотите отобразить ссылку на текущей вкладке, просто опустите этот атрибут.</p>\n  </dd>\n</dl>\n<p>Измените строку текста ниже в поле <em>Ввод</em> так, чтобы она вела на ваш любимый веб-сайт. Сначала добавьте элемент <code>&lt;a&gt;</code> затем атрибут <code>href</code> и атрибут <code>title</code>. Наконец, укажите атрибут <code>target</code> чтобы открыть ссылку на новой вкладке. Вы можете наблюдать сделанные изменения в реальном времени в поле <em>Вывод</em>. Вы должны увидеть гиперссылку, при наведении курсора на которую появляется содержимое атрибута <code>title</code>, а при щелчке переходит по адресу в атрибуте <code>href</code>. Помните, что между именем элемента и каждым из атрибутов должен быть пробел.</p>\n<p>Если вы ошиблись, то всегда можете начать снова, воспользовавшись кнопкой <em>Сбросить</em>. Если упражнение вызывает у вас затруднения, то нажмите кнопку <em>Показать решение</em>, чтобы увидеть правильный ответ.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h2>Результат</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из области кода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 100px;width: 95%">  &lt;p&gt;Ссылка на мой любимый веб-сайт.&lt;/p&gt;\n</input>\n\n<div class="playable-buttons">\n  <input id="reset" type="button" value="Сбросить">\n  <input id="solution" type="button" value="Показать решение">\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">html {\n  font-family: sans-serif;\n}\n\nh2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n}\n</pre></div>\n<div class="code-example" id="sect11"><div class="example-header" id="sect12"></div></div></div></section><section aria-labelledby="булевые_атрибуты"><h3 id="булевые_атрибуты"><a>Булевые атрибуты</a></h3><div class="section-content"><p>Иногда вы будете видеть атрибуты, написанные без значения — это совершенно допустимо. Такие атрибуты называются булевые, и они могут иметь только одно значение, которое в основном совпадает с его именем. В качестве примера возьмём атрибут <a><code>disabled</code></a>, который можно назначить для формирования элементов ввода, если вы хотите, чтобы они были отключены (неактивны), так что пользователь не может вводить какие-либо данные в них.</p>\n<pre compile="false" disable="true" language="markup"><input type="text" disabled="disabled">\n</pre>\n<p>Для краткости совершенно допустимо записывать их следующим образом (мы также для справки разместили не деактивированный элемент input, чтобы дать вам большее понимание происходящего):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><input type="text" disabled="">\n\n<input type="text">\n</pre></div>\n<p>На выходе оба варианта будут выглядеть следующим образом:</p><div class="code-example" id="sect13"><div class="example-header" id="sect14"></div></div></div></section><section aria-labelledby="опускание_кавычек_вокруг_значений_атрибутов"><h3 id="опускание_кавычек_вокруг_значений_атрибутов"><a>Опускание кавычек вокруг значений атрибутов</a></h3><div class="section-content"><p>Осматриваясь во всемирной сети, вы будете встречать различные незнакомые способы написания разметки, включая написание значений атрибутов без кавычек. Это допустимо при определённых условиях, но разрушит вашу разметку при других. Например, возвращаясь к нашему упражнению с гиперссылкой, мы можем написать основной вариант только с атрибутом <code>href</code> так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><a href="https://www.mozilla.org/">любимый веб-сайт</a>\n</pre></div>\n<p>Однако, как только мы добавим атрибут <code>title</code> в таком же стиле, мы поступим неверно:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><a href="https://www.mozilla.org/" title="The" mozilla="" homepage="">favorite website</a>\n</pre></div>\n<p>В этом месте браузер неверно истолкует вашу разметку, думая, что атрибут <code>title</code> — это на самом деле три разных атрибута — атрибут title со значением "The" и два булевых атрибута: <code>Mozilla</code> и <code>homepage</code>. Это, очевидно, не то, что имелось в виду, и приведёт к ошибке или неожиданному поведению кода, как это показано в живом примере ниже. Попробуйте навести курсор на ссылку, чтобы увидеть, на что похож текст title!</p><div class="code-example" id="sect15"><div class="example-header" id="sect16"></div></div>\n<p>Наш совет: всегда используйте кавычки в атрибутах — это позволит избежать подобных проблем, и, следовательно, код будет более читабельным.</p></div></section><section aria-labelledby="одинарные_или_двойные_кавычки"><h3 id="одинарные_или_двойные_кавычки"><a>Одинарные или двойные кавычки?</a></h3><div class="section-content"><p>В этой статье вы заметите, что все атрибуты заключены в двойные кавычки. Однако, вы можете видеть одинарные кавычки в HTML документах других людей. Это исключительно дело вкуса, и вы можете свободно выбирать, какие из них предпочитаете. Обе следующие строки эквивалентны:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><a href="http://www.example.com">Ссылка к моему примеру.</a>\n\n<a href="http://www.example.com">Ссылка к моему примеру.</a>\n</pre></div>\n<p>Однако вы должны убедиться, что не смешиваете их вместе. Следующее будет неверным!</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"></pre></div>\n<p>Если вы используете один тип кавычек в своём HTML, то вы можете поместить внутрь их кавычки другого типа, не вызывая никаких проблем:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><a href="http://www.example.com" title="Isn\'t this fun?">A link to my example.</a>\n</pre></div>\n<p>Если вы хотите вставить кавычки того же типа, то вы должны использовать <a aria-current="page">объекты HTML</a>. Например, это работать не будет:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><a href="http://www.example.com" title="Isn" t="" this="" fun?\'="">A link to my example.</a>\n</pre></div>\n<p>Поэтому вам нужно сделать так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><a href="http://www.example.com" title="Isn\'t this fun?">A link to my example.</a>\n</pre></div></div></section><section aria-labelledby="структура_html_документа"><h2 id="структура_html_документа"><a>Структура HTML документа</a></h2><div class="section-content"><p>Ниже дан пример оборачивания основных, самостоятельных HTML-элементов, которые сами по себе не очень полезны. Давайте посмотрим, как самостоятельные элементы объединяются для формирования всей HTML страницы:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n\n  \n    <meta charset="utf-8">\n    <title>Тестовая страница</title>\n  \n  \n    <p>Это — моя страница</p>\n  \n\n</pre></div>\n<p>Вот что мы имеем:</p>\n<ol>\n  <li><code>&lt;!DOCTYPE html&gt;</code>: Объявление типа документа. Очень давно, ещё когда HTML был молод (1991/2), типы документов использовались в качестве ссылок на набор правил, которым HTML-страница должна была следовать, чтобы она считалась хорошей, что может означать автоматическую проверку ошибок и другие полезные вещи. Объявление типа документа выглядело примерно вот так:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n</pre></div>Однако в наши дни никто особо не думает о них, и типы документа стали историческим артефактом, которые должны быть включены везде, чтобы всё работало правильно. <code>&lt;!DOCTYPE html&gt;</code> — это самый короткий вид типа документа, который считается действующим. На самом деле это всё, что нужно вам знать о типах документов .\n  </li>\n  <li><code>&lt;html&gt;&lt;/html&gt;</code>: Элемент <a><code>&lt;html&gt;</code></a> содержит в себе всё содержимое на всей странице, и иногда его называют "корневой элемент".</li>\n  <li><code>&lt;head&gt;&lt;/head&gt;</code>: Элемент <a><code>&lt;head&gt;</code></a>. Данный элемент выступает в качестве контейнера для всего содержимого, которое вы хотите включить в HTML документ, но не хотите показывать посетителям вашей страницы. Он включает такие вещи, как ключевые слова и описание страницы, которые вы хотели бы показывать в поисковых запросах, CSS для стилизирования вашего контента, объявление поддерживаемого набора символов и многое другое. Вы узнаете больше об этом из следующей статьи данного руководства.</li>\n  <li><code>&lt;meta charset="utf-8"&gt;</code>: Этот элемент устанавливает в качестве символьной кодировки для вашего документа utf-8 , который включает большинство символов из всех известных человечеству языков. По существу, теперь страница сможет отобразить любой текстовый контент, который вы сможете в неё вложить. Нет причин не устанавливать эту кодировку, это также позволит избежать некоторых проблем позднее.</li>\n  <li><code>&lt;title&gt;&lt;/title&gt;</code>: Элемент <a><code>&lt;title&gt;</code></a>. Этот элемент устанавливает заголовок вашей страницы, который появляется во вкладке браузера, загружающей эту страницу, также это заглавие используется при описании страницы, когда вы сохраняете её в закладках или избранном.</li>\n  <li><code>&lt;body&gt;&lt;/body&gt;</code>: Элемент <a><code>&lt;body&gt;</code></a>. Он содержит <em>весь</em> контент, который вы хотите показывать посетителям вашей страницы, — текст, изображения, видео, игры, проигрываемые аудио дорожки или что-то ещё.</li>\n</ol></div></section><section aria-labelledby="активное_изучение_добавление_элементов_в_ваш_html-документ"><h3 id="активное_изучение_добавление_элементов_в_ваш_html-документ"><a>Активное изучение: Добавление элементов в ваш HTML-документ</a></h3><div class="section-content"><p>Если вы хотите поэкспериментировать с написанием HTML на своём компьютере, то можете:</p>\n<ol>\n  <li>Скопировать пример HTML-страницы, расположенный выше.</li>\n  <li>Создать новый файл в текстовом редакторе.</li>\n  <li>Вставить код в ваш новый текстовый файл.</li>\n  <li>Сохранить файл как <code>index.html</code>.</li>\n</ol>\n<div class="notecard note" id="sect17">\n  <p><strong>Примечание:</strong> вы также можете найти этот базовый пример HTML на <a class="external" target="_blank">MDN Learning Area Github repo</a>.</p>\n</div>\n<p>Теперь можете открыть браузер и посмотреть, во что отрисовался код, а потом изменить его, обновить страницу и посмотреть, что получилось. Сначала страница выглядит так:</p>\n<p>\n  \n  Для этого упражнения вы можете редактировать код локально на своём компьютере, как предлагается выше, а можете работать в редакторе, расположенном ниже. В редакторе показано только содержимое элемента <a><code>&lt;body&gt;</code></a>. Попробуйте сделать следующее:\n</p>\n<ul>\n  <li>Добавьте заголовок страницы сразу за открывающим тегом <a><code>&lt;body&gt;</code></a>. Текст должен находиться между открывающим тегом <code>&lt;h1&gt;</code> и закрывающим <code>&lt;/h1&gt;</code> .</li>\n  <li>Напишите в параграфе о чём-нибудь, что кажется вам интересным.</li>\n  <li>Выделите важные слова, обернув их в открывающий тег <code>&lt;strong&gt;</code> и закрывающий <code>&lt;/strong&gt;</code></li>\n  <li>Добавьте ссылку на свой абзац так, как <a aria-current="page">объяснено ранее в статье</a>.</li>\n  <li>Добавьте изображение в свой документ под абзацем, как <a aria-current="page">объяснено ранее в статье</a>. Если сможете использовать другую картинку (со своего компьютера или из интернета). Вы большой молодец!</li>\n</ul>\n<p>Если вы запутались, всегда можно запустить пример сначала кнопкой <em>Сбросить</em>. Сдаётесь — посмотрите ответ, нажав на <em>Показать решение</em>.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h2>Результат</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из области кода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 100px;width: 95%">  &lt;p&gt;Это — моя страница&lt;/p&gt;\n</input>\n\n<div class="playable-buttons">\n  <input id="reset" type="button" value="Сбросить">\n  <input id="solution" type="button" value="Показать решение">\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">html {\n  font-family: sans-serif;\n}\n\nh2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n\nimg {\n  max-width: 100%;\n}\n\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n}\n</pre></div>\n<div class="code-example" id="sect18"><div class="example-header" id="sect19"></div></div></div></section><section aria-labelledby="пробелы_в_html"><h3 id="пробелы_в_html"><a>Пробелы в HTML</a></h3><div class="section-content"><p>Вы могли заметить, что в примерах кода из этой статьи много пробелов. Это вовсе не обязательно — следующие два примера эквивалентны:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Собаки глупы.</p>\n\n<p>Собаки\n         глупы.</p>\n</pre></div>\n<p>Не важно, сколько пустого места вы используете в разметке (что может включать пробелы и сдвиги строк): браузер при анализе кода сократит всё пустое место до одного пробела. Зачем использовать много пробелов? Ответ: это доступность для понимания — гораздо легче разобраться, что происходит в вашем коде, если он удобно отформатирован, а не просто собран вместе в одном большом беспорядке. В нашем коде каждый вложенный элемент сдвинут на два пробела относительно элемента, в котором он находится. Вы можете использовать любое форматирование (в частности, количество пробелов для отступа), но лучше придерживаться одного стиля.</p></div></section><section aria-labelledby="ссылки_на_сущности_включение_специальных_символов_в_html"><h2 id="ссылки_на_сущности_включение_специальных_символов_в_html"><a>Ссылки на сущности: Включение специальных символов в HTML</a></h2><div class="section-content"><p>В HTML символы <code>&lt;</code>, <code>&gt;</code>, <code>"</code>, <code>\'</code> и <code>&amp;</code> являются специальными. Они являются частью самого синтаксиса HTML. Так как же включить в текст один из этих специальных символов? Например, если вы хотите использовать амперсанд или знак «меньше» и не интерпретировать его как код.</p>\n<p>Мы должны использовать ссылки-мнемоники — специальные коды, которые отображают спецсимволы, и могут быть использованы в необходимых позициях. Каждая ссылка-мнемоник начинается с амперсанда (&amp;) и завершается точкой с запятой (;).</p>\n\n<p>В следующем примере вы видите два абзаца, которые рассказывают о веб-технологиях:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>В HTML вы определяете параграф элементом </p><p>.</p>\n\n<p>В HTML вы определяете параграф элементом &lt;p&gt;.</p>\n</pre></div>\n<p>В живом выводе ниже вы можете заметить, что первый абзац выводится неправильно, так как браузер считает, что второй элемент <code>&lt;p&gt;</code> является началом нового абзаца! Второй абзац нашего кода выводится правильно, потому что мы заменили угловые скобки на ссылки-мнемоники.</p><div class="code-example" id="sect20"><div class="example-header" id="sect21"></div></div>\n<div class="notecard note" id="sect22">\n  <p><strong>Примечание:</strong> Таблица всех доступных в HTML символов-мнемоников — в Википедии: <a class="external" target="_blank">List of XML and HTML character entity references</a>.</p>\n</div></div></section><section aria-labelledby="html_комментарии"><h2 id="html_комментарии"><a>HTML комментарии</a></h2><div class="section-content"><p>В HTML, как и в большинстве языков программирования, есть возможность писать комментарии в коде. Комментарии игнорируются обозревателем и не видны пользователю, их добавляют для того, чтобы пояснить, как работает написанный код, что делают отдельные его части и т. д. Такая практика полезна, если вы возвращаетесь к коду, который давно не видели или когда хотите передать его кому-то другому.</p>\n<p>Чтобы превратить часть содержимого HTML-файла в комментарий, нужно поместить её в специальные маркеры <code>&lt;!--</code> и <code>--&gt;</code>, например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Меня нет в комментариях(</p>\n\n<!-- <p>А теперь есть!</p> -->\n</pre></div>\n<p>Как вы увидите ниже, первый параграф будет отображён на экране, а второй нет.</p><div class="code-example" id="sect23"><div class="example-header" id="sect24"></div></div></div></section><section aria-labelledby="подведение_итогов"><h2 id="подведение_итогов"><a>Подведение итогов</a></h2><div class="section-content"><p>Вы дошли до конца статьи — надеемся, вам понравилось путешествие по основам HTML. На этом этапе вы уже должны немного разобраться, как выглядит язык, как он работает на базовом уровне и уметь описать несколько элементов и атрибутов. Сейчас идеальное время и место, чтобы продолжить изучать HTML. В последующих статьях мы рассмотрим некоторые из вещей, которые вы уже рассмотрели, но намного подробнее, а также представим некоторые новые функции языка. Оставайтесь с нами!</p>\n<div class="notecard note" id="sect25">\n  <p><strong>Примечание:</strong> Сейчас, когда вы начинаете больше узнавать о HTML, вы также можете начать изучать основы каскадных таблиц стилей Cascading Style Sheets, или <a>CSS</a>. CSS — это язык, который используется для стилизации веб-страниц (например, изменение шрифта или цветов или изменение макета страницы). Как вы скоро поймёте, HTML и CSS созданы друг для друга.</p>\n</div></div></section>',
					works: [],
				},
				{
					title: 'Что внутри "head"? Метаданные в HTML',
					chapter: 1.5,
					content:
						'<header><h1>Что внутри "head"? Метаданные в HTML</h1></header><div class="section-content">\n<p>Элемент <a>head</a> HTML-документа не отображается на странице в веб-браузере. Он содержит такую информацию, как:</p>\n<ul>\n  <li><a>заголовок (title)</a> страницы</li>\n  <li>ссылки на файлы <a>CSS</a> (если вы хотите применить к вашему HTML стили CSS)</li>\n  <li>ссылки на иконки</li>\n  <li>другие метаданные (данные о HTML: автор и важные ключевые слова, описывающие документ.)</li>\n</ul>\n<p>В этой статье мы рассмотрим всё вышеперечисленное и многое другое, чтобы дать вам хорошую основу для работы с разметкой.</p>\n</div><section aria-labelledby="что_такое_head"><h2 id="что_такое_head"><a>Что такое &lt;head&gt;?</a></h2><div class="section-content"><p>Давайте снова посмотрим на <a>HTML-документ из прошлой статьи</a>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n\n  \n    <meta charset="utf-8">\n    <title>Моя тестовая страница</title>\n  \n  \n    <p>Это — моя страница</p>\n  \n\n</pre></div>\n<p>Содержимое <a><code>&lt;head&gt;</code></a>, в отличие от содержимого элемента <a><code>&lt;body&gt;</code></a>, не отображается на странице. Задача &lt;head&gt; — хранить <a>метаданные</a> документа. В приведённом выше примере &lt;head&gt; совсем небольшой:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n  <meta charset="utf-8">\n  <title>Моя тестовая страница</title>\n\n</pre></div>\n<p>Однако на больших страницах блок &lt;head&gt; может быть довольно объёмным. Попробуйте зайти на какие-нибудь из ваших любимых сайтов и посмотреть содержимое &lt;head&gt; с помощью <a>инструментов разработчика</a>. Наша цель сейчас — не в том, чтобы показать вам, как использовать всё, что только можно добавить в head, а дать представление и научить вас, как использовать основные элементы. Давайте начнём.</p></div></section><section aria-labelledby="название_страницы_title"><h2 id="название_страницы_title"><a>Название страницы (title)</a></h2><div class="section-content"><p>Мы уже видели, как работает элемент <a><code>&lt;title&gt;</code></a>: его используют для добавления заголовка (названия страницы) в документ. Элемент <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a> тоже иногда называют заголовком страницы. Но это разные вещи!</p>\n<ul>\n  <li>Элемент <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a> виден на странице, открытой в браузере, — его используют <strong>один раз на странице</strong>, чтобы выделить название содержимого. Это может быть название истории, заголовок новости или что-то в этом роде.</li>\n  <li>Элемент <a><code>&lt;title&gt;</code></a> — метаданные, название всего HTML-документа, а не заголовок внутри его содержимого.</li>\n</ul></div></section><section aria-labelledby="активное_изучение_разбор_простого_примера"><h3 id="активное_изучение_разбор_простого_примера"><a>Активное изучение: разбор простого примера</a></h3><div class="section-content"><ol>\n  <li>Чтобы приступить к активному изучению, скачайте страницу <a class="external" target="_blank">title-example.html</a> из нашего GitHub-репозитория. Это можно сделать двумя способами:\n    <ol>\n      <li>Скопируйте и вставьте код страницы в новый текстовый файл в своём редакторе кода, затем сохраните его в любом удобном месте.</li>\n      <li>Нажмите на странице кнопку "Raw", нажмите <em>Файл &gt; Сохранить Как...</em> в меню браузера и выберите папку для сохранения.</li>\n    </ol>\n  </li>\n  <li>\n    Откройте файл в браузере. Вы увидите что-то вроде этого:\n    \n    Теперь должно стать совершенно ясно, в чём разница между <code>&lt;h1&gt;</code> и <code>&lt;title&gt;</code>!\n  </li>\n  <li>Откройте код страницы в редакторе, измените содержимое элементов и обновите страницу в браузере. Развлекайтесь!</li>\n</ol>\n<p>Содержимое элемента <code>&lt;title&gt;</code> используется и в других местах. Например, при добавлении страницы в избранное (<em>Bookmarks &gt; Bookmark This Page</em> в Firefox), текст из <code>&lt;title&gt;</code> предлагается в качестве названия закладки.</p>\n<p>\n  \n</p>\n<p>Текст из <code>&lt;title&gt;</code> также появляется в результатах поиска, как мы скоро увидим.</p></div></section><section aria-labelledby="метаданные_элемент_meta"><h2 id="метаданные_элемент_meta"><a>Метаданные: Элемент &lt;meta&gt;</a></h2><div class="section-content"><p>Метаданные — данные, которые описывают данные. У HTML есть «официальное» место для метаданных документа — элемент <a><code>&lt;meta&gt;</code></a>. Конечно, другие вещи, о которых мы говорим в этой статье, тоже можно назвать метаданными. Существует множество разновидностей <code>&lt;meta&gt;</code>. Не станем пытаться охватить их все сразу — так недолго и запутаться, а рассмотрим несколько самых популярных, чтобы разобраться, что к чему.</p></div></section><section aria-labelledby="указываем_кодировку_текста_документа"><h3 id="указываем_кодировку_текста_документа"><a>Указываем кодировку текста документа</a></h3><div class="section-content"><p>В заголовке примера выше есть следующая строка:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><meta charset="utf-8">\n</pre></div>\n<p>В этом элементе указана кодировка документа — набор символов, которые в нём можно использовать . <code>utf-8</code> — универсальный набор символов, который включает почти все символы со всех языков человечества. Такая веб-страница сможет работать с любым языком. Установить эту кодировку на всех веб-страницах, которые вы создаёте — отличная идея! Страница в такой кодировке прекрасно отображает как английские, так и японские символы:</p>\n<p>\n  Если использовать, скажем, кодировку <code>ISO-8859-1</code> (набор символов для латиницы), текст страницы испортится:\n</p>\n<p>\n  \n</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Некоторые браузеры (например, Chrome) автоматически исправляют неправильную кодировку, поэтому, в зависимости от используемого вами браузера, вы можете не увидеть эту проблему. Несмотря на это вам всё равно необходимо указывать кодировку UTF-8 для вашей страницы, чтобы избежать возможных проблем в других браузерах.</p>\n</div></div></section><section aria-labelledby="активное_изучение_экспериментируем_с_символьными_кодировками"><h3 id="активное_изучение_экспериментируем_с_символьными_кодировками"><a>Активное изучение: экспериментируем с символьными кодировками</a></h3><div class="section-content"><p>Чтобы проверить это, вернитесь к HTML из примера <code>&lt;title&gt;</code> (странице <a class="external" target="_blank">title-example.html</a>), поменяйте meta charset на <code>ISO-8859-1</code> и попробуйте написать что-нибудь на японском или русском. Вот текст из нашего примера (кстати, там написано <em>«рис горячий»</em>):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Пример на японском: ご飯が熱い。</p>\n</pre></div></div></section><section aria-labelledby="указываем_автора_и_описание"><h3 id="указываем_автора_и_описание"><a>Указываем автора и описание</a></h3><div class="section-content"><p>У элементов <code>&lt;meta&gt;</code> часто есть атрибуты <code>name</code> и <code>content</code>:</p>\n<ul>\n  <li><code>name</code> — тип элемента, то есть какие именно метаданные он содержит.</li>\n  <li><code>content</code> — сами метаданные.</li>\n</ul>\n<p>Два полезных элемента метаданных — указание автора страницы и краткое описание её содержимого. Рассмотрим эти элементы на примере:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><meta name="author" content="Крис Миллс">\n<meta name="description" content="Задача MDN — в том, чтобы обучить\nновичков всему тому, что нужно им для разработки веб-сайтов и приложений.">\n</pre></div>\n<p>По указанному имени автора (author) можно найти человека, который написал страницу, и связаться с ним. Некоторые системы управления содержимым (CMS) автоматически обрабатывают эту информацию и делают её доступной для таких целей.</p>\n<p>Краткое описание (description) содержимого страницы учитывается поисковыми системами при совпадении ключевых слов. Такое называют <a>поисковой оптимизацией</a>, или <a>SEO</a>.</p></div></section><section aria-labelledby="активное_изучение_как_поисковые_системы_используют_описание"><h3 id="активное_изучение_как_поисковые_системы_используют_описание"><a>Активное изучение: как поисковые системы используют описание</a></h3><div class="section-content"><p>Описание из <code>&lt;meta name="description"&gt;</code> используется на страницах поисковой выдачи. Проведём небольшое исследование такого сценария.</p>\n<ol>\n  <li>Перейдите на <a>главную страницу Mozilla Developer Network</a>.</li>\n  <li>Откройте исходный код страницы (кликните правой кнопкой мыши и выберите <em>Просмотреть код</em> в контекстном меню.)</li>\n  <li>Найдите тег meta с описанием. Он выглядит так:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><meta name="description" content="Веб-документация на MDN\nпредоставляет собой информацию об открытых веб-технологиях,\nвключая HTML, CSS и различные API для веб-сайтов и\nпрогрессивных веб-приложений. Также на сайте содержатся материалы\nдля разработчиков о таких продуктах Mozilla, как Инструменты разработчика Firefox.">\n</pre></div>\n  </li>\n  <li>Теперь найдите "Mozilla Developer Network" в своём поисковике (мы использовали Google). Обратите внимание, что описание и название из <code>&lt;meta&gt;</code> и <code>&lt;title&gt;</code> используется в результатах поиска, — мы не зря указали их!</li>\n</ol>\n<p>\n  \n</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Google также показывает важные страницы MDN под ссылкой на главную страницу. Такие ссылки называются sitelinks, и их можно настроить через <a class="external" target="_blank">Google Search Console</a>, чтобы пользователи могли сразу перейти к ним со страницы поиска.</p>\n</div>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Многие типы <code>&lt;meta&gt;</code> больше не используются. Так, поисковые системы больше не используют данные из элемента <code>&lt;meta type="keywords" content="ваши, ключевые, слова, введите, здесь"&gt;</code>, в котором указывали ключевые слова, по которым можно найти страницу: спамеры засовывали туда все слова, какие могли придумать, чтобы их сайты почаще появлялись в поиске.</p>\n</div></div></section><section aria-labelledby="другие_виды_метаданных"><h3 id="другие_виды_метаданных"><a>Другие виды метаданных</a></h3><div class="section-content"><p>В сети вы найдёте также другие типы метаданных. Многие из них — это собственные форматы, созданные для предоставления определённым сайтам (например, социальных сетей) специальной информации, которую они могут использовать.</p>\n<p>Например, <a class="external" target="_blank">Протокол Open Graph</a> создан Facebook чтобы предоставить сайтам дополнительные возможности использования метаданных. В исходном коде MDN Web Docs вы можете найти строки:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><meta property="og:image" content="https://developer.mozilla.org/mdn-social-share.png">\n<meta property="og:description" content="Веб-документация на MDN предоставляет\nсобой информацию об открытых веб-технологиях, включая HTML, CSS и различные API для веб-сайтов\nи прогрессивных веб-приложений. Также на сайте содержатся материалы для разработчиков о таких\nпродуктах Mozilla, как Инструменты разработчика Firefox.">\n<meta property="og:title" content="MDN Web Docs">\n</pre></div>\n<p>Один из результатов добавления этих метаданных в том, что когда вы добавите ссылку MDN Web Docs на facebook, она отобразится с изображением и описанием, улучшая опыт взаимодействия _<a class="external" target="_blank">(User eXperience, UX</a>)_.</p>\n<p>\n  У Twitter также есть собственный формат метаданных, с помощью которого создаётся аналогичный эффект, при отображении URL сайта на twitter.com:\n</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><meta name="twitter:title" content="MDN Web Docs">\n</pre></div></div></section><section aria-labelledby="добавление_иконок"><h2 id="добавление_иконок"><a>Добавление иконок</a></h2><div class="section-content"><p>Чтобы добавить своему сайту узнаваемости, можно указать в метаданных разные иконки.</p>\n<p><a class="external" target="_blank">Favicon</a>, один из старожилов интернета, стал первой из таких иконок. Браузеры показывают её в заголовке вкладки и в списке избранных страниц.\n  \n</p>\n<p>Чтобы добавить на страницу favicon:</p>\n<ol>\n  <li>Сохраните изображение в формате <code>.ico</code> (многие браузеры поддерживают и в более привычных форматах, таких как <code>.gif</code> или <code>.png</code>) в папку со своим документом. Старые браузеры, например, Internet Explorer 6, поддерживают только формат <code>.ico</code></li>\n  <li>Добавьте ссылку на иконку в <code>&lt;head&gt;</code> документа:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><link rel="shortcut icon" href="favicon.ico" type="image/x-icon">\n</pre></div>\n  </li>\n</ol>\n<p>Для разных устройств можно указывать разные иконки. Например, на главной странице MDN:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><!-- Для iPad 3 с Retina-экраном высокого разрешения: -->\n<link rel="apple-touch-icon-precomposed" sizes="144x144" href="https://developer.mozilla.org/static/img/favicon144.png">\n<!-- Для iPhone с Retina-экраном высокого разрешения: -->\n<link rel="apple-touch-icon-precomposed" sizes="114x114" href="https://developer.mozilla.org/static/img/favicon114.png">\n<!-- Для iPad первого и второго поколения: -->\n<link rel="apple-touch-icon-precomposed" sizes="72x72" href="https://developer.mozilla.org/static/img/favicon72.png">\n<!-- Для iPhone, iPod Touch без Retina и устройств с Android 2.1+: -->\n<link rel="apple-touch-icon-precomposed" href="https://developer.mozilla.org/static/img/favicon57.png">\n<!-- Для других случаев - обычный favicon -->\n<link rel="shortcut icon" href="https://developer.mozilla.org/static/img/favicon32.png">\n</pre></div>\n<p>В комментариях указано, для чего используется каждая иконка — например, при добавлении страницы на домашний экран iPad будет использована иконка в высоком разрешении.</p>\n<p>Не беспокойтесь о реализации всех этих типов значков — это довольно продвинутая функция, и мы не станем возвращаться к ней в курсе. Основная цель — показать вам, что это такое, если вы столкнётесь с ними при просмотре исходного кода других веб-сайтов.</p></div></section><section aria-labelledby="подключение_css_и_javascript"><h2 id="подключение_css_и_javascript"><a>Подключение CSS и JavaScript</a></h2><div class="section-content"><p>Современные сайты используют <a>CSS</a>, чтобы выглядеть привлекательнее, и добавляют интерактивные функции через <a>JavaScript</a>: видеоплееры, карты, игры. Обычно связанные стили добавляют на страницу через элемент <a><code>&lt;link&gt;</code></a>, а скрипты — через элемент <a><code>&lt;script&gt;</code></a> .</p>\n<ul>\n  <li>Элемент <a><code>&lt;link&gt;</code></a> помещают в заголовок документа. У него есть два атрибута: <code>rel="stylesheet"</code> показывает, что мы указываем <em>стиль</em> документа, а в <code>href</code> указан путь к файлу:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><link rel="stylesheet" href="my-css-file.css">\n</pre></div>\n  </li>\n  <li>Элемент <a><code>&lt;script&gt;</code></a> не обязательно находится в заголовке — на самом деле лучше поместить его в самом конце страницы, прямо перед закрывающем тегом <code>&lt;/body&gt;</code>. Так браузер сначала отобразит саму страницу, а уже затем загрузит и запустит скрипт — иначе скрипт может обратиться к ещё не созданному элементу страницы и сломаться.\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><script src="my-js-file.js"></script>\n</pre></div><strong>Примечание</strong>: Элемент <code>&lt;script&gt;</code> кажется пустым, но это не всегда так, и указывать закрывающий тег обязательно. Вместо того чтобы ссылаться на внешний скрипт, код можно писать прямо внутри этого элемента — так можно не тратить время на загрузку отдельного скрипта, но зато не выйдет сослаться на один js-файл с нескольких страниц.\n  </li>\n</ul></div></section><section aria-labelledby="активное_изучение_добавляем_на_страницу_css_и_javascript"><h3 id="активное_изучение_добавляем_на_страницу_css_и_javascript"><a>Активное изучение: добавляем на страницу CSS и JavaScript</a></h3><div class="section-content"><ol>\n  <li>Для этого упражнения скачайте файлы <a class="external" target="_blank">meta-example.html</a>, <a class="external" target="_blank">script.js</a> и <a class="external" target="_blank">style.css</a> и положите их в одну папку на своём компьютере. Проверьте, что они сохранились с правильными именами и расширениями.</li>\n  <li>Откройте HTML в браузере и текстовом редакторе.</li>\n  <li>Следуя изученному материалу, добавьте на страницу скрипт и стиль с помощью элементов <a><code>&lt;link&gt;</code></a> и <a><code>&lt;script&gt;</code></a>.</li>\n</ol>\n<p>Если всё получилось, когда вы сохраните HTML и обновите страницу в браузере, вы увидите кое-что новенькое:</p>\n<p>\n  \n</p>\n<ul>\n  <li>JavaScript добавил на страницу пустой список. При нажатии на красную область появляется окно, в которое можно ввести текст нового пункта списка. При нажатии на кнопку OK пункт добавляется на страницу. Текст существующих пунктов списка можно редактировать, нажимая на них.</li>\n  <li>CSS покрасил фон зелёным и увеличил размер шрифта, а также стилизовал элементы, добавленные JavaScript. Красный прямоугольник и рамка вокруг списка — тоже его рук дело.</li>\n</ul>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> Если вам никак не удаётся подключить CSS или JS, посмотрите на наш готовый пример — страницу <a class="external" target="_blank">css-and-js.html</a>.</p>\n</div></div></section><section aria-labelledby="основной_язык_html_страницы"><h2 id="основной_язык_html_страницы"><a>Основной язык HTML страницы</a></h2><div class="section-content"><p>Наконец, стоит отметить, что вы можете (и действительно должны) установить язык для своей страницы. Это можно сделать, добавив <a>атрибут lang</a> в открывающий HTML-тег (как в примере <a class="external" target="_blank">meta-example.html</a>: и как показано ниже):</p>\n<pre compile="false" disable="true" language="markup">\n</pre>\n<pre compile="false" disable="true" language="markup">\n</pre>\n<p>Это полезно во многих случаях. Ваш HTML-документ будет более эффективно индексироваться поисковыми системами, если его язык установлен (что позволяет ему правильно отображаться в языковых результатах), и он полезен людям с нарушением зрения, которые используют программы, читающие страницы вслух (например, слово "шесть" пишется одинаково как на французском, так и на английском языках, но произносится по-разному.).</p>\n<p>Можно также указать язык для части документа. Например, мы могли бы установить язык для части страницы на японском:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Пример на японском: <span lang="ja">ご飯が熱い。</span>.</p>\n</pre></div>\n<p>Коды языков определены в стандарте <a class="external" target="_blank">ISO 639-1</a>. Подробнее о работе с языками можно узнать в <a class="external" target="_blank">Языковые тэги в HTML и XML</a>.</p></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>На этом заканчивается наш беглый обзор по HTML-блоку head — с его помощью вы можете делать гораздо больше, но исчерпывающий обзор будет скучным и запутанным на этом этапе, мы же сейчас хотели дать вам представление о самых распространённых вещах, которые вы можете там найти! В следующей статье мы рассмотрим основы разметки текста в HTML.</p></div></section>',
					works: [],
				},
				{
					title: 'Основы редактирования текста в HTML',
					chapter: 1.6,
					content:
						'<header><h1>Основы редактирования текста в HTML</h1></header><div class="section-content">\n<p>Одна из основных задач HTML — придавать тексту структуру и смысл, <a class="page-not-created" title="Документация об этом ещё не написана. Пожалуйста, поспособствуйте её написанию!">семантику</a>, так, чтобы браузер смог отобразить текст корректно. Эта статья покажет, как можно использовать <a>HTML</a>, чтобы упорядочить текст на странице путём добавления заголовков и абзацев, выделения слов, создания списков и многое другое.</p>\n</div><section aria-labelledby="основы_заголовки_и_абзацы_параграфы"><h2 id="основы_заголовки_и_абзацы_параграфы"><a>Основы: Заголовки и абзацы / параграфы</a></h2><div class="section-content"><p>Большинство структурированных текстов состоят из параграфов и заголовков, независимо от того, читаете ли вы рассказ, или газету, или учебник, журнал и т.д.</p>\n<p>\n  \n</p>\n<p>Упорядоченный контент делает чтение более лёгким и приятным.</p>\n<p>В HTML каждый абзац заключён в элемент <a><code>&lt;p&gt;</code></a>, подобно:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Я параграф, да, это я.</p>\n</pre></div>\n<p>Каждый заголовок заключён в элемент заголовка <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><h1>Я заголовок истории.</h1>\n</pre></div>\n<p>Имеется шесть элементов заголовка: <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h2&gt;</code> <small>(en-US)</small></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h3&gt;</code> <small>(en-US)</small></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h4&gt;</code> <small>(en-US)</small></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h5&gt;</code> <small>(en-US)</small></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h6&gt;</code> <small>(en-US)</small></a>. Каждый элемент представляет разный уровень контента в документе; <code>&lt;h1&gt;</code> представляет главный заголовок, <code>&lt;h2&gt;</code> представляет подзаголовки, <code>&lt;h3&gt;</code> представляет под-подзаголовки и так далее.</p></div></section><section aria-labelledby="создание_иерархической_структуры"><h3 id="создание_иерархической_структуры"><a>Создание иерархической структуры</a></h3><div class="section-content"><p>Например, в рассказе <code>&lt;h1&gt;</code> будет представлять заглавие рассказа, <code>&lt;h2&gt;</code> обозначит название каждой главы, <code>&lt;h3&gt;</code> будет обозначать подзаголовки в каждой главе и так далее.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><h1>Сокрушительная скука</h1>\n\n<p>Крис Миллс</p>\n\n<h2>Глава 1: Тёмная ночь</h2>\n\n<p>Это была тёмная ночь. Где-то кричала сова. Дождь обрушился на ...</p>\n\n<h2>Глава 2: Вечное молчание</h2>\n\n<p>Наш главный герой ничего не мог, когда шёпот из тёмной фигуры ...</p>\n\n<h3>Призрак говорит</h3>\n\n<p>\n  Прошло ещё несколько часов, когда внезапно призрак выпрямился и воскликнул:\n  «Пожалуйста, помилуй мою душу!»\n</p>\n</pre></div>\n<p>Всё это действительно зависит от вас — что именно будут представлять собой элементы, пока существует иерархия. Вам просто нужно иметь в виду несколько хороших правил при создании таких структур.</p>\n<ul>\n  <li>Предпочтительнее использовать <code>&lt;h1&gt;</code> только один раз на странице — это заголовок самого верхнего уровня, и все остальные заголовки располагаются ниже его в иерархии.</li>\n  <li>Убедитесь, что вы используете заголовки в правильном порядке в иерархии. Не используйте <code>&lt;h3&gt;</code> для создания подзаголовков при одновременном использовании <code>&lt;h2&gt;</code> для представления под-подзаголовков — это не имеет смысла и приведёт к странным результатам.</li>\n  <li>Из шести доступных уровней заголовка вы должны стремиться использовать не более трёх на странице, если только вы не чувствуете, что это необходимо. Документы с большим количеством уровней (то есть с глубокой иерархией) становятся громоздкими и трудными для навигации. В таких случаях рекомендуется распределять контент по нескольким страницам, если это возможно.</li>\n</ul></div></section><section aria-labelledby="зачем_нам_необходима_структура"><h3 id="зачем_нам_необходима_структура"><a>Зачем нам необходима структура?</a></h3><div class="section-content"><p>Чтобы ответить на этот вопрос, давайте посмотрим на <a class="external" target="_blank">text-start.html</a> — отправную точку нашего примера для этой статьи (хороший рецепт хумуса). Вы должны сохранить копию этого файла на своём локальном компьютере, так как вам понадобится это для упражнений позже. Сейчас тело этого документа содержит несколько фрагментов контента — они не отмечены каким-либо образом, но они разделены разрывами строк (был нажат Enter / Return для перехода на следующую строку).</p>\n<p>Однако, когда вы откроете документ в своём браузере, вы увидите, что текст выглядит как один большой кусок!</p>\n<p>\n  \n</p>\n<p>Это связано с тем, что нет элементов для создания структуры контента, поэтому браузер не знает, где здесь заголовок и где абзац. Более того:</p>\n<ul>\n  <li>Пользователи, просматривающие веб-страницу, быстро сканируют её в поиске подходящего контента, часто просто просматривая только заголовки (мы обычно <a class="external" target="_blank">тратим очень мало времени на веб-странице</a>). Если они не смогут увидеть ничего полезного в течение нескольких секунд, они, скорее всего, расстроятся и отправятся куда-нибудь ещё.</li>\n  <li>Поисковые системы, индексирующие вашу страницу, считают содержание заголовков важными ключевыми словами для влияния на ранжирование поиска страницы. Без заголовков ваша страница будет плохо работать с точки зрения <a>SEO</a> (Search Engine Optimization — поисковая оптимизация).</li>\n  <li>Сильно слабовидящие люди часто не читают веб-страницы — они слушают их вместо этого. Это делается с помощью программного обеспечения, называемого <a class="external" target="_blank">программой чтения с экрана</a>. Это программное обеспечение предоставляет способы быстрого доступа к данному текстовому контенту. Среди различных используемых методов они предоставляют схему документа, считывая заголовки, позволяя своим пользователям быстро находить нужную им информацию. Если заголовки недоступны, они будут вынуждены слушать весь документ вслух.</li>\n  <li>Чтобы стилизовать контент с помощью <a>CSS</a> или сделать его интересным с помощью <a>JavaScript</a>, вам нужно, чтобы элементы обёртывали соответствующий контент, чтобы CSS и JavaScript смогли эффективно работать.</li>\n</ul>\n<p>Поэтому нужно дать структурную разметку нашему контенту.</p></div></section><section aria-labelledby="активное_изучение_создание_структуры_для_нашего_контента"><h3 id="активное_изучение_создание_структуры_для_нашего_контента"><a>Активное изучение: создание структуры для нашего контента</a></h3><div class="section-content"><p>Давайте рассмотрим это на живом примере. В приведённом ниже примере добавьте элементы в исходный текст в поле «Редактируемый код», чтобы он отображался как заголовок и два абзаца в поле «Результат».</p>\n<p>Если вы допустили ошибку, вы всегда можете сбросить её с помощью кнопки <em>Сбросить</em>. Если вы застряли, нажмите кнопку <em>Показать решение</em>, чтобы увидеть ответ.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h2>Результат</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из поля ввода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 100px; width: 95%">Моя мини-история\nЯ полицейский, и моё имя Триш.\nМои ноги сделаны из картона, и мой муж — рыба.</input>\n\n<div class="playable-buttons">\n  <input id="reset" type="button" value="Сбросить">\n  <input id="solution" type="button" value="Показать решение">\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">html {\n  font-family: "Open Sans Light", Helvetica, Arial, sans-serif;\n}\n\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n}\n\n.input,\n.output {\n  width: 90%;\n  height: 6em;\n  padding: 10px;\n  border: 1px solid #0095dd;\n  overflow: auto;\n}\n\nbutton {\n  padding: 10px 10px 10px 0;\n}\n\nh2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">var textarea = document.getElementById("code");\nvar reset = document.getElementById("reset");\nvar solution = document.getElementById("solution");\nvar output = document.querySelector(".output");\nvar code = textarea.value;\nvar userEntry = textarea.value;\n\nfunction updateCode() {\n  output.innerHTML = textarea.value;\n}\n\nreset.addEventListener("click", function () {\n  textarea.value = code;\n  userEntry = textarea.value;\n  solutionEntry = htmlSolution;\n  solution.value = "Показать решение";\n  updateCode();\n});\n\nsolution.addEventListener("click", function () {\n  if (solution.value === "Показать решение") {\n    textarea.value = solutionEntry;\n    solution.value = "Спрятать решение";\n  } else {\n    textarea.value = userEntry;\n    solution.value = "Показать решение";\n  }\n  updateCode();\n});\n\nvar htmlSolution =\n  "<h1>Моя мини-история</h1>\n<p>Я полицейский, и моё имя Триш.</p>\n<p>Мои ноги сделаны из картона, и мой муж — рыба.</p>";\nvar solutionEntry = htmlSolution;\n\ntextarea.addEventListener("input", updateCode);\nwindow.addEventListener("load", updateCode);\n\ntextarea.onkeydown = function (e) {\n  if (e.keyCode === 9) {\n    e.preventDefault();\n    insertAtCaret("\t");\n  }\n\n  if (e.keyCode === 27) {\n    textarea.blur();\n  }\n};\n\nfunction insertAtCaret(text) {\n  var scrollPos = textarea.scrollTop;\n  var caretPos = textarea.selectionStart;\n\n  var front = textarea.value.substring(0, caretPos);\n  var back = textarea.value.substring(\n    textarea.selectionEnd,\n    textarea.value.length,\n  );\n  textarea.value = front + text + back;\n  caretPos = caretPos + text.length;\n  textarea.selectionStart = caretPos;\n  textarea.selectionEnd = caretPos;\n  textarea.focus();\n  textarea.scrollTop = scrollPos;\n}\n\ntextarea.onkeyup = function () {\n  if (solution.value === "Показать решение") {\n    userEntry = textarea.value;\n  } else {\n    solutionEntry = textarea.value;\n  }\n\n  updateCode();\n};\n</pre></div><div class="code-example" id="sect1"><div class="example-header" id="sect2"></div></div></div></section><section aria-labelledby="почему_мы_нуждаемся_в_семантике"><h3 id="почему_мы_нуждаемся_в_семантике"><a>Почему мы нуждаемся в семантике?</a></h3><div class="section-content"><p>Семантика проявляется всюду вокруг нас — мы полагаемся на опыт, который рассказывает нам, какова функция бытовых предметов; когда мы что-то видим, мы знаем, какова его функция. Так, например, мы ожидаем, что красный свет на светофоре означает «стоп», а зелёный свет означает «идти». Жизнь станет очень сложной, если применяется неправильная семантика (какие-либо страны используют красный цвет для обозначения «идти»? Надеюсь, что нет.)</p>\n<p>В подобном ключе нам нужно убедиться, что мы используем правильные элементы, придавая нашему контенту правильное значение, функцию или внешний вид. В этом контексте элемент <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a> также является семантическим элементом, который даёт тексту, который он обёртывает, роль (или значение) «заголовка верхнего уровня на вашей странице».</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><h1>Это заголовок верхнего уровня</h1>\n</pre></div>\n<p>По умолчанию браузер придаст ему большой размер шрифта, чтобы он выглядел как заголовок (хотя вы можете стилизовать его как угодно, используя CSS). Что ещё более важно, его семантическое значение будет использоваться несколькими способами, например, поисковыми системами и программами чтения с экрана (как упоминалось выше).</p>\n<p>С другой стороны, вы можете сделать любой элемент похожим на заголовок верхнего уровня. Рассмотрим следующее:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><span style="font-size: 32px; margin: 21px 0;">Это заголовок верхнего уровня?</span>\n</pre></div>\n<p>Это элемент <a><code>&lt;span&gt;</code></a>. У него нет семантики. Вы используете его, когда хотите применить к контенту CSS (или сделать что-то с ним с помощью JavaScript), не придавая ему никакого дополнительного значения (об этом вы узнаете позже). Мы применили CSS, чтобы он выглядел как заголовок верхнего уровня, но поскольку он не имеет семантического значения, он не получит никаких дополнительных преимуществ, описанных выше. Рекомендуется использовать соответствующий элемент HTML на практике.</p></div></section><section aria-labelledby="списки"><h2 id="списки"><a>Списки</a></h2><div class="section-content"><p>Теперь обратим наше внимание на списки. Списки есть везде вокруг нас — от вашего списка покупок до списка направлений, которым вы подсознательно следуете, чтобы каждый день добраться домой, и списка инструкций, которые вы выполняете в этом руководстве! Списки используются всюду в Интернете, и мы рассмотрим три разных типа списков.</p></div></section><section aria-labelledby="неупорядоченные"><h3 id="неупорядоченные"><a>Неупорядоченные</a></h3><div class="section-content"><p>Неупорядоченные списки используются для элементов, для которых порядок не имеет значения, — возьмём, к примеру, список покупок:</p>\n<pre compile="false" disable="true" language="markup">молоко\nяйца\nхлеб\nхумус\n</pre>\n<p>Каждый неупорядоченный список начинается с элемента <a><code>&lt;ul&gt;</code></a> (<em>unordered list</em>) — он обёртывает все элементы списка: молоко, яйца, хлеб, хумус.</p>\n<p>Последний шаг состоит в том, чтобы обернуть каждый элемент списка в элемент <a><code>&lt;li&gt;</code></a> (элемент списка):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><ul>\n  <li>молоко</li>\n  <li>яйца</li>\n  <li>хлеб</li>\n  <li>хумус</li>\n</ul>\n</pre></div></div></section><section aria-labelledby="активное_изучение_разметка_неупорядоченного_списка"><h3 id="активное_изучение_разметка_неупорядоченного_списка"><a>Активное изучение: разметка неупорядоченного списка</a></h3><div class="section-content"><p>Попробуйте отредактировать образец ниже, чтобы создать свой собственный неупорядоченный список HTML.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h2>Результат</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из поля ввода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 100px; width: 95%">молоко\nяйца\nхлеб\nхумус</input>\n\n<div class="playable-buttons">\n  <input id="reset" type="button" value="Сбросить">\n  <input id="solution" type="button" value="Показать решение">\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">html {\n  font-family: "Open Sans Light", Helvetica, Arial, sans-serif;\n}\n\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n}\n\n.input,\n.output {\n  width: 90%;\n  height: 6em;\n  padding: 10px;\n  border: 1px solid #0095dd;\n  overflow: auto;\n}\n\nbutton {\n  padding: 10px 10px 10px 0;\n}\n\nh2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">var textarea = document.getElementById("code");\nvar reset = document.getElementById("reset");\nvar solution = document.getElementById("solution");\nvar output = document.querySelector(".output");\nvar code = textarea.value;\nvar userEntry = textarea.value;\n\nfunction updateCode() {\n  output.innerHTML = textarea.value;\n}\n\nreset.addEventListener("click", function () {\n  textarea.value = code;\n  userEntry = textarea.value;\n  solutionEntry = htmlSolution;\n  solution.value = "Показать решение";\n  updateCode();\n});\n\nsolution.addEventListener("click", function () {\n  if (solution.value === "Показать решение") {\n    textarea.value = solutionEntry;\n    solution.value = "Спрятать решение";\n  } else {\n    textarea.value = userEntry;\n    solution.value = "Показать решение";\n  }\n  updateCode();\n});\n\nvar htmlSolution =\n  "<ul>\n<li>молоко</li>\n<li>яйца</li>\n<li>хлеб</li>\n<li>хумус</li>\n</ul>";\nvar solutionEntry = htmlSolution;\n\ntextarea.addEventListener("input", updateCode);\nwindow.addEventListener("load", updateCode);\n\ntextarea.onkeydown = function (e) {\n  if (e.keyCode === 9) {\n    e.preventDefault();\n    insertAtCaret("\t");\n  }\n\n  if (e.keyCode === 27) {\n    textarea.blur();\n  }\n};\n\nfunction insertAtCaret(text) {\n  var scrollPos = textarea.scrollTop;\n  var caretPos = textarea.selectionStart;\n\n  var front = textarea.value.substring(0, caretPos);\n  var back = textarea.value.substring(\n    textarea.selectionEnd,\n    textarea.value.length,\n  );\n  textarea.value = front + text + back;\n  caretPos = caretPos + text.length;\n  textarea.selectionStart = caretPos;\n  textarea.selectionEnd = caretPos;\n  textarea.focus();\n  textarea.scrollTop = scrollPos;\n}\n\ntextarea.onkeyup = function () {\n  if (solution.value === "Показать решение") {\n    userEntry = textarea.value;\n  } else {\n    solutionEntry = textarea.value;\n  }\n\n  updateCode();\n};\n</pre></div><div class="code-example" id="sect3"><div class="example-header" id="sect4"></div></div></div></section><section aria-labelledby="упорядоченные"><h3 id="упорядоченные"><a>Упорядоченные</a></h3><div class="section-content"><p>Упорядоченные списки — это списки, в которых порядок элементов имеет значение, — возьмём в качестве примера маршрут следования:</p>\n<pre compile="false" disable="true" language="markup">Двигайтесь до конца дороги\nПоверните направо\nЕзжайте прямо через первые два перекрёстка с круговым движением\nПоверните налево на третьем перекрёстке\nШкола справа от вас, 300 метров вверх по дороге\n</pre>\n<p>Структура разметки такая же, как для неупорядоченных списков, за исключением того, что вы должны обернуть элементы списка в элемент <a><code>&lt;ol&gt;</code></a> (ordered list), а не &lt;ul&gt;:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><ol>\n  <li>Двигайтесь до конца дороги</li>\n  <li>Поверните направо</li>\n  <li>Езжайте прямо через первые два перекрёстка с круговым движением</li>\n  <li>Поверните налево на третьем перекрёстке</li>\n  <li>Школа справа от вас, в 300 метрах вверх по дороге</li>\n</ol>\n</pre></div></div></section><section aria-labelledby="активное_изучение_разметка_упорядоченного_списка"><h3 id="активное_изучение_разметка_упорядоченного_списка"><a>Активное изучение: разметка упорядоченного списка</a></h3><div class="section-content"><p>Попробуйте отредактировать образец ниже, чтобы создать свой собственный упорядоченный список HTML.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h2>Результат</h2>\n<div class="output" style="min-height: 50px;"></div>\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из поля ввода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 200px; width: 95%">Двигайтесь до конца дороги\nПоверните направо\nЕзжайте прямо через первые два перекрёстка с круговым движением\nПоверните налево на третьем перекрёстке\nШкола справа от вас, 300 метров вверх по дороге</input>\n\n<div class="playable-buttons">\n  <input id="reset" type="button" value="Сбросить">\n  <input id="solution" type="button" value="Показать решение">\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">html {\n  font-family: "Open Sans Light", Helvetica, Arial, sans-serif;\n}\n\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n}\n\n.input,\n.output {\n  width: 90%;\n  height: 6em;\n  padding: 10px;\n  border: 1px solid #0095dd;\n  overflow: auto;\n}\n\nbutton {\n  padding: 10px 10px 10px 0;\n}\n\nh2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">var textarea = document.getElementById("code");\nvar reset = document.getElementById("reset");\nvar solution = document.getElementById("solution");\nvar output = document.querySelector(".output");\nvar code = textarea.value;\nvar userEntry = textarea.value;\n\nfunction updateCode() {\n  output.innerHTML = textarea.value;\n}\n\nreset.addEventListener("click", function () {\n  textarea.value = code;\n  userEntry = textarea.value;\n  solutionEntry = htmlSolution;\n  solution.value = "Показать решение";\n  updateCode();\n});\n\nsolution.addEventListener("click", function () {\n  if (solution.value === "Показать решение") {\n    textarea.value = solutionEntry;\n    solution.value = "Спрятать решение";\n  } else {\n    textarea.value = userEntry;\n    solution.value = "Показать решение";\n  }\n  updateCode();\n});\n\nvar htmlSolution =\n  "<ol>\n<li>Двигайтесь до конца дороги</li>\n<li>Поверните направо</li>\n<li>Езжайте прямо через первые два перекрёстка с круговым движением</li>\n<li>Поверните налево на третьем перекрёстке</li>\n<li>Школа справа от вас, 300 метров вверх по дороге</li>\n</ol>";\nvar solutionEntry = htmlSolution;\n\ntextarea.addEventListener("input", updateCode);\nwindow.addEventListener("load", updateCode);\n\ntextarea.onkeydown = function (e) {\n  if (e.keyCode === 9) {\n    e.preventDefault();\n    insertAtCaret("\t");\n  }\n\n  if (e.keyCode === 27) {\n    textarea.blur();\n  }\n};\n\nfunction insertAtCaret(text) {\n  var scrollPos = textarea.scrollTop;\n  var caretPos = textarea.selectionStart;\n\n  var front = textarea.value.substring(0, caretPos);\n  var back = textarea.value.substring(\n    textarea.selectionEnd,\n    textarea.value.length,\n  );\n  textarea.value = front + text + back;\n  caretPos = caretPos + text.length;\n  textarea.selectionStart = caretPos;\n  textarea.selectionEnd = caretPos;\n  textarea.focus();\n  textarea.scrollTop = scrollPos;\n}\n\ntextarea.onkeyup = function () {\n  if (solution.value === "Показать решение&gt;") {\n    userEntry = textarea.value;\n  } else {\n    solutionEntry = textarea.value;\n  }\n\n  updateCode();\n};\n</pre></div><div class="code-example" id="sect5"><div class="example-header" id="sect6"></div></div></div></section><section aria-labelledby="активное_изучение_разметка_собственной_страницы_рецептов"><h3 id="активное_изучение_разметка_собственной_страницы_рецептов"><a>Активное изучение: разметка собственной страницы рецептов</a></h3><div class="section-content"><p>Итак, в этот момент в статье у вас есть вся необходимая информация, чтобы разметить наш пример страницы рецепта. Вы можете либо сохранить локальную копию исходного файла <a class="external" target="_blank">text-start.html</a> и выполнить в нём работу, либо сделать это в приведённом ниже примере. Делать это локально, вероятно, будет лучше, так как тогда вы сможете сохранить работу, которую вы делаете, тогда как если вы её добавите в редактируемый пример, она будет потеряна при следующем открытии страницы. У обоих способов есть плюсы и минусы.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h2>Результат</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из поля ввода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 200px; width: 95%">Рецепт быстрого приготовления хумуса.\n\n  Хумус — быстро, вкусно, — и ничего лишнего. Этот рецепт был составлен из других рецептов, которые мне попадались в течение многих лет.\n\n  Хумус — это вкусная густая паста, широко используемая в Греческих и Ближневосточных блюдах. Очень вкусно есть его с салатами, мясом на гриле и питой.\n\n  Ингредиенты\n\n  1 банка (400г) турецкого гороха (или бараньего гороха)\n  175г тахини\n  6 вяленых томатов\n  Половинка красного перца\n  Щепотка кайенского перца\n  1 зубчик чеснока\n  Чуть-чуть оливкового масла\n\n  Рецепт\n\n  Очистите чеснок от кожуры и крупно нарежьте.\n  Удалите стебель и семена у перца; крупно нарежьте перец.\n  Добавьте все ингредиенты в пищевой комбайн.\n  Измельчите все ингредиенты до состояния пасты.\n  Если вы хотите "грубый" хумус, измельчайте пару минут.\n  Если вам нужен гладкий хумус, измельчайте дольше.\n\n  По вкусу вы также можете добавить в небольших количествах лимон с кориандром, перец чили, лайм с чипотле, хариссу с мятой или же шпинат с брынзой. Попробуйте и решите, что подойдёт вам.\n\n  Хранение\n\n  Храните хумус в запечатанном контейнере в холодильнике. Хумус хранится примерно неделю после приготовления. Если он начнёт пениться, выкидывайте его.\n\n  Хумус можно хранить в морозильном отделении 2–3 месяца.</input>\n\n<div class="playable-buttons">\n  <input id="reset" type="button" value="Сбросить">\n  <input id="solution" type="button" value="Показать решение">\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">html {\n  font-family: "Open Sans Light", Helvetica, Arial, sans-serif;\n}\n\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n}\n\n.input,\n.output {\n  width: 90%;\n  height: 6em;\n  padding: 10px;\n  border: 1px solid #0095dd;\n  overflow: auto;\n}\n\nbutton {\n  padding: 10px 10px 10px 0;\n}\n\nh2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">var textarea = document.getElementById("code");\nvar reset = document.getElementById("reset");\nvar solution = document.getElementById("solution");\nvar output = document.querySelector(".output");\nvar code = textarea.value;\nvar userEntry = textarea.value;\n\nfunction updateCode() {\n  output.innerHTML = textarea.value;\n}\n\nreset.addEventListener("click", function () {\n  textarea.value = code;\n  userEntry = textarea.value;\n  solutionEntry = htmlSolution;\n  solution.value = "Показать решение";\n  updateCode();\n});\n\nsolution.addEventListener("click", function () {\n  if (solution.value === "Показать решение") {\n    textarea.value = solutionEntry;\n    solution.value = "Спрятать решение";\n  } else {\n    textarea.value = userEntry;\n    solution.value = "Показать решение";\n  }\n  updateCode();\n});\n\nvar htmlSolution =\n  \'<h1>Рецепт быстрого приготовления хумуса.</h1>\n\n<p>Хумус — быстро, вкусно, — и ничего лишнего. Этот рецепт был составлен из других рецептов, которые мне попадались в течение многих лет.</p>\n\n<p>Хумус — это вкусная густая паста, широко используемая в Греческих и Ближневосточных блюдах. Очень вкусно есть его с салатами, мясом на гриле и питой.</p>\n\n<h2>Ингредиенты</h2>\n\n<ul>\n<li>1 банка (400г) турецкого гороха (или бараньего гороха)</li>\n<li>175г тахани</li>\n<li>6 вяленых томатов</li>\n<li>Половинка красного перца</li>\n<li>Щепотка кайенского перца</li>\n<li>1 зубчик чеснока</li>\n<li>Чуть-чуть оливкового масла</li>\n</ul>\n\n<h2>Рецепт</h2>\n\n<ol>\n<li>Очистите чеснок от кожуры и крупно нарежьте.</li>\n<li>Удалите стебель и семена у перца; крупно нарежьте.</li>\n<li>Добавьте все ингредиенты в пищевой комбайн.</li>\n<li>Измельчите все ингредиенты до состояния пасты.</li>\n<li>Если вы хотите "грубый" хумус, измельчайте пару минут.</li>\n<li>Если вам нужен гладкий хумус, измельчайте дольше.</li>\n</ol>\n\n<p>По вкусу можете добавить в небольших количествах лимон и кориандский перец, лайм и чипотле, хариссу и мяту или шпинат и брынзу. Попробуйте и решите, что подходит вам.</p>\n\n<h2>Хранение</h2>\n\n<p>Храните хумус в запечатанном контейнере в холодильнике. Хумус хранится примерно неделю после приготовления. Если он начнёт пениться, выкидывайте его.</p>\n\n<p>Хумус можно хранить в морозильном отделении 2–3 месяца.</p>\';\nvar solutionEntry = htmlSolution;\n\ntextarea.addEventListener("input", updateCode);\nwindow.addEventListener("load", updateCode);\n\ntextarea.onkeydown = function (e) {\n  if (e.keyCode === 9) {\n    e.preventDefault();\n    insertAtCaret("\t");\n  }\n\n  if (e.keyCode === 27) {\n    textarea.blur();\n  }\n};\n\nfunction insertAtCaret(text) {\n  var scrollPos = textarea.scrollTop;\n  var caretPos = textarea.selectionStart;\n\n  var front = textarea.value.substring(0, caretPos);\n  var back = textarea.value.substring(\n    textarea.selectionEnd,\n    textarea.value.length,\n  );\n  textarea.value = front + text + back;\n  caretPos = caretPos + text.length;\n  textarea.selectionStart = caretPos;\n  textarea.selectionEnd = caretPos;\n  textarea.focus();\n  textarea.scrollTop = scrollPos;\n}\n\ntextarea.onkeyup = function () {\n  if (solution.value === "Показать решение") {\n    userEntry = textarea.value;\n  } else {\n    solutionEntry = textarea.value;\n  }\n\n  updateCode();\n};\n</pre></div><div class="code-example" id="sect7"><div class="example-header" id="sect8"></div></div>\n<p>Если вы застряли, вы всегда можете нажать кнопку <em>Показать решение</em> или проверить наш пример <a class="external" target="_blank">text-complete.html</a> в нашем реестре github.</p></div></section><section aria-labelledby="вложенные_списки"><h3 id="вложенные_списки"><a>Вложенные списки</a></h3><div class="section-content"><p>Вполне нормально вложить один список в другой. Возможно, вы захотите, чтобы один список располагался внутри другого. Давайте возьмём второй список из нашего примера рецепта:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><ol>\n  <li>Очистите чеснок от кожуры и крупно нарежьте.</li>\n  <li>Удалите стебель и семена у перца; крупно нарежьте перец.</li>\n  <li>Добавьте все ингредиенты в пищевой комбайн.</li>\n  <li>Измельчите все ингредиенты до состояния пасты.</li>\n  <li>Если вы хотите "грубый" хумус, измельчайте пару минут.</li>\n  <li>Если вам нужен гладкий хумус, измельчайте дольше.</li>\n</ol>\n</pre></div>\n<p>Поскольку последние две строки очень тесно связаны с тем, что было до них (они читаются как вспомогательные инструкции или варианты, которые подходят под этой маркой), может иметь смысл вложить их в свой собственный неупорядоченный список и поместить этот список внутри текущего. Это будет выглядеть так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><ol>\n  <li>Очистите чеснок от кожуры и крупно нарежьте.</li>\n  <li>Удалите стебель и семена у перца; крупно нарежьте перец.</li>\n  <li>Добавьте все ингредиенты в пищевой комбайн.</li>\n  <li>\n    Измельчите все ингредиенты до состояния пасты.\n    <ul>\n      <li>Если вы хотите "грубый" хумус, измельчайте пару минут.</li>\n      <li>Если вам нужен гладкий хумус, измельчайте дольше.</li>\n    </ul>\n  </li>\n</ol>\n</pre></div>\n<p>Попробуйте вернуться к предыдущему примеру активного обучения и обновить второй список.</p></div></section><section aria-labelledby="акцент_и_важность"><h2 id="акцент_и_важность"><a>Акцент и важность</a></h2><div class="section-content"><p>В обиходе мы часто подчёркиваем определённые слова, чтобы изменить смысл предложения и мы часто хотим отметить некоторые слова как важные или разные в некотором роде. HTML предоставляет различные семантические элементы, позволяющие нам добавлять текстовые материалы с такими эффектами, и в этом разделе мы рассмотрим несколько наиболее распространённых.</p></div></section><section aria-labelledby="акцент"><h3 id="акцент"><a>Акцент</a></h3><div class="section-content"><p>Когда мы хотим добавить акцент в разговорный язык, мы подчёркиваем определённые слова, тонко изменяя смысл того, что мы говорим. Точно так же на письменном языке мы склонны подчёркивать слова, выделяя их <em>курсивом</em>. Например, следующие два предложения имеют разные значения.</p>\n<p>Я рад, что ты не опоздал.</p>\n<p>Я <em>рад</em>, что ты не <em>опоздал</em>.</p>\n<p>В первом предложении звучит искреннее облегчение, что человек не опоздал. Во втором, напротив, звучит сарказм или пассивная агрессия: так выражена досада от того, что человек немного опоздал.</p>\n<p>В таких случаях в HTML используется элемент <a><code>&lt;em&gt;</code></a> (выделение). Кроме того, чтобы сделать документ более интересным для чтения, они распознаются программами, считывающими с экрана, и произносятся другим тоном. Браузеры стилизуют это по умолчанию курсивом, но вы можете не использовать этот тег, чтобы получить курсив. Для выделения курсивом вы можете использовать элемент <a><code>&lt;span&gt;</code></a> и CSS или элемент <a><code>&lt;em&gt;</code></a>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Я <em>рад</em>, что ты не <em>опоздал</em>.</p>\n</pre></div></div></section><section aria-labelledby="важное_значение"><h3 id="важное_значение"><a>Важное значение</a></h3><div class="section-content"><p>Чтобы подчеркнуть важные слова, мы склонны подчёркивать их в устной речи и <strong>выделять жирным</strong> в письменном языке. Например:</p>\n<blockquote>\n  <p>Эта жидкость <strong>очень токсична</strong>.</p>\n  <p>Я рассчитываю на тебя. <strong>Не опаздывай</strong>!</p>\n</blockquote>\n<p>В таких случаях в HTML используется элемент <a><code>&lt;strong&gt;</code></a> (важное значение). Помимо того, что документ становится более полезным, они распознаются программами, считывающими с экрана, и говорят другим тоном. Браузеры стилизуют это как полужирный текст по умолчанию, но вы можете не использовать этот тег, чтобы получить жирный шрифт. Для получения жирного шрифта вы можете использовать элемент <a><code>&lt;span&gt;</code></a> и CSS или элемент <a><code>&lt;strong&gt;</code></a>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Эта жидкость <strong>очень токсична</strong>.</p>\n\n<p>Я рассчитываю на тебя. <strong>Не опаздывай</strong>!</p>\n</pre></div>\n<p>При желании вы можете вложить важные и акцентированные слова друг в друга:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  Эта жидкость <strong>очень токсична</strong> — если ты выпьешь её, <strong>то можешь <em>умереть</em></strong>.\n</p>\n</pre></div></div></section><section aria-labelledby="активное_изучение_давайте_будем_важны!"><h3 id="активное_изучение_давайте_будем_важны!"><a>Активное изучение: Давайте будем важны!</a></h3><div class="section-content"><p>В этом разделе активного обучения мы предоставили редактируемый пример. Внутри него мы хотели бы, чтобы вы попытались добавить акцент и большую важность для слов, которые, по вашему мнению, им нужны, просто для того, чтобы попрактиковаться.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h2>Результат</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из поля ввода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 200px; width: 95%">&lt;h1&gt;Важное объявление&lt;/h1&gt;\n&lt;p&gt;9 января 2010 года, в воскресенье,\nбанда вандалов была обнаружена за кражей нескольких\nсадовых гномов из торгового центра в центре Милуоки. На них были\nнадеты зелёные спортивные костюмы и глупые шляпы, и,\nпо-видимому, они были в нетрезвом состоянии. Если у кого-то\nесть какая-либо информация об этом инциденте, пожалуйста,\nпозвоните в полицию немедленно.&lt;/p&gt;</input>\n\n<div class="playable-buttons">\n  <input id="reset" type="button" value="Сбросить">\n  <input id="solution" type="button" value="Показать решение">\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">html {\n  font-family: sans-serif;\n}\n\nh2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">var textarea = document.getElementById("code");\nvar reset = document.getElementById("reset");\nvar solution = document.getElementById("solution");\nvar output = document.querySelector(".output");\nvar code = textarea.value;\nvar userEntry = textarea.value;\n\nfunction updateCode() {\n  output.innerHTML = textarea.value;\n}\n\nreset.addEventListener("click", function () {\n  textarea.value = code;\n  userEntry = textarea.value;\n  solutionEntry = htmlSolution;\n  solution.value = "Show solution";\n  updateCode();\n});\n\nsolution.addEventListener("click", function () {\n  if (solution.value === "Показать решение") {\n    textarea.value = solutionEntry;\n    solution.value = "Спрятать решение";\n  } else {\n    textarea.value = userEntry;\n    solution.value = "Показать решение";\n  }\n  updateCode();\n});\n\nvar htmlSolution =\n  "<h1>Важное объявление</h1>\n<p><strong>9 января 2010 года, в воскресенье</strong>, банда <em>вандалов</em> была обнаружена за кражей <strong><em>нескольких</em> садовых гномов</strong> торговом центре в центре <strong>Милуоки</strong>. На них были надеты <em>зелёные спортивные костюмы</em> и <em>глупые шляпы</em>, и, по-видимому, они были в нетрезвом состоянии. Если у кого-то есть <strong>какая-либо</strong> информация об этом инциденте, пожалуйста, позвоните в полицию <strong>немедленно</strong>.</p>";\nvar solutionEntry = htmlSolution;\n\ntextarea.addEventListener("input", updateCode);\nwindow.addEventListener("load", updateCode);\n\n// stop tab key tabbing out of textarea and\n// make it write a tab at the caret position instead\n\ntextarea.onkeydown = function (e) {\n  if (e.keyCode === 9) {\n    e.preventDefault();\n    insertAtCaret("\t");\n  }\n\n  if (e.keyCode === 27) {\n    textarea.blur();\n  }\n};\n\nfunction insertAtCaret(text) {\n  var scrollPos = textarea.scrollTop;\n  var caretPos = textarea.selectionStart;\n\n  var front = textarea.value.substring(0, caretPos);\n  var back = textarea.value.substring(\n    textarea.selectionEnd,\n    textarea.value.length,\n  );\n  textarea.value = front + text + back;\n  caretPos = caretPos + text.length;\n  textarea.selectionStart = caretPos;\n  textarea.selectionEnd = caretPos;\n  textarea.focus();\n  textarea.scrollTop = scrollPos;\n}\n\n// Update the saved userCode every time the user updates the text area code\n\ntextarea.onkeyup = function () {\n  // We only want to save the state when the user code is being shown,\n  // not the solution, so that solution is not saved over the user code\n  if (solution.value === "Показать решение") {\n    userEntry = textarea.value;\n  } else {\n    solutionEntry = textarea.value;\n  }\n\n  updateCode();\n};\n</pre></div><div class="code-example" id="sect9"><div class="example-header" id="sect10"></div></div></div></section><section aria-labelledby="курсив_жирный_шрифт_подчеркивание"><h3 id="курсив_жирный_шрифт_подчеркивание"><a>Курсив, жирный шрифт, подчеркивание</a></h3><div class="section-content"><p>Элементы, которые мы обсуждали до сих пор, имеют чёткую привязку к семантике. Ситуация с <a><code>&lt;b&gt;</code></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;i&gt;</code> <small>(en-US)</small></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;u&gt;</code> <small>(en-US)</small></a> несколько сложнее. Они появились в эпоху, когда CSS поддерживался плохо или вообще не поддерживался, чтобы люди могли писать <strong>жирный</strong> текст, <em>курсив</em> или <strong>подчёркнутый</strong> текст. Такие элементы, которые влияют только на внешний вид, а не на семантику, известны как элементы представления и больше не должны использоваться, поскольку, как мы видели ранее, семантика очень важна для доступности людям с ограниченными возможностями, SEO и так далее.</p>\n<p>HTML5 переопределил &lt;b&gt;, &lt;i&gt; и &lt;u&gt; с новыми, несколько запутанными, семантическими ролями.</p>\n<p>Вот хорошее правило: предпочтительней использовать &lt;b&gt;, &lt;i&gt; или &lt;u&gt; для передачи значения, традиционно передаваемого жирным шрифтом, курсивом или подчёркиванием, при условии, что нет более подходящего элемента. Тем не менее, всегда важно сохранить менталитет доступности. Концепция курсива не очень помогает людям, использующим устройства для чтения с экрана, или людям, использующим систему письма, отличную от латинского алфавита.</p>\n<ul>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;i&gt;</code> <small>(en-US)</small></a> используется для передачи значения, традиционно передаваемого курсивом: иностранные слова, таксономические обозначения, технические термины, мысли ...</li>\n  <li><a><code>&lt;b&gt;</code></a> используется для передачи значения, традиционно передаваемого жирным шрифтом: ключевые слова, названия продуктов, предложения ...</li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;u&gt;</code> <small>(en-US)</small></a> используется для передачи значения, традиционно передаваемого подчёркиванием: имя собственное, орфографическая ошибка ...</li>\n</ul>\n<div class="notecard note" id="sect11">\n  <p><strong>Примечание:</strong> Предупреждение о подчёркивании: <strong>люди сильно ассоциируют подчёркивание с гиперссылками</strong>. Поэтому в Интернете лучше всего подчеркнуть только ссылки. Используйте элемент &lt;u&gt;, когда он семантически подходит, но подумайте о том, чтобы использовать CSS для изменения подчёркивания по умолчанию для чего-то более подходящего в Интернете. Пример ниже иллюстрирует, как это можно сделать.</p>\n</div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><!-- Научные наименования -->\n<p>\n  Колибри обыкновенный (<i>архилоус обыкновенный</i>) — наиболее часто\n  встречающийся вид колибри в северо-восточной Америке.\n</p>\n\n<!-- Иностранные слова -->\n<p>\n  Случился прилив иностранных слов, таких как <i lang="uk-latn">vatrushka</i>,\n  <i lang="id">nasi goreng</i> и <i lang="fr">soupe à l\'oignon</i>.\n</p>\n\n<!-- Явно неправильное произношение или написание -->\n<p>Когда-нибудь я узнаю, как <u>гаварить</u> без ошибок.</p>\n\n<!-- Выделение ключевых слов в инструкциях -->\n<ol>\n  <li><b>Отрежьте</b> два ломтика хлеба.</li>\n  <li><b>Добавьте</b> кусочек помидора и лист латука между ломтями хлеба.</li>\n</ol>\n</pre></div></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Вот и всё! Эта статья должна была дать вам хорошее представление о том, как начать разметку текста в HTML, и познакомить вас с некоторыми из наиболее важных элементов в этой области. В этой области есть намного больше семантических элементов, и мы рассмотрим их в нашей статье «Больше семантических элементов» позже в курсе. В следующей статье мы подробно рассмотрим, как <a>создавать гиперссылки</a>, возможно, самый важный элемент в Интернете.</p></div></section>',
					works: [],
				},
				{
					title: 'Создание гиперссылок',
					chapter: 1.7,
					content:
						'<header><h1>Создание гиперссылок</h1></header><div class="section-content">\n<p>Гиперссылки очень важны — именно они делают Интернет <em>сетью</em>. В этой статье представлен синтаксис, необходимый для создания ссылки, а также обсуждаются лучшие практики обращения со ссылками.</p>\n</div><section aria-labelledby="что_такое_гиперссылка"><h2 id="что_такое_гиперссылка"><a>Что такое гиперссылка?</a></h2><div class="section-content"><p>Гиперссылки — одно из самых интересных нововведений Интернета. Они были особенностью Сети с самого начала, но именно они превращают Интернет в Интернет. Они позволяют нам связывать наши документы с любым другим документом (или ресурсом), с которым мы хотим. С их помощью мы также можем связывать документы с их конкретными частями, и мы можем сделать приложения доступными на простом веб-адресе (сравните это с локальными приложениями, которые должны быть установлены, и другими такими же вещами). Почти любой веб-контент может быть преобразован в ссылку, так что когда вы кликаете по ней (или иным образом активируете), она заставляет веб-браузер перейти на другой веб-адрес (<a>URL</a>).</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> URL-адрес может указывать на файлы HTML, текстовые файлы, изображения, текстовые документы, видео и аудиофайлы и все остальное, что может жить в Интернете. Если веб-браузер не знает, как отображать или обрабатывать файл, он спросит вас, хотите ли вы открыть файл (в этом случае обязанность открытия или обработки файла передаётся в соответствующее локальное приложение на устройстве) или загрузить файл (в этом случае вы можете попытаться разобраться с ним позже).</p>\n</div>\n<p>Например, домашняя страница BBC содержит большое количество ссылок, которые указывают не только на множество новостей, но и на различные области сайта (меню), страницы входа / регистрации (пользовательские инструменты) и многое другое.</p>\n<p>\n  \n</p></div></section><section aria-labelledby="анатомия_ссылки"><h2 id="анатомия_ссылки"><a>Анатомия ссылки</a></h2><div class="section-content"><p>Простая ссылка создаётся путём обёртывания текста (или другого содержимого, смотрите <a>Ссылки-блоки</a>), который вы хотите превратить в ссылку, в элемент <a><code>&lt;a&gt;</code></a>, и придания этому элементу атрибута <a><code>href</code></a> (который также известен как <strong>гипертекстовая ссылка,</strong> или <strong>цель</strong>), который будет содержать веб-адрес, на который вы хотите указать ссылку.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  Я создал ссылку на\n  <a href="https://www.mozilla.org/ru/">домашнюю страницу Mozilla</a>.\n</p>\n</pre></div>\n<p>Это дало нам следующий результат:<br>Я создал ссылку на <a class="external" target="_blank">домашнюю страницу Mozilla</a>.</p></div></section><section aria-labelledby="блочные_ссылки"><h3 id="блочные_ссылки"><a>Блочные ссылки</a></h3><div class="section-content"><p>Как упоминалось ранее, вы можете превратить любой элемент в ссылку, даже <a>блочный элемент</a>. Если вы хотите превратить заголовок в ссылку, то оберните его в элемент (<code>&lt;a&gt;</code>):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><a href="https://developer.mozilla.org/ru/">\n  <h1>MDN Web Docs</h1>\n</a>\n<p>\n  Документируем веб-технологии, включая CSS, HTML и JavaScript, с 2005 года.\n</p>\n</pre></div>\n<p>\n  This turns the heading into a link:\n  </p><div class="code-example" id="sect2"><div class="example-header" id="sect3"></div></div>\n<p></p></div></section><section aria-labelledby="добавляем_информацию_с_помощью_атрибута_title"><h3 id="добавляем_информацию_с_помощью_атрибута_title"><a>Добавляем информацию с помощью атрибута title</a></h3><div class="section-content"><p>Другим атрибутом, который вы можете добавить к своим ссылкам, является — <code>title</code>. Он предназначен для хранения полезной информации о ссылке. Например, какую информацию содержит страница или другие вещи, о которых вам нужно знать. Например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  Я создал ссылку на\n  <a href="https://www.mozilla.org/ru/" title="Лучшее место для поиска дополнительной информации\n           о миссии Mozilla и о том, как внести свой вклад">домашнюю страницу Mozilla </a>.\n</p>\n</pre></div>\n<p>Вот что получилось (описание появится, если навести курсор на ссылку):</p><div class="code-example" id="sect4"><div class="example-header" id="sect5"></div></div>\n<div class="notecard note" id="sect6">\n  <p><strong>Примечание:</strong> Описание из атрибута title отображается только при наведении курсора, значит люди, полагающиеся на клавиатурные элементы управления для навигации по веб-страницам, будут испытывать трудности с доступом к информации, которую содержит title. Если информация заголовка действительно важна для удобства использования страницы, то вы должны представить её таким образом, который будет доступен для всех пользователей, например, поместив её в обычный текст.</p>\n</div></div></section><section aria-labelledby="активное_изучение_создаём_собственную_ссылку"><h3 id="активное_изучение_создаём_собственную_ссылку"><a>Активное изучение: создаём собственную ссылку</a></h3><div class="section-content"><p>Время упражнения: мы хотели бы, чтобы вы создали любой HTML-документ в текстовом редакторе на своём компьютере (наш <a class="external" target="_blank">базовый пример</a> подойдёт.)</p>\n<ul>\n  <li>Попробуйте добавить в тело HTML один или несколько абзацев или другие элементы, о которых вы уже знаете.</li>\n  <li>Теперь превратите некоторые фрагменты документа в ссылки.</li>\n  <li>Добавьте ссылкам атрибут <code>title</code>.</li>\n</ul></div></section><section aria-labelledby="краткое_руководство_по_url-адресам_и_путям"><h2 id="краткое_руководство_по_url-адресам_и_путям"><a>Краткое руководство по URL-адресам и путям</a></h2><div class="section-content"><p>Чтобы полностью понять адреса ссылок, вам нужно понять несколько вещей про URL-адреса и пути к файлам. Этот раздел даст вам информацию, необходимую для достижения этой цели.</p>\n<p>URL-адрес (Uniform Resource Locator, или единый указатель ресурса, но так его никто не называет) — это просто строка текста, которая определяет, где что-то находится в Интернете. Например, домашняя страница Mozilla находится по адресу <code>https://www.mozilla.org/ru/</code>.</p>\n<p>URL-адреса используют пути для поиска файлов. Пути указывают, где в файловой системе находится файл, который вас интересует. Давайте рассмотрим простой пример структуры каталогов (смотрите каталог <a class="external" target="_blank">creating-hyperlinks</a>.)</p>\n<p>\n  \n</p>\n<p><strong>Корень</strong> структуры — каталог <code>creating-hyperlinks</code>. При работе на локальном веб-сайте у вас будет один каталог, в который входит весь сайт. В корне у нас есть два файла — <code>index.html</code> и <code>contacts.html</code>. На настоящем веб-сайте <code>index.html</code> был бы нашей домашней, или лендинг-страницей (веб-страницей, которая служит точкой входа для веб-сайта или определённого раздела веб-сайта).</p>\n<p>В корне есть ещё два каталога — <code>pdfs</code> и <code>projects</code>. У каждого из них есть один файл внутри — <code>project-brief.pdf</code> и <code>index.html</code>, соответственно. Обратите внимание на то, что вы можете довольно успешно иметь два <code>index.html</code> файла в одном проекте, пока они находятся в разных местах файловой системы. Многие веб-сайты так делают. Второй <code>index.html</code>, возможно, будет главной лендинг-страницей для связанной с проектом информации.</p>\n<ul>\n  <li><strong>Тот же каталог</strong>: Если вы хотите подключить ссылку внутри <code>index.html</code> (верхний уровень <code>index.html</code>), указывающую на <code>contacts.html</code>, вам просто нужно указать имя файла, на который вы хотите установить ссылку, так как он находится в том же каталоге, что и текущий файл. Таким образом, URL-адрес, который вы используете — <code>contacts.html</code>:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  Хотите связаться с конкретным сотрудником? Найдите подробную информацию на\n  нашей <a href="contacts.html">странице контактов</a>.\n</p>\n</pre></div>\n  </li>\n  <li><strong>Перемещение вниз в подкаталоги</strong>: Если вы хотите подключить ссылку внутри <code>index.html</code> (верхний уровень <code>index.html</code>), указывающую на <code>projects/index.html</code>, вам нужно спуститься ниже в директории <code>projects</code> перед тем, как указать файл, который вы хотите. Это делается путём указания имени каталога, после которого идёт слеш и затем имя файла. Итак, URL-адрес, который вы используете - <code>projects/index.html</code>:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  Посетите мою <a href="projects/index.html">домашнюю страницу проекта</a>.\n</p>\n</pre></div>\n  </li>\n  <li><strong>Перемещение обратно в родительские каталоги</strong>: Если вы хотите подключить ссылку внутри <code>projects/index.html</code>, указывающую на <code>pdfs/project-brief.pdf</code>, вам нужно будет подняться на уровень каталога, затем спустится в каталог <code>pdf</code>. "Подняться вверх на уровень каталога" обозначается двумя точками — <code>..</code> — так, URL-адрес, который вы используете <code>../pdfs/project-brief.pdf</code>:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  Ссылка на\n  <a href="../pdfs/project-brief.pdf">краткое описание моего проекта</a>.\n</p>\n</pre></div>\n  </li>\n</ul>\n<div class="notecard note" id="sect7">\n  <p>\n    <strong>Примечание:</strong> вы можете объединить несколько экземпляров этих функций в сложные URL-адреса, если необходимо, например:\n    <code>../../../сложный/путь/к/моему/файлу.html</code>.\n  </p>\n</div></div></section><section aria-labelledby="фрагменты_документа"><h3 id="фрагменты_документа"><a>Фрагменты документа</a></h3><div class="section-content"><p>Можно ссылаться на определённую часть документа HTML (известную как <strong>фрагмент документа</strong>), а не только на верхнюю часть документа. Для этого вам сначала нужно назначить атрибут <a><code>id</code></a> элементу, с которым вы хотите связаться. Обычно имеет смысл ссылаться на определённый заголовок, поэтому это выглядит примерно так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><h2 id="Почтовый_адрес">Почтовый адрес</h2>\n</pre></div>\n<p>Затем, чтобы связаться с этим конкретным <code>id</code>, вы должны включить его в конец URL-адреса, которому предшествует знак решётки, например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  Хотите написать мне письмо? Используйте наш\n  <a href="contacts.html#Почтовый_адрес">почтовый адрес</a>.\n</p>\n</pre></div>\n<p>Вы даже можете использовать ссылку на фрагмент документа отдельно для ссылки на <em>другую часть того же документа</em>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  <a href="#Почтовый_адрес">Почтовый адрес компании</a>\n  можно найти в нижней части этой страницы.\n</p>\n</pre></div></div></section><section aria-labelledby="абсолютные_и_относительные_url-адреса"><h3 id="абсолютные_и_относительные_url-адреса"><a>Абсолютные и относительные URL-адреса</a></h3><div class="section-content"><p>Два понятия, с которыми вы столкнётесь в Интернете, — это <strong>абсолютный URL</strong> и <strong>относительный URL</strong>:</p>\n<dl>\n  <dt id="абсолютный_url"><a><strong>Абсолютный URL</strong></a></dt>\n  <dd>\n    <p>Указывает на местоположение, определяемое его абсолютным местоположением в Интернете, включая <a>протокол</a> и <a>доменное имя</a>. Например, если страница <code>index.html</code> загружается в каталог, называемый <code>projects</code>, который находится внутри корня веб-сервера, а домен веб-сайта — <code>http://www.example.com</code>, страница будет доступна по адресу <code>http://www.example.com/projects/index.html</code> (или даже просто <code>http://www.example.com/projects/</code>), так как большинство веб-серверов просто ищет целевую страницу, такую как <code>index.html</code>, для загрузки, если он не указан в URL-адресе.).</p>\n  </dd>\n</dl>\n<p><em>Абсолютный URL</em> всегда будет указывать на одно и то же местоположение, независимо от того, где он используется.</p>\n<dl>\n  <dt id="относительный_url"><a><strong>Относительный URL</strong></a></dt>\n  <dd>\n    <p>Указывает расположение <em>относительно</em> файла, с которого вы связываетесь, это больше похоже на случай, который мы рассматривали в предыдущей секции. Для примера, если мы хотим указать со страницы <code>http://www.example.com/projects/index.html</code> на PDF файл, находящийся в той же директории, наш URL может быть просто названием файла — <code>project-brief.pdf</code> — никакой дополнительной информации не требуется. Если PDF расположен в поддиректории <code>pdfs</code> внутри каталога <code>projects</code>, относительная ссылка будет <code>pdfs/project-brief.pdf</code> (аналогичный абсолютный URL был бы <code>http://www.example.com/projects/pdfs/project-brief.pdf</code>.).</p>\n  </dd>\n</dl>\n<p><em>Относительный URL</em> будет указывать на различные места, в зависимости от того, где находится файл, в котором он используется, — например, если мы переместим наш файл <code>index.html</code> из каталога <code>projects</code> в корневой каталог веб-сервера (верхний уровень, не в директорию) , то относительный URL <code>pdfs/project-brief.pdf</code> будет вести на <code>http://www.example.com/pdfs/project-brief.pdf</code>, а не на <code>http://www.example.com/projects/pdfs/project-brief.pdf</code>.</p>\n<p>Советуем вам основательно разобраться в этой теме!</p></div></section><section aria-labelledby="практика_написания_хороших_ссылок"><h2 id="практика_написания_хороших_ссылок"><a>Практика написания хороших ссылок</a></h2><div class="section-content"><p>При написании ссылок рекомендуется следовать некоторым правилам. Давайте рассмотрим их.</p></div></section><section aria-labelledby="используйте_чёткие_формулировки_описания_ссылок"><h3 id="используйте_чёткие_формулировки_описания_ссылок"><a>Используйте чёткие формулировки описания ссылок</a></h3><div class="section-content"><p>На вашей странице легко добавить ссылки. Но этого не совсем достаточно. Мы должны сделать наши ссылки <em>доступными</em> для всех читателей, независимо от их возможностей и инструментов просмотра страницы, которые они предпочитают. Например:</p>\n<ul>\n  <li>Пользователям программ читающих с экрана нравится переходить по ссылкам на странице, читая адрес ссылки в тексте.</li>\n  <li>Поисковые системы используют текст ссылки для индексирования файлов, поэтому рекомендуется включать ключевые слова в текст ссылки, чтобы эффективно описывать, куда ведёт ссылка.</li>\n  <li>Пользователи часто бегло просматривают страницу, не читая каждое слово, и их глаза будут привлечены к тексту, который выделяется, например, ссылки. Им будет полезно описание того, куда ведёт ссылка.</li>\n</ul>\n<p>Взгляните на этот пример:</p>\n<p><em><strong>Хороший</strong> текст ссылки:</em> <a class="external" target="_blank">Скачать Firefox</a></p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p><a href="https://firefox.com/"> Скачать Firefox </a></p>\n</pre></div>\n<p><em><strong>Плохой</strong> текст ссылки:</em> <a class="external" target="_blank">Нажми сюда</a>, чтобы скачать Firefox</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p><a href="https://firefox.com/"> Нажми сюда </a> чтобы скачать Firefox</p>\n</pre></div>\n<p>Советы:</p>\n<ul>\n  <li>Не пишите URL-адрес как часть текста ссылки. URL-адреса выглядят сложными, а звучат ещё сложнее, когда программы чтения с экрана читают их по буквам.</li>\n  <li>Не пишите «ссылка» или «ссылки на» в тексте ссылки — это лишнее. Программы чтения с экрана сами проговаривают, что есть ссылка. На экране пользователи также видят, что есть ссылка, потому что ссылки, как правило, оформлены в другом цвете и подчёркнуты (подчёркивая ссылки, вы соблюдаете правила хорошего тона, поскольку пользователи привыкли к этому).</li>\n  <li>Следите за тем, чтобы текст ссылки был как можно короче. Длинный текст ссылки особенно раздражает пользователей программ чтения с экрана, которым придётся услышать всё, что написано.</li>\n  <li>Минимизируйте случаи, когда несколько копий одного и того же текста ссылок указывает на разные страницы. Это может вызвать проблемы для пользователей программ чтения с экрана, которые часто вызывают список ссылок — несколько ссылок, помеченных как «нажмите здесь», «нажмите здесь», «нажмите здесь», будут путать.</li>\n</ul></div></section><section aria-labelledby="используйте_относительные_ссылки_где_это_возможно"><h3 id="используйте_относительные_ссылки_где_это_возможно"><a>Используйте относительные ссылки, где это возможно</a></h3><div class="section-content"><p>Из прочитанного выше, вы можете подумать, что всё время использовать абсолютные ссылки — хорошая идея; в конце концов, они не ломаются, когда страница перемещается. Тем не менее, лучше использовать относительные ссылки везде, где это возможно, в пределах <em>одного сайта</em> (при ссылке на <em>другие сайты</em> необходимо использовать абсолютную ссылку):</p>\n<ul>\n  <li>Во-первых, гораздо проще прописать в коде относительные URL-адреса, как правило, они намного короче абсолютных URL-адресов, что значительно упрощает чтение кода</li>\n  <li>Во-вторых, использование относительных URL-адресов эффективней по следующей причине. Когда вы используете абсолютный URL-адрес, браузер начинает поиск реального местоположения сервера запрашивая адрес у Domain Name System (<a>DNS</a>; также прочтите <a>Как работает web</a>), затем он переходит на этот сервер и находит файл, который запрашивается. С относительным URL-адресом проще: браузер просто ищет файл, который запрашивается на том же сервере. Используя абсолютные URL-адреса вместо относительных, вы постоянно нагружаете свой браузер дополнительной работой.</li>\n</ul></div></section><section aria-labelledby="создавая_ссылки_на_не_html_ресурсы_—_добавляйте_описание"><h3 id="создавая_ссылки_на_не_html_ресурсы_—_добавляйте_описание"><a>Создавая ссылки на не HTML ресурсы — добавляйте описание</a></h3><div class="section-content"><p>Когда вы создаёте ссылку на файл, нажав на который можно загрузить документ PDF или Word или открыть просмотр видео, прослушивание аудио файла или перейти на страницу с другим, неожиданным для пользователя результатом (всплывающее окно или загрузка Flash-фильма), добавляйте чёткую формулировку, чтобы уменьшить путаницу. Отсутствие описания может раздражать пользователя. Приведём пример:</p>\n<ul>\n  <li>Если вы используете соединение с низкой пропускной способностью и вдруг нажмёте на ссылку без описания, начнётся загрузка большого файла.</li>\n  <li>Если у вас нет установленного Flash-плеера и вы нажмёте ссылку, то внезапно перейдёте на страницу с Flash-контентом.</li>\n</ul>\n<p>Посмотрите на примеры, чтобы увидеть, как добавить описание:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  <a href="http://www.example.com/large-report.pdf">\n    Скачать отчёт о продажах (PDF, 10MB)\n  </a>\n</p>\n\n<p>\n  <a href="http://www.example.com/video-stream/">\n    Посмотреть видео (видео откроется в отдельном окне, HD качество)\n  </a>\n</p>\n\n<p>\n  <a href="http://www.example.com/car-game">\n    Играть в гонки (необходим Flash)\n  </a>\n</p>\n</pre></div></div></section><section aria-labelledby="используйте_атрибут_download_когда_создаёте_ссылку"><h3 id="используйте_атрибут_download_когда_создаёте_ссылку"><a>Используйте атрибут download, когда создаёте ссылку</a></h3><div class="section-content"><p>Когда создаёте ссылку на файл, который должен быть загружен, а не открыт в браузере, можете использовать атрибут <code>download</code>, чтобы создать имя файла по умолчанию для сохранения . Приведём пример ссылки для загрузки браузера Firefox 39:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><a href="https://download.mozilla.org/?product=firefox-39.0-SSL&amp;os=win&amp;lang=en-US" download="firefox-39-installer.exe">\n  Скачать Firefox 39 для Windows\n</a>\n</pre></div></div></section><section aria-labelledby="активное_изучение_создание_меню_навигации"><h2 id="активное_изучение_создание_меню_навигации"><a>Активное изучение: создание меню навигации</a></h2><div class="section-content"><p>Для этого упражнения мы хотим, чтобы вы создали ссылки на страницы в меню навигации в многостраничном сайте. Это один из распространённых способов создания сайта: на каждой странице используется одна и та же структура страниц, включая одно и то же меню навигации, поэтому при нажатии ссылок создаётся впечатление, что вы остаётесь в одном месте: меню остаётся на месте, а контент меняется.</p>\n<p>Вам нужно скачать или создать следующие страницы в одном каталоге (Смотрите <a class="external" target="_blank">navigation-menu-start</a>):</p>\n<ul>\n  <li><a class="external" target="_blank">index.html</a></li>\n  <li><a class="external" target="_blank">projects.html</a></li>\n  <li><a class="external" target="_blank">pictures.html</a></li>\n  <li><a class="external" target="_blank">social.html</a></li>\n</ul>\n<p>Что делать:</p>\n<ol>\n  <li>Добавьте неупорядоченный список в указанном месте в любом html-файле. Список должен состоять из имён страниц (index, projects и т.д.). Меню навигации обычно представляет собой список ссылок, поэтому создание неупорядоченного списка семантически верно.</li>\n  <li>Создайте ссылки каждому элементу списка, ведущие на эти страницы.</li>\n  <li>Скопируйте созданное меню в каждую страницу.</li>\n  <li>На каждой странице удалите только ссылку, которая указывает на эту же страницу (на странице index.html удалить ссылку index и так далее). Дело в том, что, находясь на странице index.html, нам незачем видеть ссылку в меню на эту же страницу. С одной стороны, нам незачем ещё раз переходить на эту же страницу, с другой, такой приём помогает визуально определить, смотря на меню, в какой части сайта мы находимся.</li>\n</ol>\n<p>Когда закончите задание, посмотрите, как это должно выглядеть:</p>\n<p>\n  \n</p>\n<div class="notecard note" id="sect8">\n  <p><strong>Примечание:</strong> Если не удаётся сделать, или вы не уверены, что сделали верно, посмотрите наш вариант <a class="external" target="_blank">navigation-menu-marked-up</a>.</p>\n</div></div></section><section aria-labelledby="ссылки_электронной_почты"><h2 id="ссылки_электронной_почты"><a>Ссылки электронной почты</a></h2><div class="section-content"><p>Можно создавать ссылки или кнопки, которые при нажатии открывают новое исходящее сообщение электронной почты, а не ссылку на ресурс или страницу. Для этого используется элемент <a><code>&lt;a&gt;</code></a> и <code>mailto:</code> — <em>адрес почты</em>.</p>\n<p>Самыми простыми и часто используемыми формами <code>mailto:</code> являются <em>subject</em>, <em>cc</em>, <em>bcc</em> и <em>body</em>; дальше прописываем адрес электронной почты. Например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><a href="mailto:nowhere@mozilla.org">Отправить письмо для nowhere</a>\n</pre></div>\n<p>В результате получим ссылку вида: <a>Отправить письмо для nowhere</a>.</p>\n<p>Сам адрес электронной почты не является обязательным для заполнения. Если оставить это поле пустым (в поле <a><code>href</code></a> оставить только "mailto:"), откроется новое исходящее сообщение почтовой программой, в поле получателя будет пусто. Это можно использовать для кнопки "Поделиться".</p></div></section><section aria-labelledby="особенности_и_детали"><h3 id="особенности_и_детали"><a>Особенности и детали</a></h3><div class="section-content"><p>Помимо адреса электронной почты, вы можете предоставить другую информацию. Фактически, любые стандартные поля для отправки почты могут быть добавлены к указанному вами адресу <code>mailto</code>. Часто используемыми из них являются «subject», «cc» и «body» (которые не являются истинным полем заголовка, но позволяют указать дополнительную информацию для нового сообщения электронной почты). Каждое поле и его значение задаются в качестве условия запроса.</p>\n<p>Вот пример который включает cc(кому отправить копию сообщения, все получатели письма видят список тех кто это письмо получит), bcc(скрытый адрес получателя, никто из получателей не будет видеть полный список получателей письма), subject(тема письма) и body(текст сообщения):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><a href="mailto:nowhere@mozilla.org?cc=name2@rapidtables.com&amp;bcc=name3@rapidtables.com&amp;subject=The%20subject%20of%20the%20email &amp;body=The%20body%20of%20the%20email">\n  Send mail with cc, bcc, subject and body\n</a>\n</pre></div>\n<div class="notecard note" id="sect9">\n  <p><strong>Примечание:</strong> Значение каждого поля должно быть написано в URL-кодировке (то есть с непечатаемыми символами и пробелами <a class="external" target="_blank">percent-escaped</a>). Обратите внимание на знак вопроса (?) для разделения основного адреса и дополнительных полей, амперсанд (&amp;) для разделения каждого поля <code>mailto:</code> URL. Для этого используется стандартное описание URL запроса. Прочтите <a>о методе GET</a>, чтобы лучше понимать описание URL запроса.</p>\n</div>\n<p>Вот несколько примеров использования <code>mailto</code> URLs:</p>\n<ul>\n  <li><a>mailto:</a></li>\n  <li><a>mailto:nowhere@mozilla.org</a></li>\n  <li><a>mailto:nowhere@mozilla.org,nobody@mozilla.org</a></li>\n  <li><a>mailto:nowhere@mozilla.org?cc=nobody@mozilla.org</a></li>\n  <li><a>mailto:nowhere@mozilla.org?cc=nobody@mozilla.org&amp;subject=This%20is%20the%20subject</a></li>\n</ul></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Этой информации достаточно для создания ссылок! Вы вернётесь к ссылкам позже, когда начнёте изучать стили. Дальше вы рассмотрите семантику текста и более сложные и необычные возможности, которые будут полезны при создании контента сайта. В следующей главе будет рассматриваться продвинутое форматирование текста.</p></div></section>',
					works: [],
				},
				{
					title: 'Продвинутое форматирование текста',
					chapter: 1.8,
					content:
						'<header><h1>Продвинутое форматирование текста</h1></header><div class="section-content">\n<p>В HTML для форматирования текста есть много других элементов, не рассмотренных в статье <a>Основы редактирования текста в HTML</a>. Элементы, описанные в этой статье, не так часто используются, но всё же полезны для понимания (и это всё ещё будет не полный список элементов). Здесь вы узнаете о цитатах, списках описания, компьютерном коде и другом виде текстовых элементов, подстрочном и надстрочном тексте, контактной информации и других типах текста.</p>\n</div><section aria-labelledby="списки_описания"><h2 id="списки_описания"><a>Списки описания</a></h2><div class="section-content"><p>В основах HTML-текста мы рассмотрели, как <a>пометить привычные типы списков</a> в HTML, но мы не упоминали о третьем типе списка, с которым вы иногда сталкиваетесь, — списке описания. Цель этих списков состоит в том, чтобы пометить набор элементов и их связанных описаний, таких как термины и определения или вопросы и ответы.</p>\n<p>Давайте рассмотрим пример набора терминов и определений:</p>\n<pre compile="false" disable="true" language="markup">Солилоквий\nДраматическая речь, в которой персонаж разговаривает сам с собой, передавая свои ощущения и мысли публике (но не другим персонажам).\nМонолог\nДраматическая речь, в которой персонаж передаёт свои мысли публике и некоторым персонажам.\nРемарка\nВ драме: речь персонажа, при которой делается замечание с юмористическим или драматическим эффектом; чаще всего это чувства, мысли или предпосылки к чему-либо.\n</pre>\n<p>В списках описания используется иная оболочка, чем в других типах списков — <a><code>&lt;dl&gt;</code></a> (от <em>description list</em>); кроме того, каждый термин завёрнут в элемент <a><code>&lt;dt&gt;</code></a> (<em>description term</em> — термин для описания) и каждое определение завёрнуто в элемент <a><code>&lt;dd&gt;</code></a> (<em>description definition</em> — описание определения).</p>\n<p>Закончим разметку нашего примера:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><dl>\n  <dt>Солилоквий</dt>\n  <dd>\n    Драматическая речь, в которой персонаж разговаривает сам с собой, передавая\n    свои ощущения и мысли публике (но не другим персонажам).\n  </dd>\n  <dt>Монолог</dt>\n  <dd>\n    Драматическая речь, в которой персонаж передаёт свои мысли публике и\n    некоторым персонажам.\n  </dd>\n  <dt>Ремарка</dt>\n  <dd>\n    В драме: речь персонажа, при которой делается замечание с юмористическим или\n    драматическим эффектом; чаще всего это чувства, мысли или предпосылки к\n    чему-либо.\n  </dd>\n</dl>\n</pre></div>\n<p>В стилях браузера по умолчанию будут отображаться списки описания с некоторыми отступами от терминов. Стили, определённые на MDN, довольно близки к этому соглашению, но также вносят некоторые изменения:</p>\n<dl>\n  <dt id="солилоквий"><a>Солилоквий</a></dt>\n  <dd>\n    <p>Драматическая речь, в которой персонаж разговаривает сам с собой, передавая свои ощущения и мысли публике (но не другим персонажам).</p>\n  </dd>\n  <dt id="монолог"><a>Монолог</a></dt>\n  <dd>\n    <p>Драматическая речь, в которой персонаж передаёт свои мысли публике и некоторым персонажам.</p>\n  </dd>\n  <dt id="ремарка"><a>Ремарка</a></dt>\n  <dd>\n    <p>В драме: речь персонажа, при которой делается замечание с юмористическим или драматическим эффектом; чаще всего это чувства, мысли или предпосылки к чему-либо.</p>\n  </dd>\n</dl>\n<p>Заметьте, что разрешено давать одному элементу несколько описаний:</p>\n<dl>\n  <dt id="ремарка_2"><a>Ремарка</a></dt>\n  <dd>\n    <p>В драме: речь персонажа, при которой делается замечание с юмористическим или драматическим эффектом; чаще всего это чувства, мысли или предпосылки к чему-либо.</p>\n    <p>В письменности: отметка, примечание (<em>устар.</em>).</p>\n  </dd>\n</dl></div></section><section aria-labelledby="активное_обучение_разметка_набора_определений"><h3 id="активное_обучение_разметка_набора_определений"><a>Активное обучение: разметка набора определений</a></h3><div class="section-content"><p>Пришло время попробовать свои силы в списках описания: добавьте элементы в исходный текст в поле Ввод, чтобы он отображался как список описания в поле <em>Вывод</em>. Вы можете попробовать использовать свои собственные термины и описания, если хотите.</p>\n<p>Если вы ошиблись, то всегда можете начать снова, воспользовавшись кнопкой <em>Сбросить</em>. Если упражнение вызывает у вас затруднения, то нажмите кнопку <em>Показать решение</em>, чтобы увидеть правильный ответ.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h2>Результат</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из поля ввода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 100px; width: 95%">Бекон\nСкрепляет мир вокруг.\nЯйца\nСкрепляют пироги вокруг.\nКофе\nРычаг, движущий планетами.\nСветло-коричневого цвета.</input>\n\n<div class="playable-buttons">\n  <input id="reset" type="button" value="Сбросить">\n  <input id="solution" type="button" value="Показать решение">\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">html {\n  font-family: sans-serif;\n}\n\nh2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">var textarea = document.getElementById("code");\nvar reset = document.getElementById("reset");\nvar solution = document.getElementById("solution");\nvar output = document.querySelector(".output");\nvar code = textarea.value;\nvar userEntry = textarea.value;\n\nfunction updateCode() {\n  output.innerHTML = textarea.value;\n}\n\nreset.addEventListener("click", function () {\n  textarea.value = code;\n  userEntry = textarea.value;\n  solutionEntry = htmlSolution;\n  solution.value = "Показать решение";\n  updateCode();\n});\n\nsolution.addEventListener("click", function () {\n  if (solution.value === "Показать решение") {\n    textarea.value = solutionEntry;\n    solution.value = "Спрятать решение";\n  } else {\n    textarea.value = userEntry;\n    solution.value = "Показать решение";\n  }\n  updateCode();\n});\n\nvar htmlSolution =\n  "<dl>\n <dt>Бекон</dt>\n <dd>Скрепляет мир вокруг.</dd>\n <dt>Яйца</dt>\n <dd>Скрепляют пироги вокруг.</dd>\n <dt>Кофе</dt>\n <dd>Рычаг, движущий планетами.</dd>\n <dd>Светло-коричневого цвета.</dd>\n</dl>";\nvar solutionEntry = htmlSolution;\n\ntextarea.addEventListener("input", updateCode);\nwindow.addEventListener("load", updateCode);\n\n// stop tab key tabbing out of textarea and\n// make it write a tab at the caret position instead\n\ntextarea.onkeydown = function (e) {\n  if (e.keyCode === 9) {\n    e.preventDefault();\n    insertAtCaret("\t");\n  }\n\n  if (e.keyCode === 27) {\n    textarea.blur();\n  }\n};\n\nfunction insertAtCaret(text) {\n  var scrollPos = textarea.scrollTop;\n  var caretPos = textarea.selectionStart;\n\n  var front = textarea.value.substring(0, caretPos);\n  var back = textarea.value.substring(\n    textarea.selectionEnd,\n    textarea.value.length,\n  );\n  textarea.value = front + text + back;\n  caretPos = caretPos + text.length;\n  textarea.selectionStart = caretPos;\n  textarea.selectionEnd = caretPos;\n  textarea.focus();\n  textarea.scrollTop = scrollPos;\n}\n\n// Update the saved userCode every time the user updates the text area code\n\ntextarea.onkeyup = function () {\n  // We only want to save the state when the user code is being shown,\n  // not the solution, so that solution is not saved over the user code\n  if (solution.value === "Показать решение") {\n    userEntry = textarea.value;\n  } else {\n    solutionEntry = textarea.value;\n  }\n\n  updateCode();\n};\n</pre></div><div class="code-example" id="sect1"><div class="example-header" id="sect2"></div></div></div></section><section aria-labelledby="цитаты"><h2 id="цитаты"><a>Цитаты</a></h2><div class="section-content"><p>HTML также имеет функции, доступные для маркировки цитат; какой элемент вы используете, зависит от того, маркируете ли вы блочную или строчную цитату.</p></div></section><section aria-labelledby="блочные_цитаты"><h3 id="блочные_цитаты"><a>Блочные цитаты</a></h3><div class="section-content"><p>Если часть содержимого уровня блока (будь то абзац, несколько абзацев, список и т. д.) цитируется из другого источника, вы должны обернуть её внутри элемента <a><code>&lt;blockquote&gt;</code></a>, чтобы обозначить это, и указать URL-адрес, указывающий на источник цитаты, внутри атрибута <a><code>cite</code></a>.</p>\n<p>Например, следующая разметка берётся из страницы элемента MDN <strong><code>&lt;blockquote&gt;</code></strong>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  <strong>HTML-элемент<code>&lt;blockquote&gt;</code></strong> (от англ.\n  <em>HTML Block Quotation Element</em>) указывает на то, что заключённый в нём\n  текст является развёрнутой цитатой.\n</p>\n</pre></div>\n<p>Чтобы превратить её в блочную цитату, мы просто делаем следующее:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><blockquote cite="https://developer.mozilla.org/ru/docs/Web/HTML/Element/blockquote">\n  <p>\n    <strong>HTML-элемент<code>&lt;blockquote&gt;</code></strong> (от англ.\n    <em>HTML Block Quotation Element</em>) указывает на то, что заключённый в\n    нём текст является развёрнутой цитатой.\n  </p>\n</blockquote>\n</pre></div>\n<p>Стиль браузера по умолчанию будет отображать это как абзац с отступом, как индикатор того, что это цитата; абзац над цитатой призван продемонстрировать это. MDN делает это, но также добавляет некоторый дополнительный стиль:</p>\n<blockquote>\n  <p><strong>HTML-элемент &lt;blockquote&gt;</strong> (от англ. <em>Block Quotation</em>) указывает на то, что заключённый в нём текст является развёрнутой цитатой.</p>\n</blockquote></div></section><section aria-labelledby="строчные_цитаты"><h3 id="строчные_цитаты"><a>Строчные цитаты</a></h3><div class="section-content"><p>Строчные цитаты работают точно так же, за исключением того, что они используют элемент <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;q&gt;</code> <small>(en-US)</small></a>. Например, следующий кусочек разметки содержит цитату из страницы <code>&lt;q&gt;</code> MDN:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  Элемент цитирования — <code>&lt;q&gt;</code> —\n  <q cite="https://developer.mozilla.org/ru/docs/Web/HTML/Element/q">предназначен для коротких цитат, не требующих прерывания абзаца</q>.\n</p>\n</pre></div>\n<p>Стиль браузера по умолчанию будет отображать это как обычный текст, заключённый в кавычки для обозначения цитаты, например:</p>\n<p>Элемент цитирования — <code>&lt;q&gt;</code> — "предназначен для коротких цитат, не требующих прерывания абзаца".</p></div></section><section aria-labelledby="цитирование"><h3 id="цитирование"><a>Цитирование</a></h3><div class="section-content"><p>Содержание атрибута <a><code>cite</code></a> выглядит полезным, но, к сожалению, браузерам, программам чтения с экрана и т. д. оно на самом деле мало чем помогает. Невозможно заставить браузер отображать содержимое атрибута <code>cite</code> без написания собственного решения с использованием JavaScript или CSS. Если вы хотите, чтобы источник цитирования был доступен на странице, лучший способ его разметки - поместить элемент <a><code>&lt;cite&gt;</code></a> рядом с элементом цитаты (или внутри него). Это действительно будет означать то, что имя источника цитаты — то есть имя книги или имя человека, которое произвело цитату, — будет включено в текст. Нет причин, по которым вы не могли бы связать текст внутри <code>&lt;cite&gt;</code> с источником цитаты:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  Как указано в статье о\n  <a href="https://developer.mozilla.org/ru/docs/Web/HTML/Element/blockquote">\n    <cite>блочных цитатах</cite></a>:\n</p>\n\n<blockquote cite="https://developer.mozilla.org/ru/docs/Web/HTML/Element/blockquote">\n  <p>\n    <strong>HTML-элемент<code>&lt;blockquote&gt;</code></strong> (от англ.\n    <em>HTML Block Quotation Element</em>) указывает на то, что заключённый в\n    нем текст является развёрнутой цитатой.\n  </p>\n</blockquote>\n\n<p>\n  Элемент цитирования — <code>&lt;q&gt;</code> —\n  <q cite="https://developer.mozilla.org/ru/docs/Web/HTML/Element/q">предназначен для коротких цитат, не требующих прерывания абзаца</q>. --\n  <a href="https://developer.mozilla.org/ru/docs/Web/HTML/Element/q">\n    <cite>Строчные цитаты</cite></a>.\n</p>\n</pre></div>\n<p>По умолчанию цитаты стилизованы курсивом. Этот код можно увидеть в нашем примере <a class="external" target="_blank">quotations.html</a></p></div></section><section aria-labelledby="активное_обучение_кто_это_сказал"><h3 id="активное_обучение_кто_это_сказал"><a>Активное обучение: кто это сказал?</a></h3><div class="section-content"><p>Время для другого примера активного обучения! В этом примере мы хотели бы, чтобы вы совершили следующие действия:</p>\n<ol>\n  <li>Преобразуйте средний абзац в блочную цитату (<code>&lt;blockquote&gt;</code>), который включает атрибут <code>cite</code>.</li>\n  <li>Заверните часть третьего абзаца в строчную цитату, которая включает атрибут <code>cite</code>.</li>\n  <li>Включите элемент <code>&lt;cite&gt;</code> для каждой ссылки.</li>\n</ol>\n<p>Источники цитирования, которые вам потребуются:</p>\n<ul>\n  <li><a class="external" target="_blank">http://www.brainyquote.com/quotes/authors/c/confucius</a> — HTML-страница с цитатами Конфуция</li>\n  <li><a class="external" target="_blank">https://www.affirmationsforpositivethinking</a> — HTML-страница <em>The Need To Eliminate Negative Self Talk</em>.</li>\n</ul>\n<p>Если вы ошиблись, то всегда можете начать снова, воспользовавшись кнопкой <em>Сбросить</em>. Если упражнение вызывает у вас затруднения, то нажмите кнопку <em>Показать решение</em>, чтобы увидеть правильный ответ.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h2>Результат</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из поля ввода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 150px; width: 95%">&lt;p&gt;Здравствуйте и добро пожаловать на мою страницу мотивации! Конфуций как-то сказал:&lt;/p&gt;\n&lt;p&gt;Не важно, с какой скоростью ты движешься к своей цели, — главное не останавливаться.&lt;/p&gt;\n&lt;p&gt;Мне также нравится концепция позитивного мышления, и я считаю, каждый ощущает Необходимость избавления от негативного внутреннего разговора (как сказано в зарубежной статье Affirmations for Positive Thinking.)&lt;/p&gt;\n</input>\n\n<div class="playable-buttons">\n  <input id="reset" type="button" value="Сбросить">\n  <input id="solution" type="button" value="Показать решение">\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">html {\n  font-family: sans-serif;\n}\n\nh2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">var textarea = document.getElementById("code");\nvar reset = document.getElementById("reset");\nvar solution = document.getElementById("solution");\nvar output = document.querySelector(".output");\nvar code = textarea.value;\nvar userEntry = textarea.value;\n\nfunction updateCode() {\n  output.innerHTML = textarea.value;\n}\n\nreset.addEventListener("click", function () {\n  textarea.value = code;\n  userEntry = textarea.value;\n  solutionEntry = htmlSolution;\n  solution.value = "Показать решение";\n  updateCode();\n});\n\nsolution.addEventListener("click", function () {\n  if (solution.value === "Показать решение") {\n    textarea.value = solutionEntry;\n    solution.value = "Спрятать решение";\n  } else {\n    textarea.value = userEntry;\n    solution.value = "Показать решение";\n  }\n  updateCode();\n});\n\nvar htmlSolution =\n  \'<p>Здравствуйте и добро пожаловать на мою страницу мотивации! <a href="http://www.brainyquote.com/quotes/authors/c/confucius.html"><cite>Конфуций</cite></a> как-то сказал:</p>\n\n<blockquote cite="http://www.brainyquote.com/quotes/authors/c/confucius.html">\n <p>Не важно, с какой скоростью ты движешься к своей цели, — главное не останавливаться.</p>\n</blockquote>\n\n<p>Мне также нравится концепция позитивного мышления, и я считаю, каждый ощущает <q cite="http://www.affirmationsforpositivethinking.com/index.htm">Необходимость избавления от негативного внутреннего разговора</q> (как сказано в зарубежной статье <a href="http://www.affirmationsforpositivethinking.com/index.htm"><cite>Affirmations for Positive Thinking</cite></a>.)</p>\';\nvar solutionEntry = htmlSolution;\n\ntextarea.addEventListener("input", updateCode);\nwindow.addEventListener("load", updateCode);\n\n// stop tab key tabbing out of textarea and\n// make it write a tab at the caret position instead\n\ntextarea.onkeydown = function (e) {\n  if (e.keyCode === 9) {\n    e.preventDefault();\n    insertAtCaret("\t");\n  }\n\n  if (e.keyCode === 27) {\n    textarea.blur();\n  }\n};\n\nfunction insertAtCaret(text) {\n  var scrollPos = textarea.scrollTop;\n  var caretPos = textarea.selectionStart;\n\n  var front = textarea.value.substring(0, caretPos);\n  var back = textarea.value.substring(\n    textarea.selectionEnd,\n    textarea.value.length,\n  );\n  textarea.value = front + text + back;\n  caretPos = caretPos + text.length;\n  textarea.selectionStart = caretPos;\n  textarea.selectionEnd = caretPos;\n  textarea.focus();\n  textarea.scrollTop = scrollPos;\n}\n\n// Update the saved userCode every time the user updates the text area code\n\ntextarea.onkeyup = function () {\n  // We only want to save the state when the user code is being shown,\n  // not the solution, so that solution is not saved over the user code\n  if (solution.value === "Показать решение") {\n    userEntry = textarea.value;\n  } else {\n    solutionEntry = textarea.value;\n  }\n\n  updateCode();\n};\n</pre></div><div class="code-example" id="sect3"><div class="example-header" id="sect4"></div></div></div></section><section aria-labelledby="аббревиатуры"><h2 id="аббревиатуры"><a>Аббревиатуры</a></h2><div class="section-content"><p>Другой довольно часто встречающийся элемент, который вы будете часто встречать в Интернете, — это <a><code>&lt;abbr&gt;</code></a>, используемый для обёртывания аббревиатур или акронимов и обеспечивающий полную расшифровку сокращения (с помощью атрибута <a><code>title</code></a>.)</p>\n<p>Давайте рассмотрим несколько примеров:</p>\n<pre compile="false" disable="true" language="markup"><p>Мы используем <abbr title="Hypertext Markup Language">HTML</abbr> для структурирования наших веб-документов.</p>\n\n<p>Я думаю, <abbr title="Почтенный">Почт.</abbr> Грин сделал это на кухне с бензопилой.</p>\n</pre>\n<p>Они будут выглядеть примерно так (расшифровка появится в подсказке при наведении курсора мыши на сокращение):</p>\n<p>Мы используем HTML для структурирования наших веб-документов.</p>\n<p>Я думаю, Почт. Грин сделал это на кухне с бензопилой.</p>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> Существует ещё один элемент <a><code>&lt;acronym&gt;</code></a>, который в основном делает то же самое, что и <code>&lt;abbr&gt;</code>, но предназначен специально для акронимов (тип аббревиатур). Это, однако, было излишним, — он не поддерживается в браузерах на том же уровне, что <code>&lt;abbr&gt;</code>, и имеет такую же функциональность, поэтому считается бессмысленным иметь оба. Просто используйте <code>&lt;abbr&gt;</code>.</p>\n</div></div></section><section aria-labelledby="активное_обучение_выделение_аббревиатуры"><h3 id="активное_обучение_выделение_аббревиатуры"><a>Активное обучение: выделение аббревиатуры</a></h3><div class="section-content"><p>В рамках этого простого упражнения мы хотели бы, чтобы вы просто указали аббревиатуру. Вы можете использовать наш образец ниже или заменить его на свой собственный.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h2>Результат</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из поля ввода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 50px; width: 95%">&lt;p&gt;Безусловно, NASA занимается классными вещами.&lt;/p&gt;\n</input>\n\n<div class="playable-buttons">\n  <input id="reset" type="button" value="Сбросить">\n  <input id="solution" type="button" value="Показать решение">\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">html {\n  font-family: sans-serif;\n}\n\nh2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">var textarea = document.getElementById("code");\nvar reset = document.getElementById("reset");\nvar solution = document.getElementById("solution");\nvar output = document.querySelector(".output");\nvar code = textarea.value;\nvar userEntry = textarea.value;\n\nfunction updateCode() {\n  output.innerHTML = textarea.value;\n}\n\nreset.addEventListener("click", function () {\n  textarea.value = code;\n  userEntry = textarea.value;\n  solutionEntry = htmlSolution;\n  solution.value = "Показать решение";\n  updateCode();\n});\n\nsolution.addEventListener("click", function () {\n  if (solution.value === "Показать решение") {\n    textarea.value = solutionEntry;\n    solution.value = "Спрятать решение";\n  } else {\n    textarea.value = userEntry;\n    solution.value = "Показать решение";\n  }\n  updateCode();\n});\n\nvar htmlSolution =\n  \'<p>Безусловно, <abbr title="National Aeronautics and Space Administration">NASA</abbr> занимается классными вещами.</p>\';\nvar solutionEntry = htmlSolution;\n\ntextarea.addEventListener("input", updateCode);\nwindow.addEventListener("load", updateCode);\n\n// stop tab key tabbing out of textarea and\n// make it write a tab at the caret position instead\n\ntextarea.onkeydown = function (e) {\n  if (e.keyCode === 9) {\n    e.preventDefault();\n    insertAtCaret("\t");\n  }\n\n  if (e.keyCode === 27) {\n    textarea.blur();\n  }\n};\n\nfunction insertAtCaret(text) {\n  var scrollPos = textarea.scrollTop;\n  var caretPos = textarea.selectionStart;\n\n  var front = textarea.value.substring(0, caretPos);\n  var back = textarea.value.substring(\n    textarea.selectionEnd,\n    textarea.value.length,\n  );\n  textarea.value = front + text + back;\n  caretPos = caretPos + text.length;\n  textarea.selectionStart = caretPos;\n  textarea.selectionEnd = caretPos;\n  textarea.focus();\n  textarea.scrollTop = scrollPos;\n}\n\n// Update the saved userCode every time the user updates the text area code\n\ntextarea.onkeyup = function () {\n  // We only want to save the state when the user code is being shown,\n  // not the solution, so that solution is not saved over the user code\n  if (solution.value === "Показать решение") {\n    userEntry = textarea.value;\n  } else {\n    solutionEntry = textarea.value;\n  }\n\n  updateCode();\n};\n</pre></div><div class="code-example" id="sect6"><div class="example-header" id="sect7"></div></div></div></section><section aria-labelledby="разметка_контактных_данных"><h2 id="разметка_контактных_данных"><a>Разметка контактных данных</a></h2><div class="section-content"><p>HTML имеет элемент для разметки контактных данных — <a><code>&lt;address&gt;</code></a>. Он просто обёртывает ваши контактные данные, например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><address>\n  <p>Крис Миллс, Манчестер, Жестокий Север, РФ</p>\n</address>\n</pre></div>\n<p>Однако следует помнить, что элемент <a><code>&lt;address&gt;</code></a> предназначен для разметки контактных данных человека, который написал HTML-документ, а не <em>любого</em> адреса. Таким образом, написанное выше было бы корректным только в том случае, если бы Крис написал документ, на котором появляется разметка. Обратите внимание, что следующее также подойдёт:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><address>\n  <p>Автор страницы — <a href="../authors/chris-mills/">Крис Миллс</a>.</p>\n</address>\n</pre></div></div></section><section aria-labelledby="верхний_и_нижний_индекс"><h2 id="верхний_и_нижний_индекс"><a>Верхний и нижний индекс</a></h2><div class="section-content"><p>Иногда вам понадобится использовать надстрочный или подстрочный индекс при разметке таких вещей, как даты, химические формулы и математические уравнения, чтобы они имели правильное представление. Элементы <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;sup&gt;</code> <small>(en-US)</small></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;sub&gt;</code> <small>(en-US)</small></a> созданы для таких ситуаций.</p>\n<p>Приведём пример:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Я просыпаюсь в 6<sup>35</sup> часов утра.</p>\n<p>\n  Химическая формула кофеина:\n  C<sub>8</sub>H<sub>10</sub>N<sub>4</sub>O<sub>2</sub>.\n</p>\n<p>Если x<sup>2</sup> равно 9, x должен равняться 3 или -3.</p>\n</pre></div>\n<p>Результат этого кода выглядит следующим образом:</p>\n<p>Я просыпаюсь в 635 часов утра.</p>\n<p>Химическая формула кофеина: C8H10N4O2.</p>\n<p>Если x2 равно 9, x должен равняться 3 или -3.</p></div></section><section aria-labelledby="представление_компьютерного_кода"><h2 id="представление_компьютерного_кода"><a>Представление компьютерного кода</a></h2><div class="section-content"><p>Существует несколько элементов для маркировки компьютерного кода с использованием HTML:</p>\n<ul>\n  <li><a><code>&lt;code&gt;</code></a>: Для разметки общих частей компьютерного кода.</li>\n  <li><a><code>&lt;pre&gt;</code></a>: Для сохранения пробелов (как правило, кодовых блоков) — если вы используете отступы или лишние пробелы внутри вашего текста, браузеры будут игнорировать его, и вы не увидите его на вашей отображаемой странице; если вы поместите текст в теги <code>&lt;pre&gt;&lt;/pre&gt;</code>, то ваши пробелы будут отображаться идентично тому, как вы видите текст в редакторе.</li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;var&gt;</code> <small>(en-US)</small></a>: Для конкретной маркировки имён переменных.</li>\n  <li><a><code>&lt;kbd&gt;</code></a>: Для маркировки ввода с клавиатуры (и других типов).</li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;samp&gt;</code> <small>(en-US)</small></a>: Для маркировки вывода компьютерной программы.</li>\n</ul>\n<p>Давайте рассмотрим несколько примеров. Вы должны попробовать поиграть с ними (захватите копию нашего файла <a class="external" target="_blank">other-semantics.html</a>):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><pre><code>var para = document.querySelector(\'p\');\n\npara.onclick = function() {\n  alert(\'Owww, stop poking me!\');\n}</code></pre>\n\n<p>\n  You shouldn\'t use presentational elements like <code>&lt;font&gt;</code> and\n  <code>&lt;center&gt;</code>.\n</p>\n\n<p>\n  In the above JavaScript example, <var>para</var> represents a paragraph\n  element.\n</p>\n\n<p>Select all the text with <kbd>Ctrl</kbd>/<kbd>Cmd</kbd> + <kbd>A</kbd>.</p>\n\n<pre>$ <kbd>ping mozilla.org</kbd>\n<samp>PING mozilla.org (63.245.215.20): 56 data bytes\n64 bytes from 63.245.215.20: icmp_seq=0 ttl=40 time=158.233 ms</samp></pre>\n</pre></div>\n<p>Вышеприведённый код будет выглядеть так:</p><div class="code-example" id="sect8"><div class="example-header" id="sect9"></div></div></div></section><section aria-labelledby="разметка_времени_и_даты"><h2 id="разметка_времени_и_даты"><a>Разметка времени и даты</a></h2><div class="section-content"><p>HTML также содержит элемент <a><code>&lt;time&gt;</code></a> для отметки времени и дат в машиночитаемом формате. Например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><time datetime="2020-01-20">20 Января 2020</time>\n</pre></div>\n<p>Почему это полезно? Ну, есть много разных способов, которыми люди записывают даты. Вышеуказанная дата может быть записана как:</p>\n<ul>\n  <li>20 Января 2020</li>\n  <li>20-ое Января 2020</li>\n  <li>Янв 20 2020</li>\n  <li>20/01/20</li>\n  <li>01/20/20</li>\n  <li>20e Janvier 2020</li>\n  <li>2020 年 1 月 20 日</li>\n  <li>и другое...</li>\n</ul>\n<p>Но эти разные формы не могут быть легко распознаны компьютерами — что, если вы хотите автоматически захватить даты всех событий на странице и вставить их в календарь? Элемент <a><code>&lt;time&gt;</code></a> позволяет прикрепить к этой цели однозначное машиночитаемое время / дату.</p>\n<p>В приведённом выше базовом примере приведена простая машиносчитываемая дата, но есть много других возможных вариантов, например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><!-- Стандартная дата -->\n<time datetime="2020-01-20">20 Января 2020</time>\n<!-- Только год и месяц -->\n<time datetime="2020-01">Январь 2020</time>\n<!-- Только месяц и день -->\n<time datetime="01-20">20 Января</time>\n<!-- Только время, часы и минуты -->\n<time datetime="19:30">19:30</time>\n<!-- Также вы можете отобразить секунды и миллисекунды! -->\n<time datetime="19:30:01.856">19:30:01.856</time>\n<!-- Дата и время -->\n<time datetime="2020-01-20T19:30">7.30pm, 20 Января 2020</time>\n<!-- Дата и время со смещением по часовому поясу -->\n<time datetime="2020-01-20T19:30+01:00">7.30pm, 20 Января 2020, — это 8.30pm во Франции.</time>\n<!-- Вызов номера недели -->\n<time datetime="2020-W04">Четвёртая неделя 2020</time>\n</pre></div></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>На этом мы подошли к концу нашего изучения семантики текста HTML. Имейте в виду, что то, что вы видели во время этого курса, не является исчерпывающим списком текстовых элементов HTML. Мы попытались охватить основные из них, с которыми вы, скорее всего, столкнётесь в практической деятельности или, по крайней мере, сочтёте их интересными. Чтобы найти больше элементов HTML, вы можете взглянуть на нашу ссылку на <a>Элемент</a>. В следующей статье мы рассмотрим элементы HTML, которые вы будете использовать для структурирования различных частей HTML-документа.</p></div></section>',
					works: [],
				},
				{
					title: 'Структура документа и веб-сайта',
					chapter: 1.9,
					content:
						'<header><h1>Структура документа и веб-сайта</h1></header><div class="section-content">\n<p>В дополнение к определению отдельных частей вашей страницы (таких как «абзац» или «изображение»), <a>HTML</a> также содержит ряд элементов блочного уровня, используемых для определения областей вашего веб-сайта (такие как «заголовок», «навигационное меню», «колонка основного содержимого»). В этой статье рассматривается, как планировать базовую структуру сайта и писать HTML для представления этой структуры.</p>\n</div><section aria-labelledby="основные_составляющие_документа"><h2 id="основные_составляющие_документа"><a>Основные составляющие документа</a></h2><div class="section-content"><p>Веб-страницы могут и будут отличаться друг от друга, но все они, преимущественно, состоят из аналогичных стандартных компонентов, если только страница не отображает полноэкранное видео или игру, не является частью какого-либо художественного проекта или просто плохо структурирована:</p>\n<dl>\n  <dt id="заголовок_колонтитул"><a>Заголовок (колонтитул)</a></dt>\n  <dd>\n    <p>Обычно это большая полоса вверху страницы, с крупным заголовком и / или логотипом. Здесь указывается общая информация о веб-сайте, не меняющаяся от страницы к странице.</p>\n  </dd>\n  <dt id="навигационное_меню"><a>Навигационное меню</a></dt>\n  <dd>\n    <p>Ссылки на основные разделы сайта; обычно в виде кнопок, ссылок или вкладок. Также как и заголовок, навигация остаётся неизменной на всех страницах сайта — наличие непоследовательной навигации на вашем сайте запутает и разочарует пользователей. Многие веб-дизайнеры считают панель навигации частью заголовка, а не отдельным компонентом, но это не является обязательным требованием; на самом деле, некоторые также утверждают, что их разделение на отдельные компоненты улучшает <a>доступность</a>, поскольку раздельная структура будет понятнее для людей, пользующихся считывателями экрана.</p>\n  </dd>\n  <dt id="основное_содержимое"><a>Основное содержимое</a></dt>\n  <dd>\n    <p>Большая область в центре страницы, содержащая, в основном, уникальный контент данной веб-страницы, например видео, которое вы хотите посмотреть, или рассказ, который вы читаете, или карту, которую вы хотите просмотреть, или заголовки новостей и т. д. Это одна из частей сайта, которая определённо будет меняться от страницы к странице!</p>\n  </dd>\n  <dt id="боковая_панель"><a>Боковая панель</a></dt>\n  <dd>\n    <p>Как правило, содержит некоторую второстепенную информацию, ссылки, цитаты, рекламу и т.д. Обычно она относится к содержимому в основном контенте (например, на странице со статьёй, боковая панель может содержать биографию автора или ссылки на связанные статьи), но в некоторых случаях здесь размещают и другие элементы, например, вторичную навигационную систему.</p>\n  </dd>\n  <dt id="нижний_колонтитул_футер"><a>Нижний колонтитул (футер)</a></dt>\n  <dd>\n    <p>Полоса в нижней части страницы, которая обычно содержит уведомления об авторских правах или контактную информацию. Это место для размещения общей информации (например, заголовка), но обычно эта информация не является критичной или вторична для самого веб-сайта. Нижний колонтитул также иногда используется для <a>SEO</a> целей, предоставляя ссылки для быстрого доступа к популярному контенту.</p>\n  </dd>\n</dl>\n<p>"Типичный веб-сайт" может быть структурирован примерно так:</p>\n<p>\n  \n</p></div></section><section aria-labelledby="html_для_структурирования_содержимого"><h2 id="html_для_структурирования_содержимого"><a>HTML для структурирования содержимого</a></h2><div class="section-content"><p>Пример, показанный сверху, не красив и примитивен, но идеально подходит для иллюстрирования типичного макета веб-сайта. У некоторых веб-сайтов больше колонок, некоторые — более сложные, но идею вы поняли. С правильным CSS вы могли бы использовать практически любые элементы для обёртывания различных разделов и стилизовать их так, как вам хочется, но, как обсуждалось ранее, нам нужно уважать семантику и <strong>использовать правильный элемент для правильной работы</strong>.</p>\n<p>Это потому, что визуальные эффекты — это ещё не самое главное. Мы используем цвет и размер шрифта для привлечения внимания посетителей к наиболее полезным частям содержимого, такого как навигационное меню или связанные ссылки, но что насчёт людей со слабым зрением, к примеру, для которых концепция "розового" и "большого шрифта" не будет полезной?</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Люди с дальтонизмом составляют около <a class="external" target="_blank">8% мирового населения</a>. Слепые и слабовидящие люди составляют примерно 4-5% населения мира (в 2012 году в мире было <a class="external" target="_blank">285 миллионов таких людей</a>, а общая численность населения составляла <a class="external" target="_blank">около 7 миллиардов</a>).</p>\n</div>\n<p>В своём HTML-коде вы можете размечать разделы содержимого сайта на основе их <em>функциональности</em> — использовать элементы, которые представляют разделы контента, описанные выше, а вспомогательные технологии, такие как программы чтения с экрана, смогут распознавать эти элементы и помогать в таких задачах, как "найти основную навигацию" или "найти основное содержимое". Как мы упоминали ранее в ходе курса, существует ряд <a>последствий неиспользования правильной структуры элементов и семантики для правильной работы.</a></p>\n<p>Для реализации такой семантической разметки HTML предоставляет выделенные теги, которые можно использовать для создания таких разделов, например:</p>\n<ul>\n  <li><strong>Заголовок:</strong> <a><code>&lt;header&gt;</code></a>.</li>\n  <li><strong>Навигационное меню:</strong> <a><code>&lt;nav&gt;</code></a>.</li>\n  <li><strong>Основное содержимое:</strong> <a><code>&lt;main&gt;</code></a>, с различными подразделами содержимого, представленными элементами <a><code>&lt;article&gt;</code></a>, <a><code>&lt;section&gt;</code></a> и <a><code>&lt;div&gt;</code></a>.</li>\n  <li><strong>Боковая панель:</strong> <a><code>&lt;aside&gt;</code></a>, обычно располагается внутри <a><code>&lt;main&gt;</code></a>.</li>\n  <li><strong>Нижний колонтитул:</strong> <a><code>&lt;footer&gt;</code></a>.</li>\n</ul></div></section><section aria-labelledby="активное_обучение_исследование_кода_для_нашего_примера"><h3 id="активное_обучение_исследование_кода_для_нашего_примера"><a>Активное обучение: исследование кода для нашего примера</a></h3><div class="section-content"><p>Наш пример, представленный выше, содержит следующий код (Вы также можете <a class="external" target="_blank">найти пример в нашем репозитории Github</a>). Мы хотели бы, чтобы вы взглянули на приведённый выше пример, а затем просмотрели код ниже, чтобы узнать, из каких частей он состоит.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n\n  \n    <meta charset="utf-8">\n\n    <title>Заголовок моей страницы</title>\n    <link href="https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300|Sonsie+One" rel="stylesheet" type="text/css">\n    <link rel="stylesheet" href="style.css">\n\n    <!-- следующие 3 строки нужны для корректного отображения семантических элементов HTML5 в старых версиях Internet Explorer-->\n    <!--[if lt IE 9]>\n      <script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.js"></script>\n    <![endif]-->\n  \n\n  \n    <!-- Вот наш главный заголовок, который используется на всех страницах нашего веб-сайта -->\n\n    <header>\n      <h1>Заголовок</h1>\n    </header>\n\n    <nav>\n      <ul>\n        <li><a href="#">Домашняя страница</a></li>\n        <li><a href="#">Наша команда</a></li>\n        <li><a href="#">Проекты</a></li>\n        <li><a href="#">Контакты</a></li>\n      </ul>\n\n      <!-- Форма поиска — это ещё один распространённый нелинейный способ навигации по веб-сайту. -->\n\n      <form>\n        <input type="search" name="q" placeholder="Search query">\n        <input type="submit" value="Go!">\n      </form>\n    </nav>\n\n    <!-- Здесь основное содержимое нашей страницы -->\n    <main>\n      <!-- Она содержит статью -->\n      <article>\n        <h2>Заголовок статьи</h2>\n\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Donec a diam\n          lectus. Set sit amet ipsum mauris. Maecenas congue ligula as quam\n          viverra nec consectetur ant hendrerit. Donec et mollis dolor. Praesent\n          et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt\n          congue enim, ut porta lorem lacinia consectetur.\n        </p>\n\n        <h3>Подраздел</h3>\n\n        <p>\n          Donec ut librero sed accu vehicula ultricies a non tortor. Lorem ipsum\n          dolor sit amet, consectetur adipisicing elit. Aenean ut gravida lorem.\n          Ut turpis felis, pulvinar a semper sed, adipiscing id dolor.\n        </p>\n\n        <p>\n          Pelientesque auctor nisi id magna consequat sagittis. Curabitur\n          dapibus, enim sit amet elit pharetra tincidunt feugiat nist imperdiet.\n          Ut convallis libero in urna ultrices accumsan. Donec sed odio eros.\n        </p>\n\n        <h3>Ещё один подраздел</h3>\n\n        <p>\n          Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum\n          soclis natoque penatibus et manis dis parturient montes, nascetur\n          ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at sem\n          facilisis semper ac in est.\n        </p>\n\n        <p>\n          Vivamus fermentum semper porta. Nunc diam velit, adipscing ut\n          tristique vitae sagittis vel odio. Maecenas convallis ullamcorper\n          ultricied. Curabitur ornare, ligula semper consectetur sagittis, nisi\n          diam iaculis velit, is fringille sem nunc vet mi.\n        </p>\n      </article>\n\n      <!-- Дополнительный контент также может быть вложен в основной контент -->\n      <aside>\n        <h2>Связанные темы</h2>\n\n        <ul>\n          <li><a href="#">Мне нравится стоять рядом с берегом моря</a></li>\n          <li><a href="#">&gt;Мне нравится стоять рядом с морем</a></li>\n          <li><a href="#">Даже на севере Англии</a></li>\n          <li><a href="#">Здесь не перестаёт дождь</a></li>\n          <li><a href="#">Лаааадно...</a></li>\n        </ul>\n      </aside>\n    </main>\n\n    <!-- И вот наш главный нижний колонтитул, который используется на всех страницах нашего веб-сайта -->\n\n    <footer>\n      <p>©Авторские права никому не принадлежат, 2050. Все права защищены.</p>\n    </footer>\n  \n\n</pre></div>\n<p>Потратьте некоторое время, чтобы просмотреть код и понять его — комментарии внутри кода также помогут вам в этом. Мы не просим вас делать ничего больше в этом уроке, потому что ключ к пониманию макета документа заключается в написании осмысленной структуры HTML, а затем её развёртывании с помощью CSS. Мы подождём, пока вы не начнёте изучать CSS-макет как часть темы CSS.</p></div></section><section aria-labelledby="подробнее_об_элементах_html_макета"><h2 id="подробнее_об_элементах_html_макета"><a>Подробнее об элементах HTML макета</a></h2><div class="section-content"><p>Полезно понять общий смысл всех структурных элементов HTML — это то, над чем вы будете работать постепенно, когда начнёте получать больше опыта с веб-разработкой. Вы можете ознакомиться с деталями, прочитав статью <a>HTML-элементы</a>. Пока что это основные определения, которые вы должны попытаться понять:</p>\n<ul>\n  <li><a><code>&lt;main&gt;</code></a> предназначен для содержимого, <em>уникального для этой страницы</em>. Используйте <code>&lt;main&gt;</code> только <em>один</em> раз на странице и размещайте прямо внутри <a><code>&lt;body&gt;</code></a>. В идеале он не должен быть вложен в другие элементы.</li>\n  <li><a><code>&lt;article&gt;</code></a> окружает блок связанного содержимого, который имеет смысл сам по себе без остальной части страницы (например, один пост в блоге).</li>\n  <li><a><code>&lt;section&gt;</code></a> подобен <code>&lt;article&gt;</code>, но больше подходит для группирования одной части страницы, которая представляет собой одну часть функциональности (например, мини-карту или набор заголовков статей и сводок). Считается хорошей практикой начинать каждый раздел с <a>заголовка</a>. Также обратите внимание, что в зависимости от контекста вы можете разбить <code>&lt;article&gt;</code> на несколько <code>&lt;section&gt;</code> или, наоборот, <code>&lt;section&gt;</code> на несколько <code>&lt;article&gt;</code>.</li>\n  <li><a><code>&lt;aside&gt;</code></a> содержит контент, который не имеет прямого отношения к основному содержимому, но может содержать дополнительную информацию, косвенно связанную с ним (словарь, биография автора, связанные ссылки и т. д.).</li>\n  <li><a><code>&lt;header&gt;</code></a> представляет собой группу вводного содержимого. Если он дочерний элемент <a><code>&lt;body&gt;</code></a>, то он определяет глобальный заголовок веб-страницы, но если он дочерний элемент <a><code>&lt;article&gt;</code></a> или <a><code>&lt;section&gt;</code></a>, то определяет конкретный заголовок для этого раздела (постарайтесь не путать его с <a>titles и headings</a>).</li>\n  <li><a><code>&lt;nav&gt;</code></a> содержит основные функции навигации для страницы. Так же часто в нем можно увидеть логотип и / или название сайта или компании. Вторичные ссылки и т. д. не входят в навигацию.</li>\n  <li><a><code>&lt;footer&gt;</code></a> представляет собой группу конечного контента для страницы.</li>\n</ul></div></section><section aria-labelledby="несемантические_обёртки"><h3 id="несемантические_обёртки"><a>Несемантические обёртки</a></h3><div class="section-content"><p>Иногда вы будете сталкиваться с ситуацией, когда вы не можете найти идеальный семантический элемент, чтобы сгруппировать некоторые элементы вместе или обернуть некоторый контент. Иногда вам просто нужно будет сгруппировать несколько элементов вместе, чтобы применить к ним, как к единой сущности, <a>CSS</a> или <a>JavaScript</a>. Для таких случаев в HTML есть элементы <a><code>&lt;div&gt;</code></a> и <a><code>&lt;span&gt;</code></a>. Вам следует использовать их с подходящим значением атрибута <a><code>class</code></a> или <a><code>id</code></a>, чтобы можно было легко получить к ним доступ.</p>\n<p><a><code>&lt;span&gt;</code></a> — это строчный несемантический элемент, который стоит использовать только если вы не можете подобрать более подходящий семантический текстовый элемент для обёртывания контента или если не хотите добавлять какие-либо конкретные значения. Например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  Пьяный Король возвратился в свою комнату в 01:00 и всё никак не мог войти в\n  дверь: хмель мешал\n  <span class="editor-note">[Примечание редактора: В этот момент свет на сцене должен быть\n    приглушён]</span>.\n</p>\n</pre></div>\n<p>В этом примере примечание редактора просто сообщает дополнительные пожелания режиссёру пьесы. В нем нет особого семантического значения. Для слабовидящих пользователей, возможно, примечание будет отделено от основного содержимого с помощью CSS.</p>\n<p><a><code>&lt;div&gt;</code></a> — это блочный несемантический элемент, который следует использовать только если вы не можете подобрать более подходящий семантический блочный элемент или если не хотите добавлять какие-либо конкретные значения. Например, представьте виджет корзины в интернет-магазине, который вы можете открыть в любой момент нахождения на сайте:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="shopping-cart">\n  <h2>Корзина</h2>\n  <ul>\n    <li>\n      <p>\n        <a href=""><strong>Silver earrings</strong></a>: $99.95.\n      </p>\n      <img src="../products/3333-0985/thumb.png" alt="Серебряные серьги">\n    </li>\n    <li>...</li>\n  </ul>\n  <p>Итого: $237.89</p>\n</div>\n</pre></div>\n<p>Ему не подходит <code>&lt;aside&gt;</code>, поскольку это не обязательно относится к основному содержимому страницы (Вы хотите, чтобы его можно было просматривать из любого места). Также не подходит и <code>&lt;section&gt;</code>, т. к. это не часть основного содержимого страницы. Поэтому <code>&lt;div&gt;</code> подходит в этом случае. Мы включили заголовок в качестве указателя, чтобы помочь пользователям программ чтения с экрана в его поиске.</p>\n<div class="notecard warning" id="sect2">\n  <p><strong>Предупреждение:</strong> <strong>Внимание</strong>: <code>div</code> настолько просто использовать, что легко переборщить. Поскольку они не несут никакого семантического значения, они просто загромождают ваш HTML-код. Старайтесь использовать их только тогда, когда нет лучшего семантического решения, и постарайтесь свести их использование к минимуму, иначе вам будет трудно обновлять и поддерживать ваши документы.</p>\n</div></div></section><section aria-labelledby="перенос_строки_и_горизонтальный_разделитель"><h3 id="перенос_строки_и_горизонтальный_разделитель"><a>Перенос строки и горизонтальный разделитель</a></h3><div class="section-content"><p>Два элемента, которые вы будете периодически использовать или захотите узнать о них: <a><code>&lt;br&gt;</code></a> и <a><code>&lt;hr&gt;</code></a>:</p>\n<p><code>&lt;br&gt;</code> создаёт разрыв строки в абзаце, и это единственный способ изменить жёсткую структуру в ситуации, когда вам нужна серия фиксированных коротких строк, например, в почтовом адресе или стихотворении. Пример:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  Жила-была девчушка Нелл,<br>\n  Любившая писать HTML:<br>\n  Её семантика ужасна была — <br>\n  Она и сама прочитать ничего не могла.\n</p>\n</pre></div>\n<p>Без элемента <code>&lt;br&gt;</code> абзац разместится в одну длинную линию (как было сказано ранее, <a>HTML игнорирует переносы строк</a>), а с ним в коде — разметка будет выглядеть следующим образом:</p>\n<p>\n  Жила-была девчушка Нелл,\n  Любившая писать HTML:\n  Её семантика ужасна была —\n  Она и сама прочитать ничего не могла.\n</p>\n<p><code>&lt;hr&gt;</code> создаёт горизонтальный разделитель в документе, это означает тематическое изменение текста (например, изменение темы или сцены). Визуально он просто похож на горизонтальную линию. В качестве примера:</p>\n<pre compile="false" disable="true" language="markup"><p>Рон был зажат в углу адскими тварями. Он боялся, но твёрдо решил защитить своих друзей, поднял свою волшебную палочку и приготовился к битве, надеясь, что справится со своим несчастьем.</p>\n<hr>\n<p>Тем временем Гарри сидел дома с раскрытым указом и размышлял о том, когда выйдут новые серии спин-оффов; в это время зачарованное письмо пархнуло в окно и приземлилось у него на коленях. Он прочитал его и подскочил на ноги; он подумал: "Думаю, самое время вернуться к работе".</p>\n</pre>\n<p>Будет выглядеть примерно так:</p>\n<p>Рон был зажат в углу адскими тварями. Он боялся, но твёрдо решил защитить своих друзей, поднял свою волшебную палочку и приготовился к битве, надеясь, что справится со своим несчастьем.</p>\n<hr>\n<p>Тем временем Гарри сидел дома с раскрытым указом и размышлял о том, когда выйдут новые серии спин-оффов; в это время зачарованное письмо пархнуло в окно и приземлилось у него на коленях. Он прочитал его и подскочил на ноги; он подумал: "Думаю, самое время вернуться к работе".</p></div></section><section aria-labelledby="планирование_простого_веб-сайта"><h2 id="планирование_простого_веб-сайта"><a>Планирование простого веб-сайта</a></h2><div class="section-content"><p>Когда вы уже спланировали содержание одной веб-страницы, следующий логический шаг — продумать содержание всего веб-сайта: какие страницы нужны, как они будут устроены и связаны друг с другом для лучшего восприятия пользователем. Это называется <a>Information architecture</a>. В большом, сложном веб-сайте на планирование может уходить много времени, однако спроектировать простой веб-сайт из нескольких страниц может быть очень легко и весело!</p>\n<ol>\n  <li>Имейте в виду, что у вас будет несколько элементов, общих для большинства (если не всех) страниц — например, меню навигации и содержимого нижнего колонтитула. Например, для сайта компании хорошая идея разместить контактные данные в нижнем колонтитуле на каждой странице. Составьте список элементов, общих для всех страниц. \n    \n  </li>\n  <li>Теперь набросайте структуру страниц (можно взять за образец наш простой дизайн, приведённый раннее). Что находится в этих блоках?\n    \n  </li>\n  <li>Теперь составьте список остальной (уникальной для каждой страницы) информации, которую вы разместите на сайте.\n    \n  </li>\n  <li>Сгруппируйте информацию по темам. Какие части можно разместить на одной странице? Это похоже на метод <a>Card sorting</a>. \n    \n  </li>\n  <li>Составьте карту сайта. Обведите каждую страницу рамкой, и продумайте перемещения пользователя между ними. Обычно в центре оказывается главная страница, с которой можно быстро перейти на все остальные. На небольшом сайте большинство страниц помещают в главную навигацию, но не обязательно класть туда все ссылки. Также можете пометить, как выглядят элементы страниц — ссылками, списками, карточками.</li>\n</ol>\n<p>\n  \n</p></div></section><section aria-labelledby="самостоятельная_работа_создайте_свою_собственную_карту_сайта"><h3 id="самостоятельная_работа_создайте_свою_собственную_карту_сайта"><a>Самостоятельная работа: создайте свою собственную карту сайта</a></h3><div class="section-content"><p>Применить наш метод к своему сайту. О чем он будет?</p>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Сохраните свой код, он вам ещё понадобится.</p>\n</div></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Вы стали лучше понимать, как структурировать веб-страницу или сайт. В последней статье этого модуля мы узнаем, как отлаживать HTML.</p></div></section><section aria-labelledby="дополнительные_материалы"><h2 id="дополнительные_материалы"><a>Дополнительные материалы</a></h2><div class="section-content"><ul>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)">Using HTML sections and outlines <small>(en-US)<small></small></small></a>: Продвинутый справочник по семантическим элементам и алгоритму выделения разделов (outline algorithm) в HTML5.</li>\n</ul></div></section>',
					works: [],
				},
				{
					title: 'Отладка HTML',
					chapter: 1.1,
					content:
						'<header><h1>Отладка HTML</h1></header><div class="section-content">\n<p>Написать HTML — здорово, но как понять, где ошибка, когда что-то не работает? В этой статье описаны несколько инструментов, которые помогают искать и исправлять ошибки в HTML.</p>\n</div><section aria-labelledby="отладка_—_это_не_страшно"><h2 id="отладка_—_это_не_страшно"><a>Отладка — это не страшно</a></h2><div class="section-content"><p>Во время написания какого-нибудь кода, обычно все идёт хорошо, пока не появляется тот момент, когда вы совершаете ошибку. Итак, ваш код не работает, или работает не так, как вы задумывали. Если вы попытаетесь скомпилировать неработающую программу на языке <a class="external" target="_blank">Rust</a>, компилятор укажет на ошибку:</p>\n<p>\n  В данном случае, сообщение об ошибке понять относительно просто — "unterminated double quote string". Если вы внимательно посмотрите на <code>println!(Hello, world!");</code> , то заметите, что здесь отсутствует двойная кавычка. Разумеется, сообщения об ошибках могут становиться куда более сложными для понимания по мере роста вашего кода, и даже самые простые случаи могут показаться пугающими для тех, кто ничего не знает о Rust.\n</p>\n<p>Но не бойтесь отладки! Чтобы комфортно писать и отлаживать любой код, нужно понимать язык и его инструменты.</p></div></section><section aria-labelledby="html_и_отладка"><h2 id="html_и_отладка"><a>HTML и отладка</a></h2><div class="section-content"><p>HTML не так сложен к пониманию, как Rust. HTML не компилируется в какую-либо другую форму перед тем, как браузер проанализирует это и покажет результат (он является <em>интерпретируемым</em>, а не <em>компилируемым</em>). Синтаксис HTML элементов намного понятнее, чем у "настоящих языков программирования", таких как Rust, <a>JavaScript</a>, или <a class="only-in-en-us" title="Currently only available in English (US)">Python <small>(en-US)</small></a>. Способ, которым браузеры читают HTML более <strong>толерантен</strong>, чем у языков программирования, интерпретирующих свой код строже. Это одновременно и плохо, и хорошо.</p></div></section><section aria-labelledby="толерантный_код"><h3 id="толерантный_код"><a>Толерантный код</a></h3><div class="section-content"><p>Так что же означает толерантный? В общих чертах, когда вы напортачили в коде, есть два типа ошибок, с которыми вы столкнётесь:</p>\n<ul>\n  <li><strong>Синтаксические ошибки (Syntax errors)</strong>: Это ошибки в правильности написания, как это было выше, в примере с Rust. Такие обычно легко исправлять, в той мере, в какой вы знакомы с синтаксисом языка и знаете, что означают сообщения об ошибках.</li>\n  <li><strong>Логические ошибки (Logic errors)</strong>: Это ошибки, появляющиеся в том случае, если синтаксис корректен, но код не выполняет своего предназначения, то есть программа выполняется неверно. Такие исправлять сложнее, чем синтаксические, поскольку не выводится сообщений, указывающих место, где вы ошиблись.</li>\n</ul>\n<p>HTML не страдает от синтаксических ошибок, потому что браузер читает код толерантно, в том смысле, что страницы могут отображаться даже если синтаксические ошибки присутствуют. Браузеры имеют встроенные правила по интерпретации неверно написанной разметки, и вы можете запустить что-либо, даже если вы имели в виду другое. Это может стать настоящей проблемой!</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> HTML читается толерантно, потому что когда веб только появился, было решено позволить людям публиковать контент даже при условии некорректностей в коде, так как это куда более важно, чем уверенность в абсолютно верном синтаксисе. Веб не был бы сейчас так популярен, если бы относился к новичкам строго.</p>\n</div></div></section><section aria-labelledby="активное_обучение_знакомство_с_толерантным_кодом"><h3 id="активное_обучение_знакомство_с_толерантным_кодом"><a>Активное обучение: Знакомство с толерантным кодом</a></h3><div class="section-content"><p>Время изучить природу толерантного кода в HTML.</p>\n<ol>\n  <li>Для начала, скачайте наш <a class="external" target="_blank">пример отладки</a> и сохраните локально. Эта демонстрация намеренно написана с ошибками, которые нам предстоит обнаружить.</li>\n  <li>Далее, откройте её в браузере. Вы увидите нечто вроде этого :\n    \n  </li>\n  <li>Сейчас документ выглядит не особо хорошо; Давайте посмотрим в код и выясним почему (Показано только тело документа):\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><h1>HTML debugging examples</h1>\n\n<p>What causes errors in HTML?\n\n</p><ul>\n  <li>Unclosed elements: If an element is <strong>not closed properly,\n      then its effect can spread to areas you didn\'t intend\n\n  </strong></li><li><strong>Badly nested elements: Nesting elements properly is also very important\n      for code behaving correctly. <strong>strong <em>strong emphasised?</em></strong><em>\n      what is this?</em>\n\n  </strong></li><li><strong>Unclosed attributes: Another common source of HTML problems. Let\'s\n      look at an example: </strong></li></ul></pre></div>\n  </li>\n  <li>Рассмотрим проблемы:\n    <ul>\n      <li>У <a>параграфа</a> и <a>элемента списка</a> не закрыты теги. На изображении выше видно, что разметка не пострадала, так как браузеру легко сделать вывод о том, где заканчивается один элемент и начинается другой.</li>\n      <li>Первый <a><code>&lt;strong&gt;</code></a> элемент также не имеет закрывающего тега. Это уже более проблематично, так как сложно сказать, где элемент должен заканчиваться. На деле, весь оставшийся текст был выделен жирным.</li>\n      <li>Следующая часть нарушает правила вложенности: <code>&lt;strong&gt;strong &lt;em&gt;strong emphasised?&lt;/strong&gt; what is this?&lt;/em&gt;</code>. В этом случае код тоже сложно проинтерпретировать по причине, описанной выше.</li>\n      <li>В атрибуте <a><code>href</code></a> отсутствует закрывающая двойная кавычка. Это послужило причиной крупной проблемы — ссылка не воспроизвелась вовсе.</li>\n    </ul>\n  </li>\n  <li>Сейчас же посмотрим, как браузер сгенерировал собственную разметку, в противовес исходной разметке документа. Чтобы сделать это, воспользуемся инструментами разработчика. Если вы не знакомы с инструментами разработчика, потратьте несколько минут на <a>Обзор инструментов разработки в браузерах</a>.</li>\n  <li>В DOM инспекторе вы можете увидеть как сгенерировалась новая разметка: \n    \n  </li>\n  <li>Используя DOM инспектор, давайте рассмотрим детали нашего кода, чтобы увидеть, как браузер пытается исправить наши ошибки в HTML (мы обозреваем в Firefox; другой современный браузер должен выдать те же результаты):\n    <ul>\n      <li>Параграфы и элементы списка получены с закрывающими тегами.</li>\n      <li>Было неочевидно, где элемент <code>&lt;strong&gt;</code> должен был закрыться, так что браузер обернул каждый отдельный блок текста своими собственными тегами strong, причём до самого низа документа!</li>\n      <li>Некорректная вложенность была исправлена браузером следующим образом:\n        <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><strong>strong\n  <em>strong emphasised?</em>\n</strong>\n<em> what is this?</em>\n</pre></div>\n      </li>\n      <li>Ссылка с отсутствующими двойными кавычками была удалена насовсем. Последний элемент списка будет выглядеть так:\n        <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><li>\n  <strong>Unclosed attributes: Another common source of HTML problems. Let\'s\n    look at an example:\n  </strong>\n</li>\n</pre></div>\n      </li>\n    </ul>\n  </li>\n</ol></div></section><section aria-labelledby="валидация_html"><h3 id="валидация_html"><a>Валидация HTML</a></h3><div class="section-content"><p>Из примера выше ясно, что стоит проверять валидность HTML. В простом примере сверху можно просто просмотреть весь код и найти ошибки, но как быть с огромными, сложными страницами?</p>\n<p>Лучше всего проверить страницу в <a class="external" target="_blank">сервисе валидации разметки</a>. Его создал и поддерживает W3C — организация, которая занимается спецификациями HTML, CSS и других веб-технологий. Сервис проверит ваш HTML и составит отчёт по ошибкам в нем.</p>\n<p>\n  \n</p>\n<p>HTML можно проверить по адресу, загрузив файл или напрямую ввести код HTML.</p></div></section><section aria-labelledby="активное_обучение_валидируем_html-документ"><h3 id="активное_обучение_валидируем_html-документ"><a>Активное обучение: Валидируем HTML-документ</a></h3><div class="section-content"><p>Попробуем проверить <a class="external" target="_blank">документ-пример</a>.</p>\n<ol>\n  <li>Откройте <a class="external" target="_blank">сервис валидации разметки</a> в браузере.</li>\n  <li>Перейдите в режим <a class="external" target="_blank">Validate by Direct Input</a>.</li>\n  <li>Скопируйте весь код документа (не только body) и вставьте в место для ввода.</li>\n  <li>Нажмите на <em>Check (проверить)</em>.</li>\n</ol>\n<p>Вы увидите список ошибок и другую информацию.</p>\n<p>\n  \n</p>\n<h4 id="работа_с_сообщениями_об_ошибках">Работа с сообщениями об ошибках</h4>\n<p>Обычно сразу ясно, что значат сообщения, но иногда приходится постараться, чтобы понять, в чем дело. Сейчас мы пройдёмся по всем ошибкам и разберём, что они значат. Обратите внимание, что в сообщениях указаны строка и столбец кода, чтобы ошибки было проще искать.</p>\n<ul>\n  <li>"End tag <code>li</code> implied, but there were open elements" (2 instances): Нет явного закрывающего тега, хотя браузер догадывается, где он должен быть. Сообщение указывает на строку после той, на которой ожидался закрывающий тег, но вы найдёте нужное место.</li>\n  <li>"Unclosed element <code>strong</code>": Это очень простая ошибка — элемент <a><code>&lt;strong&gt;</code></a> не закрыт, и сообщение указывает прямо на открывающий тег.</li>\n  <li>"End tag <code>strong</code> violates nesting rules": Элемент неправильно вложен — на этом уровне нет парного открывающего тега.</li>\n  <li>"End of file reached when inside an attribute value. Ignoring tag": Загадочное сообщение. Дело в том, что где-то (скорее всего, в конце документа) неправильно прописано свойство элемента, и конец файла оказался внутри этого свойства. В браузере не видно ссылки — скорее всего, проблема рядом с ней.</li>\n  <li>"End of file seen and there were open elements": Файл закончился, но некоторые элементы не закрыты. Сообщение указывает на конец файла, в данном случае не закрыт элемент\n    <pre compile="false" disable="true" language="markup">example: </pre>\n    <div class="notecard note" id="sect2">\n      <p><strong>Примечание:</strong> Свойство без закрывающей кавычки может проглотить закрывающий тег — браузер считает его частью значения этого свойства.</p>\n    </div>\n  </li>\n  <li>"Unclosed element <code>ul</code>": Странно, ведь элемент <a><code>&lt;ul&gt;</code></a> закрыт. Настоящая проблема всё там же — элемент <a><code>&lt;a&gt;</code></a> не закрыт из-за недостающей кавычки в свойстве.</li>\n</ul>\n<p>Если некоторые ошибки кажутся вам странными, начните исправление с остальных и проверьте документ ещё раз. Иногда одна ошибка ломает большую часть документа.</p>\n<p>Когда вы увидите эту надпись, в вашем документе больше нет ошибок:</p>\n<p>\n  \n</p></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Теперь вы умеете отлаживать HTML. С новыми знаниями вам будет проще разобраться и в отладке более сложных языков — например, CSS и JavaScript. На этом мы заканчиваем вводный модуль курса HTML — время попробовать свои силы в упражнениях.</p></div></section>',
					works: [],
				},
				{
					title: 'Разметка письма',
					chapter: 1.11,
					content:
						'<header><h1>Разметка письма</h1></header><div class="section-content">\n<p>Мы все учимся писать письма рано или поздно; это также хороший способ испытать наши навыки форматирования! В этом задании у вас будет письмо для проверки ваших навыков форматирования текста HTML, использования гиперссылок и элемента <code>&lt;head&gt;</code>.</p>\n</div><section aria-labelledby="отправная_точка"><h2 id="отправная_точка"><a>Отправная точка</a></h2><div class="section-content"><p>Для начала задания, вы должны <a class="external" target="_blank">скачать текст</a>, который вам надо отформатировать, и <a class="external" target="_blank">CSS стиль</a>, который вы должны подключить к вашему HTML. Создайте .html файл используя текстовый редактор, которым вы пользуетесь (или воспользуйтесь онлайн редакторами, таким как <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble</a>).</p></div></section><section aria-labelledby="описание_проекта"><h2 id="описание_проекта"><a>Описание проекта</a></h2><div class="section-content"><p>В этом проекте, ваша задача - отформатировать письмо, которое должно быть размещено во внутренней сети университета. Это письмо - ответ исследователя будущему PhD студенту о его заявлении на работу в университете.</p>\n<p>Блочные элементы / структура:</p>\n<ul>\n  <li>Вы должны корректно структурировать весь документ, включив в него элементы doctype, и <a><code>&lt;html&gt;</code></a>, <a><code>&lt;head&gt;</code></a> и <a><code>&lt;body&gt;</code></a>.</li>\n  <li>Письмо в целом должно быть размечено используя параграфы и заголовки, за исключением следующих пунктов - один заголовок верхнего уровня (начинается на "Re:") и три заголовка второго уровня.</li>\n  <li>Даты начала семестра, изучения предметов и экзотических танцев должны быть помечены используя соответствующие типы списков.</li>\n  <li>Два адреса должны быть помещены внутри элементов <a><code>&lt;address&gt;</code></a>. Каждая строка адреса должна находиться на новой строке, но не быть новым параграфом.</li>\n</ul>\n<p>Строчные элементы:</p>\n<ul>\n  <li>Имена отправителя и получателя (как и "Tel" и "Email") должны быть выделены жирным.</li>\n  <li>Четырём датам в документе необходимо выбрать правильные элементы содержащие машинно-читаемые даты.</li>\n  <li>Первый адрес и первая дата в письме должны иметь атрибут <code>class</code> со значением <code>"sender-column"</code>; CSS стиль, который вы добавите позже, позволит выравнять по правому боку, как оно и должно быть в классической разметке письма.</li>\n  <li>Пять акронимов/аббревиатур в главном тексте письма должны быть размечены, чтобы предоставить подсказки для каждого акронима/аббревиатуры.</li>\n  <li>Шесть под/надстрочных элементов должны быть оформлены корректно в химической формуле, как и числа 103 и 104 (степень числа должна быть над числом).</li>\n  <li>Для разметки символов градуса и умножения воспользуйтесь <a class="external" target="_blank">справкой</a>.</li>\n  <li>Постарайтесь выделить как минимум два нужных по смыслу слова в тексте жирным.</li>\n  <li>Есть два места, где следует разместить гиперссылки; добавьте нужные ссылки с заголовками. В качестве адреса для ссылок используйте <code>http://example.com</code>.</li>\n  <li>Девиз университета и цитата должны быть размечены соответствующими элементами.</li>\n</ul>\n<p>Заголовок документа:</p>\n<ul>\n  <li>Кодировка документа должна быть указана как utf-8 с использованием соответствующего мета-тега.</li>\n  <li>Автор письма должен быть указан в соответствующем мета-теге.</li>\n  <li>Предоставленный CSS должен быть включён в соответствующий тег.</li>\n</ul></div></section><section aria-labelledby="советы_и_подсказки"><h2 id="советы_и_подсказки"><a>Советы и подсказки</a></h2><div class="section-content"><ul>\n  <li>Проверяйте свой HTML в <a class="external" target="_blank">валидаторе W3C</a> — писать валидный код здорово!</li>\n  <li>Для задания не нужно знать CSS — просто укажите CSS из задания в документе.</li>\n</ul></div></section><section aria-labelledby="пример"><h2 id="пример"><a>Пример</a></h2><div class="section-content"><p>Это скриншот размеченного письма:</p>\n<p>\n  \n</p></div></section><section aria-labelledby="оценка"><h2 id="оценка"><a>Оценка</a></h2><div class="section-content"><p>Если вам дали это задание на каком-то курсе, просто передайте свою страницу для проверки преподавателю. Если вы учитесь сами, обратитесь на <a class="external" target="_blank">форум, в тему этого задания</a>, или по тегу <a>#mdn</a> в нашем IRC-канале (<a class="external" target="_blank">Mozilla IRC</a>). Сделайте это задание сами — вам некого обманывать, кроме себя самого.</p></div></section>',
					works: [],
				},
				{
					title: 'Структурируем страницу',
					chapter: 1.12,
					content:
						'<header><h1>Структурируем страницу</h1></header><div class="section-content">\n<p>Разметить страницу так, чтобы к ней было просто применить CSS — первое, чему должен научиться будущий веб-разработчик. В этом задании вам придётся подумать о том, как должна выглядеть страница, и подобрать подходящую семантическую разметку.</p>\n</div><section aria-labelledby="отправная_точка"><h2 id="отправная_точка"><a>Отправная точка</a></h2><div class="section-content"><p>Чтобы начать это, вы должны перейти и скачать <a class="external" target="_blank">архив содержащий все начальные активы</a>. Архив содержит:</p>\n<ul>\n  <li>HTML, где вам нужно добавить структурную разметку.</li>\n  <li>CSS для стилизации вашей разметки.</li>\n  <li>Изображения, которые используются на странице.</li>\n</ul>\n<p>Создайте пример на вашем локальном компьютере или, альтернативно, используйте сайт, например <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble</a> для исследования.</p></div></section><section aria-labelledby="краткое_описание_проекта"><h2 id="краткое_описание_проекта"><a>Краткое описание проекта</a></h2><div class="section-content"><p>Для этого проекта ваша задача - взять контент для домашней страницы веб-сайта наблюдения за птицами и добавить к нему структурные элементы, чтобы он мог использовать макет страницы. Он должен иметь:</p>\n<ul>\n  <li>Заголовок, охватывающий всю ширину сайта, содержащий основное название страницы, логотип сайта и меню навигации. Заголовок и логотип появляются рядом друг с другом, когда применяется стилизация, и навигация появляется ниже этих двух элементов.</li>\n  <li>Основная область содержимого, содержащая два столбца - основной блок, содержащий текст приветствия, и боковую панель для размещения миниатюр изображений.</li>\n  <li>Нижний колонтитул, содержащий информацию об авторских правах и разработчиках.</li>\n</ul>\n<p>Вам необходимо добавить подходящую обёртку для:</p>\n<ul>\n  <li>Заголовка</li>\n  <li>Меню навигации</li>\n  <li>Основного содержимого</li>\n  <li>Приветственного текста</li>\n  <li>Боковой панели изображения</li>\n  <li>Нижнего колонтитула</li>\n</ul>\n<p>Вы также должны:</p>\n<ul>\n  <li>Примените предоставленный CSS к странице, добавив ещё один элемент <a><code>&lt;link&gt;</code></a> чуть ниже существующего, указанного в начале.</li>\n</ul></div></section><section aria-labelledby="советы_и_подсказки"><h2 id="советы_и_подсказки"><a>Советы и подсказки</a></h2><div class="section-content"><ul>\n  <li>Используйте <a class="external" target="_blank">W3C HTML validator</a> для проверки вашего HTML; вы получите бонусные баллы, если он будет проверять как можно больше (строка «googleapis» используется для импорта пользовательских шрифтов на страницу из службы Google Fonts, она не проверяет, но не беспокойтесь об этом слишком много - валидатор - полезный инструмент, но 100% проверка является идеальной, а не полностью необходимой).</li>\n  <li>Вам не нужно знать CSS, чтобы сделать эту оценку; вам просто нужно поместить предоставленный CSS внутри HTML-элемента.</li>\n  <li>Предоставленный CSS разработан таким образом, что при добавлении правильных структурных элементов в разметку они будут отображаться зелёными на отображаемой странице.</li>\n  <li>Если вы застряли и не можете понять, какие элементы куда помещать, часто помогает вывести простую блок-схему макета страницы и сделать надписи на элементах, которые, по вашему мнению, должны обернуть каждый блок.</li>\n</ul></div></section><section aria-labelledby="пример"><h2 id="пример"><a>Пример</a></h2><div class="section-content"><p>Следующий скриншот показывает пример того, как может выглядеть домашняя страница после маркировки.</p>\n<p>\n  \n</p></div></section><section aria-labelledby="оценивание"><h2 id="оценивание"><a>Оценивание</a></h2><div class="section-content"><p>Если вам дали это задание на каком-то курсе, просто передайте свою страницу для проверки преподавателю. Если вы учитесь сами, обратитесь на <a class="external" target="_blank">форум, задав тему обсуждения этого упражнения, или в IRC-канале #mdn в IRC Mozilla</a>, или в IRC-канале <a>#mdn</a> в <a class="external" target="_blank">IRC Mozilla</a>. Попробуйте выполнить задание сами, ведь вам некого обманывать, кроме себя самого!</p></div></section>',
					works: [],
				},
				{
					title: 'Мультимедиа и встраивание',
					chapter: 1.13,
					content:
						'<header><h1>Мультимедиа и встраивание</h1></header><div class="section-content"><p>Мы уже прочли много текста в этом курсе. МНОГО текста. Но веб был бы скучным, если бы состоял только из текста, поэтому давайте посмотрим, как оживить веб при помощи более интересного контента! Этот модуль объясняет, как при помощи HTML вставлять мультимедиа в ваши web-страницы, включая разные способы вставки изображений, видео, аудио, а также других страниц целиком.</p></div><section aria-labelledby="перед_стартом"><h2 id="перед_стартом"><a>Перед стартом</a></h2><div class="section-content"><p>Перед изучением этого модуля, вам необходимо изучить азы HTML, изложенные во <a>Введении в HTML</a>. Если вы не прошли этот модуль (или подобный ему), сначала пройдите его, затем возвращайтесь!</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Если вы работаете на компьютере/планшете/другом устройстве, на котором у вас нет возможности создавать файлы, вы можете попробовать сделать упражнения на программирование (большинство из них) в онлайн сервисах, например в <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble</a>.</p>\n</div></div></section><section aria-labelledby="руководство"><h2 id="руководство"><a>Руководство</a></h2><div class="section-content"><p>Этот модуль содержит следующие статьи, которые проведут вас через все основы внедрения мультимедиа на веб-страницах.</p>\n<dl>\n  <dt id="изображения_в_html"><a>Изображения в HTML</a></dt>\n  <dd>\n    <p>Можно рассматривать другие типы мультимедиа, но логично начать с простого элемента <a><code>&lt;img&gt;</code></a>, используемого для встраивания простого изображения в веб-страницу. В этой статье мы увидим, как использовать его в целом, включая основы, подписывать его, используя <a><code>&lt;figure&gt;</code></a>, и как он взаимодействует с фоновым изображением CSS.</p>\n  </dd>\n  <dt id="видео_и_аудио_контент"><a>Видео и аудио контент</a></dt>\n  <dd>\n    <p>Далее мы рассмотрим, как использовать элементы HTML5 <a><code>&lt;video&gt;</code></a> и <a><code>&lt;audio&gt;</code></a> для встраивания видео и аудио на наши страницы, включая основы, обеспечивая доступ к различным форматам файлов для разных браузеров, добавление подписей и субтитров, а также как добавить резервные копии для старых браузеров.</p>\n  </dd>\n  <dt id="от_object_к_iframe_—_другие_технологии_встраивания"><a>От &lt;object&gt; к &lt;iframe&gt; — другие технологии встраивания</a></dt>\n  <dd>\n    <p>В этом месте мы бы хотели сделать шаг в сторону, чтобы изучить пару элементов, которые позволят встраивать широкий спектр типов контента в ваши веб-страницы: элементы <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;iframe&gt;</code> <small>(en-US)</small></a>, <a><code>&lt;embed&gt;</code></a> и<a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;object&gt;</code> <small>(en-US)</small></a>. &lt;iframe&gt; используется для встраивания других веб-страниц, а другие два элемента позволяют встраивать PDF, SVG и даже Flash – устаревающая технология, но все ещё часто встречаемая.</p>\n  </dd>\n  <dt id="добавление_векторной_графики_в_веб"><a>Добавление векторной графики в Веб</a></dt>\n  <dd>\n    <p>Векторная графика может быть очень полезной в определённых ситуациях. В отличие от обычных форматов типа PNG/JPG, она не деформируются/пикселизируются при растяжении, она остаётся гладкой при масштабировании. Эта статья знакомит вас с понятием векторной графики и учит вас встраивать популярный формат <a>SVG</a> в веб-страницы.</p>\n  </dd>\n  <dt id="адаптивные_изображения"><a>Адаптивные изображения</a></dt>\n  <dd>\n    <p>В этой статье мы познакомимся с концепцией адаптивных изображений - изображений, которые хорошо работают на устройствах с сильно различающимися размерами экрана, разрешением и другими подобными характеристиками, и рассмотрим, какие инструменты предоставляет HTML для их реализации. Это помогает повысить производительность различных устройств. Адаптивные изображения - это всего лишь одна часть адаптивного дизайна, будущей темы CSS, которую вы должны изучить.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="аттестация"><h2 id="аттестация"><a>Аттестация</a></h2><div class="section-content"><p>Следующая аттестация проверит ваше понимание основ HTML, изложенных в перечисленных выше статьях.</p>\n<dl>\n  <dt id="страница_приветствия_mozilla"><a>Страница приветствия Mozilla</a></dt>\n  <dd>\n    <p>В этой аттестации мы проверим ваши знания по некоторым технологиям, которые обсуждались в статьях этого модуля, заставляя вас добавить несколько изображений и видео на примитивную приветственную страницу, посвящённую Mozilla!</p>\n  </dd>\n</dl></div></section>',
					works: [],
				},
				{
					title: 'Изображения в HTML',
					chapter: 1.14,
					content:
						'<header><h1>Изображения в HTML</h1></header><div class="section-content">\n<p>В начале Web был просто текстом, что было довольно скучно. К счастью, это продолжалось не долго - до появления возможности вставлять изображения (и другие, более интересные, типы контента) в веб-страницы. Существуют и другие типы мультимедиа, однако логичнее начать со скромного <a><code>&lt;img&gt;</code></a> элемента, используемого для вставки простого изображения в веб-страницу. В этой статье мы рассмотрим, как использовать элемент, начиная с основ, снабжать примечаниями, используя <a><code>&lt;figure&gt;</code></a>, и разберём, как это относится к фоновым изображениям <a>CSS</a>.</p>\n</div><section aria-labelledby="как_разместить_картинку_на_странице"><h2 id="как_разместить_картинку_на_странице"><a>Как разместить картинку на странице?</a></h2><div class="section-content"><p>Чтобы разместить изображение на странице, нужно использовать тег <a><code>&lt;img&gt;</code></a>. Это пустой элемент (имеется ввиду, что не содержит текста и закрывающего тега), который требует минимум один атрибут для использования — <code>src</code> (произносится <em>эс-ар-си</em>, иногда говорят его полное название, <em>source</em>). Атрибут <code>src</code> содержит путь к изображению, которое вы хотите встроить в страницу, и может быть относительным или абсолютным URL, точно так же, как значения атрибута <code>href</code> для элемента <a><code>&lt;a&gt;</code></a>.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Перед тем как продолжить, вам стоит вспомнить про <a>типы адресов URL</a>, чтобы обновить в памяти про относительные и абсолютные адреса.</p>\n</div>\n<p>Например, если ваше изображение называется <code>dinosaur.jpg</code>, и оно находится в той же директории что и ваша HTML страница, вы можете встроить это изображение как:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="dinosaur.jpg">\n</pre></div>\n<p>Если изображение было в поддиректории <code>images</code> , находящаяся внутри той же директории, что и HTML страница (что рекомендует Google для индексации и целей SEO), тогда вы можете встроить его так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="images/dinosaur.jpg">\n</pre></div>\n<p>И так далее.</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Поисковые системы также читают имена изображений и считают их для оптимизации поискового запроса. Поэтому присваивайте вашим изображениям смысловые имена: <code>dinosaur.jpg</code> лучше, чем <code>img835.png</code>.</p>\n</div>\n<p>Вы можете встроить изображение используя абсолютный URL, например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="https://www.example.com/images/dinosaur.jpg">\n</pre></div>\n<p>Но это бессмысленно, так как он просто заставляет браузер делать больше работы, запрашивая каждый раз IP-адрес от DNS-сервера. Вы почти всегда будете держать свои изображения для сайта на том же сервере, что и ваш HTML.</p>\n<div class="notecard warning" id="sect3">\n  <p><strong>Предупреждение:</strong> <strong>Внимание:</strong> Большинство изображений защищены. Не отображайте изображения на вашем сайте пока:</p>\n  <ul>\n    <li>вы не будете владеть изображением</li>\n    <li>у вас не будет письменного разрешения владельца изображения, или</li>\n    <li>пока у вас не будет достаточно доказательств что изображение находится в открытом доступе.</li>\n  </ul>\n  <p>Нарушение авторских прав является незаконным. Кроме того, никогда не указывайте в своём атрибуте <code>src</code> ссылку на изображение, размещённое на чужом сайте. Это называется "хотлинкинг" (с англ. \'hotlinking\' - \'горячая ссылка\'). Запомните, кража пропускной способности чужого сайта незаконна. Это также замедляет вашу страницу и не позволяет вам контролировать, будет ли изображение удалено или заменено чем-то неприятным.</p>\n</div>\n<p>Наш код выше даст нам следующий результат:</p>\n<p>\n  \n</p>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> Такие элементы как <a><code>&lt;img&gt;</code></a> и <a><code>&lt;video&gt;</code></a> иногда называются замещаемыми элементами. Это потому что содержание элемента и размер, определяет внешний ресурс (как изображение или видео файл), а не содержание самого элемента. Вы можете узнать о них больше в <a>Замещаемых элементах</a>.</p>\n</div>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> вы можете найти готовый пример этого раздела, <a class="external" target="_blank">размещённый на Github</a> (смотрите также <a class="external" target="_blank">исходный код</a>).</p>\n</div></div></section><section aria-labelledby="альтернативный_текст"><h3 id="альтернативный_текст"><a>Альтернативный текст</a></h3><div class="section-content"><p>Следующий атрибут, который мы рассмотрим — <code>alt</code>. Его значением должно быть текстовое описание изображения для использования в ситуациях, когда изображение не может быть просмотрено / отображено или отрисовка занимает много времени из-за медленного интернет-соединения. Чтобы продемонстрировать использование атрибута <code>alt</code> на практике, внесём изменения в код из предыдущего примера:</p>\n<pre compile="false" disable="true" language="markup"><img src="images/dinosaur.jpg" alt="Голова и туловище скелета динозавра;\n         у него большая голова с длинными острыми зубами">\n</pre>\n<p>Самый простой способ увидеть атрибут <code>alt</code> в действии — это сделать намеренную ошибку в имени файла. Например, если бы мы написали имя изображения как <code>dinosooooor.jpg</code>, браузер не смог бы его отобразить, и на экране появился бы текст из атрибута <code>alt</code>:</p>\n<p>\n  Итак, в каких случаях текст из атрибута <code>alt</code> может быть нам полезен? Приведём несколько примеров:\n</p>\n<ul>\n  <li>Пользователь с нарушением зрения использует <a class="external" target="_blank">устройство чтения с экрана</a>, которое может читать вслух описание элементов веб-страницы. На самом деле, наличие текста в атрибуте <code>alt</code> для описания изображения может быть полезно для большинства пользователей.</li>\n  <li>В случае, если была допущена ошибка в имени файла или пути к нему (как было описано выше).</li>\n  <li>Браузер не поддерживает формат данного изображения. Некоторые люди до сих пор используют текстовые браузеры, такие как <a class="external" target="_blank">Lynx</a>, которые вместо изображений отображают текст из атрибута <code>alt</code>.</li>\n  <li>Если вы хотите добавить возможность найти ваше изображение с помощью поисковых систем. Например, поисковые системы могут искать совпадения поисковых запросов с текстом атрибута <code>alt</code>.</li>\n  <li>Если пользователи отключили отображение изображений на странице для уменьшения объёма передаваемых данных и для сокрытия элементов, отвлекающих внимание. Это обычная практика для пользователей мобильных телефонов, а также в странах с маленькой пропускной способностью интернет-каналов и с высокой стоимостью интернет-трафика.</li>\n</ul>\n<p>Что именно вы должны писать в атрибут <code>alt</code>? В первую очередь, это зависит от того, <em>зачем</em> изображение вообще находится на странице. Другими словами, что вы потеряете, если ваше изображение не появится:</p>\n<ul>\n  <li><strong>Декорация.</strong> Вы должны использовать <a>Фоновые изображения CSS</a> для декоративных изображений, но если вы должны использовать HTML, добавьте пустой alt = "". Если изображение служит просто украшением и не является частью содержимого, добавьте пустой <code>alt=""</code>. Например, программа чтения с экрана не тратит время на чтение содержимого, которое не является важным для пользователя.</li>\n  <li><strong>Контент.</strong> Если ваше изображение содержит важную информацию, передайте ту же информацию через краткий <code>alt</code>. Или даже лучше, в <em>главном</em> тексте, который все увидят. Не используйте <code>alt</code> , если можете обойтись без него. Насколько неудобно было бы для пользователя, если бы <em>параграфы</em> были написаны дважды в <em>главном контенте</em>? Если изображение адекватно описано в основном тексте, можете просто использовать <code>alt=""</code>.</li>\n  <li><strong>Ссылка.</strong> Если вы помещаете изображение в <a><code>&lt;a&gt;</code></a>, для того, чтобы сделать из него ссылку, вы всё ещё должны <a>использовать чёткие формулировки описания ссылок</a>. В таком случае, вы сможете использовать элемент <code>&lt;a&gt;</code> или атрибут <code>alt</code> . Старайтесь выбрать лучший вариант.</li>\n  <li><strong>Текст.</strong> Не пишите текст в изображениях. Если вашему заголовку понадобится тень, то лучше используйте для этого <a>CSS</a> вместо добавления текста в изображение. Однако, если <em>действительно этого не избежать</em>, то вам следует дополнить текст в атрибуте <code>alt</code>.</li>\n</ul>\n<p>По существу, главная идея здесь это предоставить нечто полезное, для случая когда изображения не видны. Это гарантирует что все пользователи не упустят ничего из содержимого страницы. Попробуйте отключить изображения в своём браузере и посмотрите как всё выглядит. Вы вскоре выясните насколько полезным является альтернативный текст, если изображения не видны.</p>\n<div class="notecard note" id="sect6">\n  <p><strong>Примечание:</strong> Более подробную информацию, смотрите здесь: <a>Альтернативный текст</a>.</p>\n</div></div></section><section aria-labelledby="ширина_и_высота"><h3 id="ширина_и_высота"><a>Ширина и высота</a></h3><div class="section-content"><p>Вы можете использовать атрибуты <code>width</code> и <code>height</code>, чтобы указать ширину и высоту вашего изображения. Ширину и высоту вашего изображение можете найти различными способами. Например, на Mac можно использовать <kbd>Cmd</kbd> + <kbd>I</kbd> чтобы получить информацию по изображению. Повторяя наш пример, мы можем сделать так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="images/dinosaur.jpg" alt="The head and torso of a dinosaur skeleton;\n          it has a large head with long sharp teeth" width="400" height="341">\n</pre></div>\n<p>Это не приводит к большой разнице в отображении при нормальных обстоятельствах. Но если изображение не будет показано, например, когда пользователь только что перешёл на страницу, а оно ещё не успело загрузится, вы укажите браузеру оставить место для отрисовки изображения:</p>\n<p>\n  \n</p>\n<p>Это хорошая практика, в результате страница загрузится быстрее и более гладко.</p>\n<p>Однако, вы не должны изменять размеры ваших изображений используя HTML атрибуты. Если вы установите размер изображения слишком большим, то в конечном итоге вы столкнётесь с изображениями, которые выглядят зернистыми, размытыми или слишком маленькими, и потратите трафик для загрузки изображения, которое не будет соответствовать нуждам пользователя. Конечное изображение может также выглядеть искажённым, если вы не сохраните правильное <a class="external" target="_blank">соотношение сторон</a>. Рекомендуется использовать графический редактор для подгонки изображения к нужному размеру, перед вставкой его на вашу веб-страницу.</p>\n<div class="notecard note" id="sect7">\n  <p><strong>Примечание:</strong> Если вам действительно нужно изменить размер изображения, вы должны использовать вместо этого <a>CSS</a>.</p>\n</div></div></section><section aria-labelledby="заголовок_изображения"><h3 id="заголовок_изображения"><a>Заголовок изображения</a></h3><div class="section-content"><p>Как и для <a>ссылок</a>, вы также можете добавить атрибут <code>title</code> для изображений, чтобы при необходимости предоставить дополнительную информацию. В нашем примере мы могли бы сделать это так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="images/dinosaur.jpg" alt="The head and torso of a dinosaur skeleton;\n          it has a large head with long sharp teeth" width="400" height="341" title="A T-Rex on display in the Manchester University Museum">\n</pre></div>\n<p>Это даёт нам всплывающую подсказку при наведении курсора мыши, также как и в ссылках:</p>\n<p>\n  \n</p>\n<p>Однако это не рекомендуется - <code>title</code> имеет ряд проблем с доступностью, в основном из-за того, что поддержка программ чтения с экрана очень непредсказуема, и большинство браузеров не будут отображать её, если вы не наведёте курсор мыши (например, нет доступа для пользователей клавиатуры). Зачастую лучше включить такого рода вспомогательную информацию в основной текст статьи, чем прикреплять её к изображению. Однако, она полезна в некоторых обстоятельствах; например, в галереях изображений, когда у вас нет места для их заголовков.</p></div></section><section aria-labelledby="активное_обучение_встраивание_изображения"><h3 id="активное_обучение_встраивание_изображения"><a>Активное обучение: встраивание изображения</a></h3><div class="section-content"><p>Наступила очередь немного поиграть! Этот раздел активного обучения поможет вам выполнить простое упражнение по встраиванию. Вы будете обеспечены простым <a><code>&lt;img&gt;</code></a> тэгом; мы хотели бы чтобы вы встроили изображение расположенное по следующей ссылке:</p>\n<p><a class="external" target="_blank">https://raw.githubusercontent.com/mdn/learning-area/master/html/multimedia-and-embedding/images-in-html/dinosaur_small.jpg</a></p>\n<p>Ранее мы говорили никогда не используйте горячие ссылки на изображения с других серверов, данный случай только для целей обучения, итак мы позволим вам пренебречь этим один разок.</p>\n<p>Мы также хотели бы, чтобы вы:</p>\n<ul>\n  <li>Добавили любой альтернативный текст, и проверили как это работает внеся ошибку в ссылку на изображение.</li>\n  <li>Установите правильные значения <code>width</code> и <code>height</code> (подсказка: это 200px по ширине и 171px по высоте), после поэкспериментируйте с другими значениями, чтобы увидеть какой будет эффект.</li>\n  <li>Установите <code>title</code> для изображения.</li>\n</ul>\n<p>Если вы сделаете ошибку, вы всегда можете очистить код, используя кнопку <em>Reset</em>. Если вы реально не будете понимать как сделать, нажмите кнопку <em>Show solution</em>, чтобы увидеть ответ:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h2>Input</h2>\n<input id="code" class="input">&lt;img&gt;</input>\n<h2>Output</h2>\n<div class="output"></div>\n<div class="controls">\n  <input id="reset" type="button" value="Reset">\n  <input id="solution" type="button" value="Show solution">\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  font-family: "Open Sans Light", Helvetica, Arial, sans-serif;\n}\n\n.input,\n.output {\n  width: 90%;\n  height: 10em;\n  padding: 10px;\n  border: 1px solid #0095dd;\n  overflow: auto;\n}\n\nbutton {\n  padding: 10px 10px 10px 0;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">var textarea = document.getElementById("code");\nvar reset = document.getElementById("reset");\nvar code = textarea.value;\nvar output = document.querySelector(".output");\nvar solution = document.getElementById("solution");\n\nfunction drawOutput() {\n  output.innerHTML = textarea.value;\n}\n\nreset.addEventListener("click", function () {\n  textarea.value = code;\n  drawOutput();\n});\n\nsolution.addEventListener("click", function () {\n  textarea.value =\n    \'<img src="https://raw.githubusercontent.com/mdn/learning-area/master/html/multimedia-and-embedding/images-in-html/dinosaur_small.jpg" alt="The head and torso of a dinosaur skeleton; it has a large head with long sharp teeth" width="200" height="171" title="A T-Rex on display in the Manchester University Museum">\';\n  drawOutput();\n});\n\ntextarea.addEventListener("input", drawOutput);\nwindow.addEventListener("load", drawOutput);\n</pre></div><div class="code-example" id="sect8"><div class="example-header" id="sect9"></div></div></div></section><section aria-labelledby="придание_изображению_структуры_и_установка_заголовка"><h2 id="придание_изображению_структуры_и_установка_заголовка"><a>Придание изображению структуры и установка заголовка</a></h2><div class="section-content"><p>Начиная разговор о заголовках, есть множество путей как вы можете добавить заголовок к своему изображению. Для примера, нет ничего, что может вас остановить сделать это таким образом:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="figure">\n  <img src="images/dinosaur.jpg" alt="The head and torso of a dinosaur skeleton;\n            it has a large head with long sharp teeth" width="400" height="341">\n\n  <p>A T-Rex on display in the Manchester University Museum.</p>\n</div>\n</pre></div>\n<p>Это нормально. Это содержит всё что вам нужно, и красиво стилизуется с помощью CSS. Но, есть проблема: здесь нет ничего, что семантически связывает изображение с его заголовком, и это может вызвать сложности для читателей. Например, когда у вас есть 50 изображений и заголовков, какой заголовок идёт вместе с каким изображением?</p>\n<p>Лучшим решением будет использование элементов HTML5 <a><code>&lt;figure&gt;</code></a> и <a><code>&lt;figcaption&gt;</code></a>. Они были созданы исключительно для этой цели: предоставить семантический контейнер для рисунков и чётко связать рисунок с заголовком. Наш пример выше мог бы быть переписан так:</p>\n<pre compile="false" disable="true" language="markup"><figure>\n  <img src="images/dinosaur.jpg" alt="The head and torso of a dinosaur skeleton;\n            it has a large head with long sharp teeth" width="400" height="341">\n\n  <figcaption>A T-Rex on display in the Manchester University Museum.</figcaption>\n</figure>\n</pre>\n<p>Элемент <a><code>&lt;figcaption&gt;</code></a> говорит браузерам и вспомогательной технологии, что заголовок описывает содержимое элемента <a><code>&lt;figure&gt;</code></a>.</p>\n<div class="notecard note" id="sect10">\n  <p><strong>Примечание:</strong> С точки зрения доступности, заголовки и <a><code>alt</code></a> имеют различные предназначения. Заголовки помогают даже тем, кто имеет возможность просматривать изображение, тогда как <a><code>alt</code></a> обеспечивает замену функциональности отсутствующего изображения. Таким образом, заголовки и <code>alt</code> не подразумевают под собой одни и те же вещи, потому что оба используются браузером при отсутствии изображения. Попробуйте отключить изображения в своём браузере, чтобы увидеть как это выглядит.</p>\n</div>\n<p>Тег &lt;figure&gt; не является изображением. Он представляет собой независимый структурный элемент, который:</p>\n<ul>\n  <li>Передаёт смысл компактным, интуитивно понятным способом.</li>\n  <li>Может использоваться в различных местах страницы.</li>\n  <li>Предоставляет ценную информацию, поддерживающую основной текст.</li>\n</ul>\n<p>Тег &lt;figure&gt; может быть несколькими изображениями, куском кода, аудио, видео, уравнением, таблицей, либо чем-то другим.</p></div></section><section aria-labelledby="активное_изучение_создание_figure"><h3 id="активное_изучение_создание_figure"><a>Активное изучение: создание &lt;figure&gt;</a></h3><div class="section-content"><p>В этом разделе активного изучения мы хотели бы, чтобы вы взяли текст из предыдущего раздела активного изучения и преобразовали его в &lt;figure&gt;:</p>\n<ul>\n  <li>Оберните его в <a><code>&lt;figure&gt;</code></a> элемент.</li>\n  <li>Скопируйте текст из атрибута <code>title</code>, удалите атрибут <code>title</code>, и вбейте текст в элемент <a><code>&lt;figcaption&gt;</code></a>.</li>\n</ul>\n<p>В случае допущения ошибки, вы всегда можете набрать код повторно, нажав кнопку <em>Reset</em>. Если вы застряли, нажмите кнопку <em>Show solution</em>, чтобы увидеть ответ:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h2>Input</h2>\n<input id="code" class="input"></input>\n<h2>Output</h2>\n<div class="output"></div>\n<div class="controls">\n  <input id="reset" type="button" value="Reset">\n  <input id="solution" type="button" value="Show solution">\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  font-family: "Open Sans Light", Helvetica, Arial, sans-serif;\n}\n\n.input,\n.output {\n  width: 90%;\n  height: 10em;\n  padding: 10px;\n  border: 1px solid #0095dd;\n  overflow: auto;\n}\n\nbutton {\n  padding: 10px 10px 10px 0;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">var textarea = document.getElementById("code");\nvar reset = document.getElementById("reset");\nvar code = textarea.value;\nvar output = document.querySelector(".output");\nvar solution = document.getElementById("solution");\n\nfunction drawOutput() {\n  output.innerHTML = textarea.value;\n}\n\nreset.addEventListener("click", function () {\n  textarea.value = code;\n  drawOutput();\n});\n\nsolution.addEventListener("click", function () {\n  textarea.value =\n    \'<figure>\n  <img src="https://raw.githubusercontent.com/mdn/learning-area/master/html/multimedia-and-embedding/images-in-html/dinosaur_small.jpg" alt="The head and torso of a dinosaur skeleton; it has a large head with long sharp teeth" width="200" height="171">\n  <figcaption>A T-Rex on display in the Manchester University Museum</figcaption>\n</figure>\';\n  drawOutput();\n});\n\ntextarea.addEventListener("input", drawOutput);\nwindow.addEventListener("load", drawOutput);\n</pre></div><div class="code-example" id="sect11"><div class="example-header" id="sect12"></div></div></div></section><section aria-labelledby="фоновые_изображения_css"><h2 id="фоновые_изображения_css"><a>Фоновые изображения CSS</a></h2><div class="section-content"><p>Вы можете использовать CSS для встраивания изображений в веб-страницы (или JavaScript, но это совсем другая история). Параметры CSS <a><code>background-image</code></a> и другие <code>background-*</code> применяются для контроля размещения фонового изображения. К примеру, чтобы залить фон каждого параграфа страницы, необходимо сделать следующее:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p {\n  background-image: url("images/dinosaur.jpg");\n}\n</pre></div>\n<p>Получившееся в конечном итоге изображение можно легко позиционировать и контролировать, в отличие от его HTML аналога. Так зачем же возиться с HTML изображениями? Как указано выше, фоновые изображения CSS предназначены только для украшения. Если вы просто хотите добавить что-то красивое на свою страницу, чтобы улучшить визуальные эффекты, это нормально. Тем не менее, такого рода изображения не имеют семантического смысла вообще. Они не могут иметь каких-то текстовых эквивалентов, видимых посетителю, они невидимы для программ чтения с экрана. Вот где блистают HTML-изображения!</p>\n<p>Итог: если изображение имеет важность, в контексте содержимого вашей страницы, вам следует использовать HTML изображения. Если же картинка является банальной декорацией, используйте фоновые изображения CSS.</p>\n<div class="notecard note" id="sect13">\n  <p><strong>Примечание:</strong> вы можете узнать больше о <a>фоновых изображениях CSS</a> в нашей теме о <a>CSS</a>.</p>\n</div></div></section><section aria-labelledby="проверьте_свои_навыки!"><h2 id="проверьте_свои_навыки!"><a>Проверьте свои навыки!</a></h2><div class="section-content"><p>Вы дошли до конца этой статьи, но можете ли вы вспомнить самую важную информацию? Вы можете найти дополнительные тесты, чтобы убедиться, что вы усвоили эту информацию, прежде чем двигаться дальше. Смотрите <a>Проверьте знания по изображениям в HTML</a>.</p></div></section><section aria-labelledby="резюме"><h2 id="резюме"><a>Резюме</a></h2><div class="section-content"><p>На этом пока все. Мы подробно рассмотрели изображения и их заголовки. В следующей статье мы рассмотрим, как использовать HTML для встраивания видео и аудио на веб-страницы.</p></div></section>',
					works: [],
				},
				{
					title: 'Видео и аудио контент',
					chapter: 1.15,
					content:
						'<header><h1>Видео и аудио контент</h1></header><div class="section-content">\n<p>Теперь, когда мы спокойно добавляем простые изображения на веб-страницу, сделаем следующий шаг — начнём добавлять видео и аудиоплееры в ваши HTML-документы! В этой статье вы увидите, как это делать с элементами <a><code>&lt;video&gt;</code></a> и <a><code>&lt;audio&gt;</code></a> ; а в завершение посмотрите, как добавить титры и субтитры к вашим видео.</p>\n</div><section aria-labelledby="аудио_и_видео_в_интернете"><h2 id="аудио_и_видео_в_интернете"><a>Аудио и видео в Интернете</a></h2><div class="section-content"><p>Веб-разработчики хотели использовать видео и аудио в Интернете в течение длительного времени, начиная с начала 2000-х годов, когда пропускная способность сети стала достаточной, чтобы поддерживать любое видео (видеофайлы намного больше, чем текст, или даже изображения). На раннем этапе базовые веб-технологии, такие как HTML, не имели возможности размещения на сайтах видео и аудио контента, поэтому запатентованные технологии (или плагины), такие как Flash (а затем и Silverlight), стали популярными для обработки такого контента. Эти технологии работали нормально, но у них было много недостатков, в числе которых плохая поддержка возможностей HTML и CSS, проблемы безопасности и проблемы доступности.</p>\n<p>Собственное решение устранило бы большую часть этой проблемы, если бы оно было реализовано правильно. К счастью, несколько лет спустя в спецификации <a>HTML5</a> были добавлены такие функции, с элементами <a><code>&lt;video&gt;</code></a> и <a><code>&lt;audio&gt;</code></a>, и некоторые новые <a>JavaScript</a> <a>API</a> для их управления. Мы не будем рассматривать JavaScript здесь - только необходимые основы, которые могут быть достигнуты с помощью HTML.</p>\n<p>Мы не будем учить вас, как создавать аудио и видеофайлы - для этого требуется совершенно другой набор навыков. Мы предоставили вам образцы аудио и видеофайлов и пример кода для вашего собственного эксперимента, на случай, если у вас нет под рукой собственных.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Прежде всего, вы также должны знать, что есть немало <a class="page-not-created" title="Документация об этом ещё не написана. Пожалуйста, поспособствуйте её написанию!">OVPs</a> (провайдеров онлайн-видео) вроде <a class="external" target="_blank">YouTube</a>, <a class="external" target="_blank">Dailymotion</a> и <a class="external" target="_blank">Vimeo</a>, а также онлайн аудио-провайдеров вроде <a class="external" target="_blank">Soundcloud</a>. Такие компании предлагают удобный и простой способ размещения и потребления видео, поэтому вам не нужно беспокоиться об огромном потреблении трафика. OVP даже обычно предлагают готовый код для встраивания видео и аудио в ваши веб-страницы. Если вы пойдёте по этому пути, то сможете избежать некоторых трудностей, которые мы обсуждаем в этой статье.</p>\n</div></div></section><section aria-labelledby="элемент_video"><h3 id="элемент_video"><a>Элемент &lt;video&gt;</a></h3><div class="section-content"><p>Элемент <a><code>&lt;video&gt;</code></a> позволяет вам вставлять видео достаточно легко. Очень простой пример выглядит так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><video src="rabbit320.webm" controls="">\n  <p>\n    Ваш браузер не поддерживает HTML5 видео. Используйте\n    <a href="rabbit320.webm">ссылку на видео</a> для доступа.\n  </p>\n</video>\n</pre></div>\n<p>Описание параметров:</p>\n<dl>\n  <dt id="src"><a><code>src</code></a></dt>\n  <dd>\n    <p>Точно так же, как для элемента <a><code>&lt;img&gt;</code></a> , атрибут <code>src</code> (source — источник) содержит путь к видео, которое вы хотите внедрить. Он работает точно так же.</p>\n  </dd>\n  <dt id="controls"><a><code>controls</code></a></dt>\n  <dd>\n    <p>Пользователи должны иметь возможность контролировать воспроизведение видео и аудио (особенно это важно для людей, которые больны <a class="external" target="_blank">эпилепсией</a>). Вы должны либо использовать атрибут <code>controls</code>, чтобы использовать встроенный в браузер интерфейс управления или создать собственный интерфейс, используя соответствующие <a>JavaScript API</a>. Как минимум, интерфейс должен включать способ запуска и остановки медиа-носителя и регулировки громкости.</p>\n  </dd>\n  <dt id="параграф_внутри_тегов"><a>Параграф внутри тегов </a><code>&lt;video&gt;</code></dt>\n  <dd>\n    <p>Это называют <strong>резервный контент</strong> — он будет отображаться, если браузер, показывающий страницу, не поддерживает элемент <code>&lt;video&gt;</code>, позволяя нам обеспечить поддержку для старых версий браузеров. Это может быть все, что вы захотите; в нашем примере мы предоставили прямую ссылку на видеофайл, поэтому пользователь может хотя бы получить к нему доступ, независимо от того, какой браузер он используют.</p>\n  </dd>\n</dl>\n<p>Встроенное видео будет выглядеть примерно так:</p>\n<p>\n  \n</p>\n<p>Вы можете <a class="external" target="_blank">посмотреть живой пример</a> (взгляните также на <a class="external" target="_blank">исходный код</a>).</p></div></section><section aria-labelledby="поддержка_нескольких_форматов"><h3 id="поддержка_нескольких_форматов"><a>Поддержка нескольких форматов</a></h3><div class="section-content"><p>Присутствует одна проблема с приведённым выше примером, которую вы, возможно, уже заметили, если пытались получить доступ к прямой ссылке выше с помощью браузера, такого как Safari или Internet Explorer. Видео не будет воспроизводиться!</p>\n<p>Давайте кратко рассмотрим терминологию. Форматы, такие как MP3, MP4 и WebM, называются <strong>форматами контейнеров</strong>. Они содержат различные части, которые составляют всю песню или видео — например, звуковую дорожку, видеодорожку (в случае видео) и метаданные для описания представленного носителя.</p>\n<p>Например, файл WebM, содержащий фильм, имеет основную видеодорожку и одну дорожку с альтернативным ракурсом, плюс аудио для английского и испанского языков, в дополнение к аудио для дорожки с комментариями на английском языке. Также включены текстовые дорожки, содержащие закрытые субтитры для художественного фильма, испанские субтитры для фильма и английские субтитры для комментариев.</p>\n<p>Аудио и видео треки также находятся в разных форматах, например:</p>\n<ul>\n  <li>Контейнер WebM обычно загружает звук Ogg Vorbis с видео VP8 / VP9. Поддерживается в основном в Firefox и Chrome.</li>\n  <li>Контейнер MP4 часто включает аудио AAC или MP3 с видео H.264. Поддерживается в основном в Internet Explorer и Safari.</li>\n  <li>Более старый контейнер Ogg имеет тенденцию идти с аудио Ogg Vorbis и видео Ogg Theora. Поддерживалось главным образом в Firefox и Chrome, но было вытеснено более качественным форматом WebM.</li>\n</ul>\n<p>Есть несколько особых случаев. Например, для некоторых типов аудио данные кодека часто хранятся без контейнера или с упрощённым контейнером. Одним из таких примеров является кодек FLAC, который чаще всего хранится в файлах FLAC, которые представляют собой просто необработанные дорожки FLAC.</p>\n<p>Ещё одна такая ситуация - всегда популярный файл MP3. «Файл MP3» на самом деле является звуковой дорожкой MPEG-1 Audio Layer III (MP3), хранящейся в контейнере MPEG или MPEG-2. Это особенно интересно, поскольку, хотя большинство браузеров не поддерживают использование мультимедиа MPEG в элементах <a><code>&lt;video&gt;</code></a> и <a><code>&lt;audio&gt;</code></a>, они могут поддерживать MP3 из-за его популярности.</p>\n<p>Аудиоплеер обычно воспроизводит аудиодорожку напрямую, например файл MP3 или Ogg. Для этого не нужны контейнеры.</p>\n<h4 id="поддержка_медиафайлов_в_браузерах">Поддержка медиафайлов в браузерах</h4>\n<p>Вышеупомянутые форматы существуют для сжатия видео и аудио в управляемые файлы (необработанные видео и аудио очень большие). Браузеры содержат разные <a>кодеки</a>, вроде Vorbis или H.264, которые используются для преобразования сжатого звука и видео в бинарные данные и обратно. Каждый кодек имеет свои преимущества и недостатки, и каждый контейнер может также предлагать свои собственные положительные и отрицательные особенности, влияющие на ваше решение о том, какой из них использовать. Как указано выше, браузеры, к сожалению, не поддерживают одни и те же кодеки, поэтому вам придётся предоставить несколько файлов для каждого медиа-продукта. Если вам не хватает правильного кодека для декодирования контента, он просто не сможет воспроизводиться.</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Возможно, вам интересно, как сложилась такая ситуация. MP3 (для аудио) и MP4/H.264 (для видео) широко поддерживаются и имеют высокое качество. В то же время, они защищены патентами — американские патенты охватывают MP3 по крайней мере до 2017 года и H.264 самое меньшее до 2027 года, так что браузеры, которые не являются держателями этих патентов, должны платить огромные суммы денег для поддержки этих форматов. Кроме того, многие люди избегают несвободного программного обеспечения в принципе, предпочитая открытые форматы. Вот почему мы должны предоставить несколько форматов для разных браузеров.</p>\n</div>\n<p>Все становится немного сложнее, потому что каждый браузер не только поддерживает свой набор форматов файлов-контейнеров, но и каждый из них поддерживает свой выбор кодеков. Чтобы максимизировать вероятность того, что ваш веб-сайт или приложение будет работать в браузере пользователя, вам может потребоваться предоставить каждый медиафайл, который вы используете, в нескольких форматах. Если ваш сайт и браузер пользователя не используют общий медиаформат, ваши медиа просто не будут воспроизводиться.</p>\n<p>Из-за сложности обеспечения возможности просмотра мультимедийных файлов вашего приложения в любой комбинации браузеров, платформ и устройств, которые вы хотите использовать, выбор наилучшего сочетания кодеков и контейнера может оказаться сложной задачей. Смотрите <a class="only-in-en-us" title="Currently only available in English (US)">выбор подходящего контейнера <small>(en-US)<small></small></small></a> для получения помощи по выбору формата файла контейнера, наиболее подходящего для ваших нужд; аналогичным образом смотрите <a class="only-in-en-us" title="Currently only available in English (US)">выбор видеокодека <small>(en-US)<small></small></small></a> и <a class="only-in-en-us" title="Currently only available in English (US)">выбор аудиокодека <small>(en-US)<small></small></small></a> для помощи в выборе первых медиакодеков, которые будут использоваться для вашего контента и вашей целевой аудитории.</p>\n<p>Ещё одна вещь, о которой следует помнить: мобильные браузеры могут поддерживать дополнительные форматы, не поддерживаемые их настольными эквивалентами, точно так же, как они могут не поддерживать все те же форматы, что и настольная версия. Вдобавок ко всему, как настольные, так и мобильные браузеры могут быть спроектированы так, чтобы разгрузить обработку воспроизведения мультимедиа (либо для всех мультимедиа, либо только для определённых типов, которые он не может обрабатывать внутренне). Это означает, что поддержка мультимедиа частично зависит от того, какое программное обеспечение установил пользователь.</p>\n<p>Так как мы это сделаем? Взгляните на следующий <a class="external" target="_blank">обновлённый пример</a> (и попробуйте <a class="external" target="_blank">живой пример</a>):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><video controls="">\n  <source src="rabbit320.mp4" type="video/mp4">\n  <source src="rabbit320.webm" type="video/webm">\n  <p>\n    Ваш браузер не поддерживает HTML5 видео. Вот\n    <a href="rabbit320.mp4">ссылка на видео</a> взамен.\n  </p>\n</video>\n</pre></div>\n<p>Здесь мы изъяли атрибут <code>src</code> из нашего тега <code>&lt;video&gt;</code>, и вместо этого включали отдельные элементы <a><code>&lt;source&gt;</code></a>, каждый из которых ссылается на собственный источник. В этом случае браузер пройдётся по элементам <code>&lt;source&gt;</code> и начнёт воспроизводить первый из них, который имеет поддерживаемый кодек. Включение источников WebM и MP4 должно быть достаточно для воспроизведения вашего видео на большинстве платформ и браузеров в наши дни.</p>\n<p>Каждый элемент <code>&lt;source&gt;</code> также имеет атрибут <code>type</code>. Он не обязательный, но рекомендуется его включать — он содержит <a>MIME types</a> видеофайла, браузеры могут прочитать их и сразу же пропустить видео, которые они не понимают. Если <code>type</code> не включён, браузеры загружают и пытаются воспроизвести каждый файл до тех пор, пока не найдут тот, который будет работать, затрачивая больше времени и ресурсов.</p>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Наша <a class="page-not-created" title="This is a link to an unwritten page">статья о поддерживаемых медиаформатах</a> описывает некоторые распространённые <a>MIME types</a>.</p>\n</div></div></section><section aria-labelledby="другие_параметры_video"><h3 id="другие_параметры_video"><a>Другие параметры &lt;video&gt;</a></h3><div class="section-content"><p>Есть ряд других параметры, которые вы можете включить в HTML5 элемент <code>video</code>. Взгляните на наш третий пример:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><video controls="" width="400" height="400" autoplay="" loop="" muted="" poster="poster.png">\n  <source src="rabbit320.mp4" type="video/mp4">\n  <source src="rabbit320.webm" type="video/webm">\n  <p>\n    Your browser doesn\'t support HTML5 video. Here is a\n    <a href="rabbit320.mp4">link to the video</a> instead.\n  </p>\n</video>\n</pre></div>\n<p>На выходе получим нечто, подобное этому:</p>\n<p>**\n  **Новые параметры:\n</p>\n<dl>\n  <dt id="width_and_height"><strong><a><code>width</code></a> and <a><code>height</code></a></strong></dt>\n  <dd>\n    <p>Вы можете контролировать размер видео либо с помощью этих атрибутов, либо с помощью <a>CSS</a>. В обоих случаях видео поддерживают собственное соотношение ширины и высоты — известное как соотношение сторон. Если соотношение сторон не поддерживается установленными вами размерами, видео будет увеличиваться, чтобы заполнить пространство по горизонтали, а заполненному пространству по умолчанию будет задан сплошной цвет фона.</p>\n  </dd>\n  <dt id="autoplay"><strong><a><code>autoplay</code></a></strong></dt>\n  <dd>\n    <p>Этот атрибут позволяет сразу начать воспроизведение звука или видео, пока остальная часть страницы загружается. Вам не рекомендуется использовать автовоспроизведение видео (или аудио) на ваших сайтах, потому что пользователи могут найти это действительно раздражающим.</p>\n  </dd>\n  <dt id="loop"><strong><a><code>loop</code></a></strong></dt>\n  <dd>\n    <p>Этот атрибут позволяет воспроизводить видео (или аудио) снова, когда он заканчивается. Это также может раздражать, поэтому используйте тогда, когда это действительно необходимо.</p>\n  </dd>\n  <dt id="muted"><strong><a><code>muted</code></a></strong></dt>\n  <dd>\n    <p>Этот атрибут заставляет проигрыватель воспроизводить звук, отключённый по умолчанию.</p>\n  </dd>\n  <dt id="poster"><strong><a><code>poster</code></a></strong></dt>\n  <dd>\n    <p>Этот атрибут принимает в качестве значения URL-адрес изображения, который будет отображаться до воспроизведения видео. Он предназначен для заставки к видео или рекламы.</p>\n  </dd>\n  <dt id="preload"><strong><a><code>preload</code></a></strong></dt>\n  <dd>\n    <p>этот атрибут используется в элементе для буферизации больших файлов. Он может принимать одно из трёх значений:</p>\n    <ul>\n      <li><code>"none"</code> не буферизирует файл</li>\n      <li><code>"auto"</code> буферизирует медиафайл</li>\n      <li><code>"metadata"</code> буферирует только метаданные файла</li>\n    </ul>\n  </dd>\n</dl>\n<p>Вы можете найти приведённый выше пример для воспроизведения <a class="external" target="_blank">на Github</a> (также <a class="external" target="_blank">просмотрите исходный код</a>.) Обратите внимание, что мы не включили атрибут <code>autoplay</code> в live-версию - если видео начнёт воспроизводиться, как только страница загрузится, вы не увидите заставку к видео!</p></div></section><section aria-labelledby="элемент_audio"><h3 id="элемент_audio"><a>Элемент &lt;audio&gt;</a></h3><div class="section-content"><p>Элемент <a><code>&lt;audio&gt;</code></a> работает точно так же, как элемент <a><code>&lt;video&gt;</code></a>, с несколькими небольшими отличиями, которые описаны ниже. Типичный пример может выглядеть так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><audio controls="">\n  <source src="viper.mp3" type="audio/mp3">\n  <source src="viper.ogg" type="audio/ogg">\n  <p>\n    Your browser doesn\'t support HTML5 audio. Here is a\n    <a href="viper.mp3">link to the audio</a> instead.\n  </p>\n</audio>\n</pre></div>\n<p>В браузере это вызывает следующее:</p>\n<p>\n  \n</p>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> Примечание: вы можете запустить <a class="external" target="_blank">аудио-демо</a> в Github (см. также <a class="external" target="_blank">исходный код аудиоплеера</a>.)</p>\n</div>\n<p>Он занимает меньше места, чем видеоплеер, поскольку нет визуального компонента - вам просто нужно отображать элементы управления для воспроизведения звука. Другие отличия от видео HTML5 заключаются в следующем:</p>\n<ul>\n  <li>Элемент <a><code>&lt;audio&gt;</code></a> не поддерживает атрибуты <code>width</code> и <code>height</code> - опять же, нет визуального компонента, поэтому присваивать ширину или высоту не к чему.</li>\n  <li>Он также не поддерживает атрибут <code>poster</code> опять же, из-за отсутствия визуального компонента.</li>\n</ul>\n<p>Помимо этого, <code>&lt;audio&gt;</code> поддерживает все те же функции, что и <code>&lt;video&gt;</code> - просмотрите приведённые выше разделы для получения дополнительной информации о них.</p></div></section><section aria-labelledby="отображение_текстовых_дорожек_к_видео"><h2 id="отображение_текстовых_дорожек_к_видео"><a>Отображение текстовых дорожек к видео</a></h2><div class="section-content"><p>Теперь мы обсудим немного более продвинутую концепцию, о которой очень полезно знать. Многие люди не могут или не хотят слышать аудио или видео контент, который они находят в Интернете, по крайней мере, в определённое время. Например:</p>\n<ul>\n  <li>У многих людей есть слуховые нарушения (более известные как слабослышащие или глухие).</li>\n  <li>Другие могут не слышать звук, потому что они находятся в шумной обстановке (например, в переполненном баре при показе спортивной игры) или, возможно, не хотят беспокоить других, если они находятся в тихом месте (например, в библиотеке).</li>\n  <li>Люди, которые не говорят на языке из видео, могут захотеть увидеть текстовую расшифровку или даже перевод, чтобы помочь им понять медиа-контент.</li>\n</ul>\n<p>Разве было бы неплохо иметь возможность предоставить этим людям транскрипцию слов, произносимых в аудио или видео? Благодаря HTML5 вы можете это сделать с форматом <a class="only-in-en-us" title="Currently only available in English (US)">WebVTT <small>(en-US)<small></small></small></a> и элементом <a><code>&lt;track&gt;</code></a>.</p>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> "Транскрибировать" значит записывать устную речь в виде текста. Полученный текст представляет собой «стенограмму».</p>\n</div>\n<p>WebVTT - это формат для записи текстовых файлов, содержащих несколько строк текста, а также метаданные, такие как время, в которое вы хотите отображать каждую текстовую строку, и даже ограниченную информацию о стиле/позиционировании. Эти текстовые строки называются репликами, и вы можете отображать разные типы для разных целей, наиболее распространёнными являются:</p>\n<dl>\n  <dt id="субтитры"><a><strong>субтитры</strong></a></dt>\n  <dd>\n    <p>Переводы иностранного материала, для людей, которые не понимают слов, произнесённых в аудио.</p>\n  </dd>\n  <dt id="титры"><a><strong>титры</strong></a></dt>\n  <dd>\n    <p>Синхронизированные транскрипции диалога или описания значимых звуков, чтобы люди, которые не могут слышать звук, поняли что происходит.</p>\n  </dd>\n  <dt id="рассчитанные_описания"><a><strong>рассчитанные описания</strong></a></dt>\n  <dd>\n    <p>Текст для преобразования в аудио, чтобы обслуживать людей с нарушениями зрения.</p>\n  </dd>\n</dl>\n<p>Типичный файл WebVTT будет выглядеть примерно так:</p>\n<pre compile="false" disable="true" language="markup">WEBVTT\n\n1\n00:00:22.230 --&gt; 00:00:24.606\nЭто первый субтитр.\n\n2\n00:00:30.739 --&gt; 00:00:34.074\nЭто второй.\n\n  ...\n</pre>\n<p>Чтобы отобразить это вместе с воспроизведением мультимедиа HTML, вам необходимо:</p>\n<ol>\n  <li>Сохраните его как <code>.vtt</code>- файл, в разумном месте.</li>\n  <li>Ссылка на файл <code>.vtt</code> с элементом <a><code>&lt;track&gt;</code></a>. <code>&lt;track&gt;</code> должен быть помещён в <code>&lt;audio&gt;</code> или <code>&lt;video&gt;</code>, но после элементов <code>&lt;source&gt;</code>. Используйте атрибут <a><code>kind</code></a>, чтобы указать, являются ли реплики <code>субтитрами</code>, <code>титрами</code> или <code>описаниями</code>. Кроме того, используйте <a><code>srclang</code></a>, чтобы сообщить браузеру, на каком языке вы записывали субтитры.</li>\n</ol>\n<p>Вот пример:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><video controls="">\n  <source src="example.mp4" type="video/mp4">\n  <source src="example.webm" type="video/webm">\n  <track kind="subtitles" src="subtitles_en.vtt" srclang="en">\n</video>\n</pre></div>\n<p>Это приведёт к просмотру видео с субтитрами, таким как:</p>\n<p>\n  \n</p>\n<p>Подробнее читайте в разделе <a>добавление титров и субтитров к видео HTML5</a>. Вы можете <a class="external" target="_blank">найти пример</a>, который соответствует этой статье в Github, написанной Яном Девлином (см. также <a class="external" target="_blank">исходный код</a>). В этом примере используется JavaScript, позволяющий пользователям выбирать между различными субтитрами. Обратите внимание, что для включения субтитров вам нужно нажать кнопку «CC» и выбрать вариант - английский, немецкий или испанский.</p>\n<div class="notecard note" id="sect6">\n  <p><strong>Примечание:</strong> Текстовые треки также помогут вам с <a>SEO</a>, так как поисковые системы особенно преуспевают в работе с текстом. Текстовые треки даже позволяют поисковым системам напрямую связываться с местом, происходящим в видео.</p>\n</div></div></section><section aria-labelledby="активное_обучение_внедрение_собственного_аудио_и_видео"><h3 id="активное_обучение_внедрение_собственного_аудио_и_видео"><a>Активное обучение: Внедрение собственного аудио и видео</a></h3><div class="section-content"><p>Для этого активного обучения мы (в идеале) хотели бы, чтобы вы вышли на улицу и записали некоторые из ваших собственных видео и аудио. Большинство телефонов в наши дни позволяют очень легко записывать аудио и видео, и, если вы можете перенести их на свой компьютер, вы можете их использовать. Возможно, вам придётся сделать некоторое преобразование, чтобы в конечном итоге получить WebM и MP4 в случае видео, а также MP3 и Ogg в случае аудио, но есть достаточно программ, чтобы вы могли сделать это без особых проблем, таких как <a class="external" target="_blank">Miro Video Converter</a> и <a class="external" target="_blank">Audacity</a>. Мы хотели бы, чтобы вы попробовали сделать это!</p>\n<p>Если у вас нет какого-либо видео или аудио, вы можете свободно пользоваться нашими <a class="external" target="_blank">образцами аудио и видео файлов</a> для выполнения этого упражнения. Вы также можете использовать наш образец кода для справки.</p>\n<p>Мы хотим, чтобы вы сделали следующие действия:</p>\n<ol>\n  <li>Сохраните аудио и видео файлы в новом каталоге на вашем компьютере.</li>\n  <li>Создайте новый HTML файл в том же каталоге и назовите его <code>index.html</code>.</li>\n  <li>Добавьте элементы <code>&lt;audio&gt;</code> и <code>&lt;video&gt;</code> на страницу; чтобы они отображали элементы управления браузером по умолчанию.</li>\n  <li>Введите оба варианта элемента <code>&lt;source&gt;</code>, чтобы браузеры находили оптимальный формат звука, который он поддерживает и загружает. Они должны включать <code>type</code> атрибуты.</li>\n  <li>Дайте элементу <code>&lt;video&gt;</code> заставку, которая будет отображаться до начала воспроизведения видео. Получайте удовольствие, создавая свою собственную заставку к видео.</li>\n</ol>\n<p>Для дополнительного бонуса вы можете попробовать исследовать текстовые треки и выяснить, как добавить некоторые титры к вашему видео.</p></div></section><section aria-labelledby="краткое_изложение"><h2 id="краткое_изложение"><a>Краткое изложение</a></h2><div class="section-content"><p>Мы надеемся, что вам понравилось играть с видео и аудио на веб-страницах! В следующей статье мы рассмотрим другие способы встраивания контента в Web, используя такие технологии, как <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;iframe&gt;</code> <small>(en-US)</small></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;object&gt;</code> <small>(en-US)</small></a>.</p></div></section>',
					works: [],
				},
				{
					title: 'От <object> к <iframe> - другие технологии внедрения',
					chapter: 1.16,
					content:
						'<header><h1>От &lt;object&gt; к &lt;iframe&gt; - другие технологии внедрения</h1></header><div class="section-content">\n<p>К настоящему моменту вы уже должны уметь прикреплять вложения на свои веб-страницы, включая изображения, видео и аудио. На этом этапе мы хотели бы сделать шаг в сторону, рассматривая некоторые элементы, которые позволяют встраивать в ваши веб-страницы самые разнообразные типы контента: <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;iframe&gt;</code> <small>(en-US)</small></a>, <a><code>&lt;embed&gt;</code></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;object&gt;</code> <small>(en-US)</small></a>. &lt;iframe&gt; предназначен для встраивания других веб-страниц, а два других позволяют встраивать PDF-файлы, SVG и даже Flash - устаревшую технологию, которую вы всё равно иногда увидите.</p>\n</div><section aria-labelledby="краткая_история_внедрения"><h2 id="краткая_история_внедрения"><a>Краткая история внедрения</a></h2><div class="section-content"><p>Давным-давно в Интернете было популярно использовать <strong>фреймы</strong> для создания веб-сайтов - небольших частей веб-сайта, хранящихся на отдельных страницах HTML. Они были встроены в главный документ, называемый <strong>набором фреймов</strong>, который позволял вам указать область на экране, которую заполнял каждый фрейм, а не столбец и строку таблицы. Они были популярны в середине и конце 90-х годов и были доказательством того, что разделение веб-страницы на более мелкие куски лучше сказывается на скорости загрузки, особенно это заметно, когда сетевые соединения были медленными. Однако у них было много проблем, которые намного перевешивали любые положительные моменты, когда скорость сети становилась выше. Поэтому вы больше не увидите, чтобы их использовали.</p>\n<p>Спустя некоторое время (конец 90-х, начало 2000-х годов) технологии плагинов, такие как Java-апплеты и Flash, стали очень популярными - это позволило веб-разработчикам встраивать богатый контент в веб-страницы, такие как видео и анимации, которые просто не были доступны только через HTML. Внедрение этих технологий осуществлялось посредством таких элементов, как <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;object&gt;</code> <small>(en-US)</small></a> и менее используемого <a><code>&lt;embed&gt;</code></a>, и они были очень полезны в то время. С тех пор они вышли из моды из-за многих проблем, включая доступность, безопасность, размер файла и многое другое; в наши дни большинство мобильных устройств больше не поддерживают такие плагины, и поддержка на компьютерах также уменьшается.</p>\n<p>Наконец, появился элемент <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;iframe&gt;</code> <small>(en-US)</small></a> (наряду с другими способами встраивания контента, например <a><code>&lt;canvas&gt;</code></a>, <a><code>&lt;video&gt;</code></a> и т. д. ) Он позволяет встраивать целый веб-документ внутри другого, как если бы это был <a><code>&lt;img&gt;</code></a> или другой подобный элемент, и сегодня используется повсеместно.</p>\n<p>Урок истории закончен, давайте двигаться дальше и посмотрим, как использовать некоторые из них.</p></div></section><section aria-labelledby="активное_обучение_использование_классического_внедрения"><h2 id="активное_обучение_использование_классического_внедрения"><a>Активное обучение: использование классического внедрения</a></h2><div class="section-content"><p>В этой статье мы собираемся перейти прямо в раздел активного обучения, чтобы сразу дать вам реальное представление о том, для чего используются технологии внедрения. Нам очень хорошо знаком Youtube, но многие не знают о некоторых доступных для него средствах совместного доступа. Давайте посмотрим, как Youtube позволяет нам встраивать видео на любую страницу, которая нам нравится, используя <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;iframe&gt;</code> <small>(en-US)</small></a>.</p>\n<ol>\n  <li>Сначала перейдите на Youtube и найдите понравившееся вам видео.</li>\n  <li>Под видео вы найдёте кнопку «Поделиться» - нажмите, чтобы отобразить параметры совместного доступа.</li>\n  <li>Выберите кнопку «Вставить», и вам будет предоставлен код &lt;iframe&gt; - скопируйте его.</li>\n  <li>Вставьте его в поле ввода ниже и посмотрите на результат в Output.</li>\n</ol>\n<p>Дополнительно вы также можете попробовать внедрить карту Google следующим образом:</p>\n<ol>\n  <li>Перейдите в Карты Google и найдите подходящую вам карту.</li>\n  <li>Нажмите «Меню» (три горизонтальные линии) в верхнем левом углу пользовательского интерфейса.</li>\n  <li>Выберите параметр Ссылка/код.</li>\n  <li>Выберите параметр Встраивание карт, который даст вам код &lt;iframe&gt; - скопируйте его.</li>\n  <li>Вставьте его в поле ввода ниже и посмотрите на результат в Output.</li>\n</ol>\n<p>Если вы допустили ошибку, вы всегда можете сбросить её с помощью кнопки «Сброс». Если вы действительно застряли, нажмите кнопку «Показать решение», чтобы увидеть ответ.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h2>Live output</h2>\n\n<div class="output" style="min-height: 250px;"></div>\n\n<h2>Editable code</h2>\n<p class="a11y-label">\n  Press Esc to move focus away from the code area (Tab inserts a tab character).\n</p>\n\n<input id="code" class="input" style="width: 95%;min-height: 100px;"></input>\n\n<div class="playable-buttons">\n  <input id="reset" type="button" value="Reset">\n  <input id="solution" type="button" value="Show solution">\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">html {\n  font-family: sans-serif;\n}\n\nh2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">var textarea = document.getElementById("code");\nvar reset = document.getElementById("reset");\nvar solution = document.getElementById("solution");\nvar output = document.querySelector(".output");\nvar code = textarea.value;\nvar userEntry = textarea.value;\n\nfunction updateCode() {\n  output.innerHTML = textarea.value;\n}\n\nreset.addEventListener("click", function () {\n  textarea.value = code;\n  userEntry = textarea.value;\n  solutionEntry = htmlSolution;\n  solution.value = "Show solution";\n  updateCode();\n});\n\nsolution.addEventListener("click", function () {\n  if (solution.value === "Show solution") {\n    textarea.value = solutionEntry;\n    solution.value = "Hide solution";\n  } else {\n    textarea.value = userEntry;\n    solution.value = "Show solution";\n  }\n  updateCode();\n});\n\nvar htmlSolution =\n  \'<iframe width="420" height="315" src="https://www.youtube.com/embed/QH2-TGUlwu4" frameborder="0" allowfullscreen="">\n</iframe>\n\n<iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d37995.65748333395!2d-2.273568166412784!3d53.473310471916975!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x487bae6c05743d3d%3A0xf82fddd1e49fc0a1!2sThe+Lowry!5e0!3m2!1sen!2suk!4v1518171785211" width="600" height="450" frameborder="0" style="border:0" allowfullscreen="">\n</iframe>\';\nvar solutionEntry = htmlSolution;\n\ntextarea.addEventListener("input", updateCode);\nwindow.addEventListener("load", updateCode);\n\n// stop tab key tabbing out of textarea and\n// make it write a tab at the caret position instead\n\ntextarea.onkeydown = function (e) {\n  if (e.keyCode === 9) {\n    e.preventDefault();\n    insertAtCaret("\t");\n  }\n\n  if (e.keyCode === 27) {\n    textarea.blur();\n  }\n};\n\nfunction insertAtCaret(text) {\n  var scrollPos = textarea.scrollTop;\n  var caretPos = textarea.selectionStart;\n\n  var front = textarea.value.substring(0, caretPos);\n  var back = textarea.value.substring(\n    textarea.selectionEnd,\n    textarea.value.length,\n  );\n  textarea.value = front + text + back;\n  caretPos = caretPos + text.length;\n  textarea.selectionStart = caretPos;\n  textarea.selectionEnd = caretPos;\n  textarea.focus();\n  textarea.scrollTop = scrollPos;\n}\n\n// Update the saved userCode every time the user updates the text area code\n\ntextarea.onkeyup = function () {\n  // We only want to save the state when the user code is being shown,\n  // not the solution, so that solution is not saved over the user code\n  if (solution.value === "Show solution") {\n    userEntry = textarea.value;\n  } else {\n    solutionEntry = textarea.value;\n  }\n\n  updateCode();\n};\n</pre></div><div class="code-example" id="sect1"><div class="example-header" id="sect2"></div></div></div></section><section aria-labelledby="подробно_об_iframes"><h2 id="подробно_об_iframes"><a>Подробно об Iframes</a></h2><div class="section-content"><p>Итак, это было легко и весело, не так ли? Элементы <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;iframe&gt;</code> <small>(en-US)</small></a> предназначены для размещения других веб-документов в текущем документе. Это отлично подходит для включения стороннего контента на ваш сайт, который, возможно, не имеет прямого контроля и не хочет реализовывать вашу собственную версию - например, видео от поставщиков онлайн-видео, системы комментариев, такие как Disqus, карты от поставщиков онлайн-карт, рекламных баннеров и т. д. Живые редактируемые примеры, которые вы использовали в этом курсе, реализованы с помощью &lt;iframe&gt;.</p>\n<p>Есть несколько серьёзных <a>Проблем безопасности</a> при использовании &lt;iframe&gt;, которые мы обсудим ниже, но это не значит, что вы не должны использовать их на своих сайтах - они просто требуют некоторых знаний и тщательного обдумывания. Давайте рассмотрим код немного подробнее. Скажем, вы хотите добавить глоссарий MDN на одну из своих веб-страниц. Вы можете попробовать что-то вроде этого:</p>\n<pre compile="false" disable="true" language="markup"><iframe src="https://developer.mozilla.org/ru/docs/Glossary" width="100%" height="500" frameborder="0" allowfullscreen="" sandbox="">\n  <p> <a href="https://developer.mozilla.org/ru/docs/Glossary">\n    Fallback link for browsers that don\'t support iframes\n  </a> </p>\n</iframe>\n</pre>\n<p>Этот пример включает основы, необходимые для использования &lt;iframe&gt;:</p>\n<dl>\n  <dt id="allowfullscreen"><a class="only-in-en-us" title="Currently only available in English (US)"><code>allowfullscreen</code> <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Если установлено, &lt;iframe&gt; может быть помещён в полноэкранный режим с использованием полноэкранного API (что несколько выходит за рамки этой статьи).</p>\n  </dd>\n  <dt id="frameborder"><a class="only-in-en-us" title="Currently only available in English (US)"><code>frameborder</code> <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Если установлено значение 1, это указывает браузеру нарисовать границу между этим фреймом и другими фреймами, что является поведением по умолчанию. 0 удаляет границу. Использование этого на самом деле не рекомендуется, так как тот же эффект можно улучшить, используя <a><code>border</code></a>: none; в <a>CSS</a>.</p>\n  </dd>\n  <dt id="src"><a class="only-in-en-us" title="Currently only available in English (US)"><code>src</code> <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Этот атрибут, как и <a><code>&lt;video&gt;</code></a> / <a><code>&lt;img&gt;</code></a>, содержит путь, указывающий на URL-адрес внедряемого документа.</p>\n  </dd>\n  <dt id="width"><a class="only-in-en-us" title="Currently only available in English (US)"><code>width</code> <small>(en-US)<small></small></small></a> and <a class="only-in-en-us" title="Currently only available in English (US)"><code>height</code> <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Эти атрибуты определяют ширину и высоту, в которых вы хотите использовать iframe.</p>\n  </dd>\n  <dt id="резервный_контент"><a>Резервный контент</a></dt>\n  <dd>\n    <p>Точно так же, как и другие подобные элементы, такие как <a><code>&lt;video&gt;</code></a>, вы можете включить резервный контент между тегами открытия и закрытия &lt;iframe&gt; &lt;/ iframe&gt;, которые появятся, если браузер не поддерживает &lt; IFRAME&gt;. В этом случае мы включили ссылку на страницу. Вряд ли вы столкнётесь с таким браузером, который не поддерживает &lt;iframe&gt; в наше время.</p>\n  </dd>\n  <dt id="sandbox"><a class="only-in-en-us" title="Currently only available in English (US)"><code>sandbox</code> <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Этот атрибут, который работает в более современных браузерах, чем остальные функции &lt;iframe&gt; (например, IE 10 и выше). Он запрашивает повышенные настройки безопасности. Об этом мы расскажем в следующем разделе.</p>\n  </dd>\n</dl>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Чтобы повысить скорость загрузки, рекомендуется установить атрибут src в элементе iframe с помощью JavaScript после того, как основное содержимое будет загружено. Это ускорит вашу страницу и уменьшит время загрузки официальной страницы (важный показатель <a>SEO</a>.)</p>\n</div></div></section><section aria-labelledby="проблемы_безопасности"><h3 id="проблемы_безопасности"><a>Проблемы безопасности</a></h3><div class="section-content"><p>Выше мы упомянули о проблемах безопасности. Давайте рассмотрим это чуть подробнее. Мы не ожидаем, что вы всё поймёте с первого раза. Мы просто хотим сообщить вам о проблеме и предоставить ссылку, чтобы вы могли вернуться к ней, когда станете более опытными и начнёте рассматривать использование iframe в своих экспериментах и работе. Кроме того, нет необходимости бояться и не использовать &lt;iframe&gt; - вам просто нужно быть осторожным. Продолжим...</p>\n<p>Разработчики браузеров и веб-разработчики на горьком опыте усвоили, что iframe - частая цель (официальный термин: вектор атаки) плохих людей в Интернете (часто называемых хакерами, или, более точно, крекерами) для атаки при попытке злонамеренно изменить ваши веб-страницы или обманом заставить посетителей делать то, чего они не хотят, например, раскрыть конфиденциальную информацию вроде имени пользователя и пароли. Чтобы избежать этого, авторы спецификаций и разработчики браузеров разработали различные механизмы безопасности для обеспечения защиты &lt;iframe&gt;, лучшие из которых мы рассмотрим ниже.</p>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> <a class="external" target="_blank">Кликджекинг</a> – это один из видов обычной атаки iframe, когда хакеры внедряют невидимый iframe в ваш документ (или внедряют ваш документ на свой собственный вредоносный веб-сайт) и используют его для захвата взаимодействия пользователей. Это обычный способ ввести пользователей в заблуждение или украсть конфиденциальные данные.</p>\n</div>\n<p>Быстрый пример - попробуйте загрузить предыдущий пример, который мы показали выше, в ваш браузер (вы можете найти его живой пример на Github (см. Также исходный код). На самом деле, вы ничего не увидите на странице, т.к. если вы посмотрите в консоль в инструментах разработчика браузера, вы увидите сообщение, объясняющее вам, почему. В Firefox вы получите сообщение <em>«Отказано в доступе» в связи с X-Frame-Options: <code>https://developer.mozilla.org/ru/docs/Glossary</code> не разрешает кадрирование</em>. Это связано с тем, что разработчики, которые построили MDN, включили параметр на сервере, который обслуживает страницы веб-сайта, запрещая им внедряться внутри &lt;iframe&gt; (см. <a>Настройка директивы CSP</a> ниже). Суть здесь такова - целой странице MDN на самом деле нет смысла встраиваться в другие страницы - конечно, если вы не хотите сделать что-то вроде встраивания их на свой сайт и выставлять их как свои собственные; или пытаться украсть данные с помощью clickjacking, что очень плохо. Плюс, если все начнут это делать, вся дополнительная пропускная способность начнёт стоить Mozilla больших денег.</p>\n<h4 id="используйте_только_при_необходимости">Используйте только при необходимости</h4>\n<p>Иногда имеет смысл вставлять сторонний контент - например, видео и карты, но вы избежите головной боли, если будете вставлять сторонний контент только тогда, когда это абсолютно необходимо. Хорошее эмпирическое правило для веб-безопасности: «Вы никогда не можете быть слишком осторожным. Если вы что-то сделали, дважды проверьте это. Если кто-то другой сделал это, считайте, что это опасно, пока не будет доказано обратное».</p>\n<p>Помимо безопасности, вы также должны знать об интеллектуальной собственности. Большинство контента находится под защитой авторских прав, даже тот, от которого вы не могли ожидать (например, большинство картинок на <a class="external" target="_blank">Wikimedia Commons</a>). Никогда не выводите контент на свою страницу, если он вам не принадлежит или если нет однозначного письменного разрешения от правообладателя. Наказания за нарушения авторских прав строги. И, повторимся, вы никогда не можете быть слишком осторожными.</p>\n<p>Если контент лицензирован, вы должны соблюдать условия лицензии. Например, контент на MDN лицензирован на <a>licensed under CC-BY-SA</a>. Это означает, что вы <a class="external" target="_blank">должны относиться к нам с уважением</a>, когда цитируете наш контент, даже если внесли в него существенные изменения.</p>\n<h4 id="используйте_https">Используйте HTTPS</h4>\n<p><a>HTTPS</a> это зашифрованная версия <a>HTTP</a>. Вы должны обслуживать свои веб-сайты, используя HTTPS, всегда, когда это возможно :</p>\n<ol>\n  <li>HTTPS уменьшает вероятность того, что контент был изменён по пути;</li>\n  <li>HTTPS запрещает доступ внедрённого контента к контенту в вашем исходном документе и наоборот.</li>\n</ol>\n<p>Использование HTTPS требует сертификат безопасности, что может обходиться в копеечку (хотя есть <a class="external" target="_blank">Let\'s Encrypt</a>, что облегчает задачу). Если вы не можете его получить, вы можете отдавать свой родительский документ с помощью HTTP. Однако, из-за второго преимущества HTTPS <em>во что бы то ни стало</em> вы не должны внедрять сторонний контент с HTTP. (В лучшем случае ваш браузер выдаст угрожающее предупреждение.) Все уважаемые компании, которые делают контент доступным для внедрения через &lt;iframe&gt;, доступны через HTTPS - посмотрите URL-адреса внутри &lt;iframe&gt; src при встраивании, например, содержимого из Карт Google или Youtube.</p>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> <a>Github pages</a> позволяют предоставлять контент через HTTPS по умолчанию, поэтому это полезно для размещения контента. Если вы используете другой хостинг и не уверены, спросите хостинг-провайдера об этом.</p>\n</div>\n<h4 id="всегда_используйте_атрибут_sandbox">Всегда используйте атрибут <code>sandbox</code></h4>\n<p>Вы хотите дать хакерам как можно меньше возможностей, чтобы делать плохие вещи на вашем веб-сайте, поэтому вы должны позволять копипастить встроенный контент только с разрешений, необходимых для выполнения этого действия. Конечно, это относится и к вашему собственному контенту. Контейнер для кода, в котором он может использоваться надлежащим образом или для тестирования, но не может нанести вред остальной части кодовой базы (случайной или злонамеренной), называется <a class="external" target="_blank">sandbox</a>.</p>\n<p>Контент, не ограниченный sandbox, может сделать слишком многое (выполнение JavaScript, отправка форм, всплывающие окна и т. д.). По умолчанию включайте все возможные ограничения, используя атрибут <code>sandbox</code> без параметров, как показано в предыдущем примере.</p>\n<p>Если это необходимо, вы можете добавлять разрешения один за другим (внутри значения атрибута <code>sandbox=""</code>) — смотри <a class="only-in-en-us" title="Currently only available in English (US)"><code>sandbox</code> <small>(en-US)<small></small></small></a> ссылка для всех доступных опций. Важно отметить, что вы <em>никогда</em> не должны добавлять атрибуты <code>allow-scripts</code> и <code>allow-same-origin</code> в свой <code>sandbox</code> атрибут одновременно — в таком случае, встроенный контент может обходить политику безопасности, которая запрещает сайтам выполнять скрипты и использовать JavaScript для отключения "песочницы" sandbox .</p>\n<div class="notecard note" id="sect6">\n  <p><strong>Примечание:</strong> "Песочница" не обеспечивает защиту, если злоумышленники могут обманывать людей через прямое посещение вредоносного контента (вне iframe). Если есть вероятность, что определённый контент может быть вредоносным (например, созданный пользователями контент), пожалуйста, используйте его из другого <a>domain</a> на ваш основной сайт.</p>\n</div>\n<h4 id="настройка_директив_csp">Настройка директив CSP</h4>\n<p><a>CSP</a> означает <strong><a>политику безопасности контента</a></strong> и обеспечивает <a class="only-in-en-us" title="Currently only available in English (US)">набор заголовков HTTP <small>(en-US)<small></small></small></a> (метаданные, отправленные вместе с вашими веб-страницами, когда они обслуживаются с веб-сервера), предназначенных для улучшения безопасности вашего HTML-документа. Когда дело доходит до обеспечения безопасности <code>&lt;iframe&gt;</code>, вы можете <em><a class="only-in-en-us" title="Currently only available in English (US)">настроить сервер для отправки соответствующего <code>X-Frame-Options</code> заголовка. <small>(en-US)<small></small></small></a></em> Это может помешать другим веб-сайтам встраивать ваш контент на их веб-страницы (что позволило бы использовать кликджекинг и множество других атак), что и было сделано разработчиками MDN, как мы видели ранее.</p>\n<div class="notecard note" id="sect7">\n  <p><strong>Примечание:</strong> Вы можете прочитать пост Фредерика Брауна <a class="external" target="_blank">On the X-Frame-Options Security Header</a> для более детальной информации по теме. Разумеется, объяснение в этой статье далеко не полное.</p>\n</div></div></section><section aria-labelledby="элементы_embed_и_object"><h2 id="элементы_embed_и_object"><a>Элементы &lt;embed&gt; и &lt;object&gt;</a></h2><div class="section-content"><p>В отличие от <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;iframe&gt;</code> <small>(en-US)</small></a>, элементы <a><code>&lt;embed&gt;</code></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;object&gt;</code> <small>(en-US)</small></a> выполняют другую функцию. Они являются инструментами общего назначения для встраивания нескольких типов внешнего контента, включая плагиновые технологии, такие как Java Applets и Flash, PDF (которые могут отображаться в браузере с плагином PDF) и даже такой контент, как видео, SVG и изображения!</p>\n<div class="notecard note" id="sect8">\n  <p><strong>Примечание:</strong> <strong>Плагин</strong> - это программное обеспечение, обеспечивающее доступ к контенту, который браузер не может читать изначально.</p>\n</div>\n<p>Тем не менее, вы вряд ли будете использовать эти элементы очень часто. Апплеты не использовались годами, Flash в настоящее время не очень популярен из-за ряда причин (см. <a>Дело против плагинов</a>, ниже), PDF-файлы, как правило, лучше открывать по ссылке, а другой контент - такой, как изображения и видео, могут обрабатываться намного проще. Плагины и эти методы внедрения действительно являются устаревшими технологиями, и мы упоминаем их здесь на случай, если вы столкнётесь с ними в определённых обстоятельствах, таких как интрасети или корпоративные проекты.</p>\n<p>Если вам нужно внедрить контент плагина, ниже исчерпывающая информация, которая вам понадобится:</p>\n\n<div class="notecard note" id="sect9">\n  <p><strong>Примечание:</strong> Элементу <code>&lt;object&gt;</code> необходим атрибут <code>data</code> , атрибут <code>type</code> , или оба сразу. Если вы используете их вместе, вы также можете использовать атрибут <a class="only-in-en-us" title="Currently only available in English (US)"><code>typemustmatch</code> <small>(en-US)<small></small></small></a> (имеющийся в наличии только в Firefox, на момент написания данной статьи). Атрибут <code>typemustmatch</code> предотвращает запуск файла, только если в в атрибут type не записан соответствующий медиа-тип. Следовательно, атрибут <code>typemustmatch</code> может предоставлять значительные преимущества в безопасности в случае встраивания контента из других источников <a>origin</a> (Таким образом, не давая возможности злоумышленникам запускать произвольные скрипты посредством плагинов).</p>\n</div>\n<p>Ниже представлен пример использования элемента <a><code>&lt;embed&gt;</code></a> для вставки Flash-фильма (загляните на <a class="external" target="_blank">live on Github</a>, а также на <a class="external" target="_blank">check the source code</a>):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><embed src="whoosh.swf" quality="medium" bgcolor="#ffffff" width="550" height="400" name="whoosh" align="middle" allowscriptaccess="sameDomain" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">\n</pre></div>\n<p>Достаточно ужасно, не так ли? Html-код, генерируемый Flash, имел склонность быть значительно хуже. Он использовал элемент <code>&lt;object&gt;</code> вместе со встроенным элементом <code>&lt;embed&gt;</code> для скрытия всего фундамента (взгляните на пример). Flash ранее использовался в качестве резерва для HTML5-видео (в случае его отсутствия), но со временем необходимость в этом отпала.</p>\n<p>Давайте взглянем на пример <code>&lt;object&gt;</code> , встраивающего PDF в страницу (взгляните <a class="external" target="_blank">live example</a> и <a class="external" target="_blank">source code</a>):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><object data="mypdf.pdf" type="application/pdf" width="800" height="1200" typemustmatch="">\n  <p>\n    You don\'t have a PDF plugin, but you can\n    <a href="mypdf.pdf">download the PDF file.</a>\n  </p>\n</object>\n</pre></div>\n<p>PDF-файлы были необходимой ступенью между бумажной и цифровой информацией, но в то же время они имеют множество проблем доступности и плохо читаемы на мелких экранах. В некоторых кругах они всё ещё пользуются популярностью, так что заметим, что вместо встраивания в страницу следует использовать ссылки (для скачивания или чтения на отдельной вкладке).</p></div></section><section aria-labelledby="дело_против_плагинов"><h3 id="дело_против_плагинов"><a>Дело против плагинов</a></h3><div class="section-content"><p>Когда-то плагины были незаменимы в Интернете. Помните дни, когда вам приходилось устанавливать Adobe Flash Player для просмотра онлайн-фильма? И потом постоянно возникали раздражающие предупреждения об обновлении Flash Player и Java Runtime Environment. С тех пор веб-технологии стали намного надёжнее. Почти всем сервисам пришло время прекратить доставлять контент с помощью плагинов и вместо этого использовать веб-технологии.</p>\n<ul>\n  <li><strong>Расширьте свою досягаемость для всех</strong>. У каждого есть браузер, но плагины используются все реже, особенно среди мобильных пользователей. Поскольку Web в значительной степени можно использовать без плагинов, люди предпочли бы просто перейти на сайты ваших конкурентов, чем установить плагин.</li>\n  <li><strong>Немного передохните от лишних головных болей, связанных с общедоступностью Flash-плагинов и др.( <a class="external" target="_blank">extra accessibility headaches</a>).</strong></li>\n  <li><strong>Избегайте лишних проблем безопасности.</strong> Ни для кого не секрет,что Adobe Flash является небезопасным, даже после многочисленных патчей. В 2015, Алекс Стэймос (бывший главный сотрудник по вопросам информационной безопасности компании Facebook) даже делал запрос, чтобы Adobe прекратил поддержку Flash.</li>\n</ul>\n<p>Итак, что нужно делать? Если вам нужна интерактивность, HTML и <a>JavaScript</a> могут легко выполнить задание для вас без необходимости использования апплетов Java или устаревшей технологии ActiveX / BHO. Вместо того, чтобы полагаться на Adobe Flash, вы можете использовать видео HTML5 для своих медиа-потребностей, SVG для векторной графики и Canvas для сложных изображений и анимаций. Питер Элст уже писал несколько лет назад, что Adobe Flash редко является подходящим инструментом для работы, за исключением специализированных игр и бизнес-приложений. Что касается ActiveX, браузер Microsoft <a class="only-in-en-us" title="Currently only available in English (US)">Edge <small>(en-US)</small></a> больше не поддерживает его.</p></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Тема встраивания другого контента в веб-документы поначалу может показаться очень сложной для понимания, поэтому в этой статье мы попытались представить её простым, знакомым способом, который сразу же станет актуальным, но всё же намекает на некоторые из более сложных функций вовлечённых технологий. Начнём с того, что вы вряд ли будете использовать большое количество встраивании стороннего контента, помимо встроенных карт и видео на своих страницах.</p>\n<p>Существует много других технологий, которые включают в себя внедрение внешнего контента, помимо тех, которые мы обсуждали здесь. Мы видели некоторые из них в предыдущих статьях, например <a><code>&lt;video&gt;</code></a>, <a><code>&lt;audio&gt;</code></a> и <a><code>&lt;img&gt;</code></a>, но есть и другие. Например, <a><code>&lt;canvas&gt;</code></a> для 2D-и 3D-графики, сгенерированной JavaScript, и <a><code>&lt;svg&gt;</code></a> для встраивания векторной графики. Мы рассмотрим SVG в следующей статье модуля.</p></div></section>',
					works: [],
				},
				{
					title: 'Добавление векторной графики в веб-документ',
					chapter: 1.17,
					content:
						'<header><h1>Добавление векторной графики в веб-документ</h1></header><div class="section-content">\n<p>Векторная графика очень полезна во многих случаях. Она имеет малые размеры файла и высокую масштабируемость – при увеличении масштаба пиксели не увеличиваются вместе с графикой. В данной статье мы покажем, как встраивать векторную графику на Вашу страницу.</p>\n\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Данная статья не научит вас векторной графике, а даст понимание что это и как её использовать в веб-документах.</p>\n</div></div><section aria-labelledby="что_такое_векторная_графика"><h2 id="что_такое_векторная_графика"><a>Что такое векторная графика?</a></h2><div class="section-content"><p>В веб-разработке вы будете сталкиваться с двумя типами изображений - растровым и векторным:</p>\n<ul>\n  <li>Растровое изображение задаётся сеткой пикселей — файл растрового изображения содержит информацию о расположении и цвете каждого пикселя. Среди популярных форматов изображений данного типа числятся Bitmap (.bmp), PNG (.png), JPEG (.jpg) и GIF (.gif)</li>\n  <li>Векторное изображение определяется алгоритмом — файл векторного изображения содержит фигуры и правила, по которым компьютер может вычислить как должно выглядеть изображение, когда выводится на экран.<a>SVG</a> формат позволяет нам создавать векторную графику для использования в веб-документах.</li>\n</ul>\n<p>Для демонстрации различий между типами изображений, давайте взглянем на пример. Вы можете найти данный пример на Github как <a class="external" target="_blank">vector-versus-raster.html</a> — в нем демонстрируются два, на первый взгляд, одинаковых изображения, расположенных рядом друг с другом. Каждое из изображений представляет собой красную звезду с тенью. Различие их в том, что левое изображение имеет формат PNG, а правое - SVG.</p>\n<p>Различия становятся заметны, когда вы изменяете масштаб страницы — PNG изображение становится неровным (становятся видны пиксели), потому что оно содержит информацию о положении и цвете каждого пикселя. При увеличении каждый пиксель также увеличивается, охватывая несколько пикселей дисплея, поэтому становятся заметны "кирпичики". Векторное изображение продолжает выглядеть ровным и красивым, потому что фигуры, масштабируются совместно с ним.</p>\n<p>\n  \n</p>\n<p>\n  \n</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Оба изображения сверху имеют формат PNG — слева показано растровое изображение, справа условно показано векторное изображение. Напоминаем, что пример с реальными растровым и векторными изображениями находится по ссылке: <a class="external" target="_blank">vector-versus-raster.html</a> !</p>\n</div>\n<p>Более того, файлы векторных изображений намного меньше растровых, т.к. в них содержится алгоритмы построения вместо информации о каждом пикселе.</p></div></section><section aria-labelledby="что_такое_svg"><h2 id="что_такое_svg"><a>Что такое SVG?</a></h2><div class="section-content"><p><a>SVG</a> это язык на базе <a>XML</a> для описания векторных изображений. По сути это язык разметки, как и HTML, только содержащий множество различных элементов для определения фигур вашего изображения, а также параметров их отображения. SVG предназначен для разметки графики, а не содержимого. В простейшем случае, вы можете использовать элементы для создания простых фигур, таких как <a><code>&lt;circle&gt;</code></a>(круг) и <a><code>&lt;rect&gt;</code></a>(прямоугольник). Более сложные SVG элементы включают <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;feColorMatrix&gt;</code> <small>(en-US)</small></a> (разложение цвета с использованием матрицы), <a><code>&lt;animate&gt;</code></a> (анимация частей вашего векторного изображения) и <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;mask&gt;</code> <small>(en-US)</small></a> (применение маски к изображению.)</p>\n<p>В качестве простого примера, следующий код создаёт круг и прямоугольник:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><svg version="1.1" baseProfile="full" width="300" height="200" xmlns="http://www.w3.org/2000/svg">\n  <rect width="100%" height="100%" fill="black"></rect>\n  <circle cx="150" cy="100" r="90" fill="blue"></circle>\n</svg>\n</pre></div>\n<p>В результате получается следующее:</p><div class="code-example" id="sect3"><div class="example-header" id="sect4"></div></div>\n<p>Исходя из примера выше, может показаться, что SVG легко создавать вручную. Да, простые SVG можно создавать, используя текстовый редактор, но в случае сложного изображения это становится сложным. Для создания SVG изображений используются редакторы векторной графики, такие как <a class="external" target="_blank">Inkscape</a> или <a class="external" target="_blank">Illustrator</a>. Данные приложения позволяют создавать различные изображения, используя множество графических инструментов, и создавать приближения фотографий (например опция Trace Bitmap feature приложения Inkscape.)</p>\n<p>Дополнительные преимущества SVG:</p>\n<ul>\n  <li>Текст в векторном изображении остаётся машинописным (то есть доступным для поисковика, что улучшает <a>SEO</a>).</li>\n  <li>SVG легко поддаются стилизации/программированию (scripting), потому что каждый компонент изображения может быть стилизован с помощью CSS или запрограммирован с помощью JavaScript.</li>\n</ul>\n<p>Так почему же тогда вообще используют растровые изображения, а не только SVG? Дело в том, что SVG имеет ряд недостатков:</p>\n<ul>\n  <li>SVG может очень быстро стать сложным в том смысле, что размер файла увеличивается; сложные SVG-изображения также создают большую вычислительную нагрузку на браузер.</li>\n  <li>SVG может быть сложнее создать, нежели растровое изображение, в зависимости от того, какое изображение необходимо создать.</li>\n  <li>не поддерживается старыми версиями браузеров, то есть не подойдёт для сайтов, поддерживающих Internet Explorer 8 или старее.</li>\n</ul>\n<p>В целом, растровая графика лучше подходит для сложных изображений, например, фотографий.</p>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> В приложении Inkscape сохраняйте файлы как Plain SVG, для экономии места. Также, пожалуйста перейдите на <a class="external" target="_blank">статью, описывающую как подготовить SVG изображение для веб-документа.</a></p>\n</div></div></section><section aria-labelledby="добавление_svg_на_страницы"><h2 id="добавление_svg_на_страницы"><a>Добавление SVG на страницы</a></h2><div class="section-content"><p>В данном разделе мы рассмотрим различные варианты, с помощью которых можно добавить SVG векторную графику на веб-страницу.</p></div></section><section aria-labelledby="быстрый_путь_img"><h3 id="быстрый_путь_img"><a>Быстрый путь: </a><a><code>&lt;img&gt;</code></a></h3><div class="section-content"><p>Чтобы встроить SVG используя элемент <a><code>&lt;img&gt;</code></a>, вам просто нужно сослаться на него в атрибуте src, как и следовало ожидать. Вам понадобится атрибут <code>height</code> или <code>width</code> (или оба, если ваш SVG не имеет собственного соотношения сторон). Если вы ещё этого не делали, пожалуйста, прочтите <a>Изображения в HTML</a>.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="equilateral.svg" alt="triangle with all three sides equal" height="87px" width="100px">\n</pre></div>\n<h4 id="плюсы">Плюсы</h4>\n<ul>\n  <li>Быстрый, знакомый синтаксис изображения со встроенным текстовым эквивалентом, доступным в атрибуте <code>alt</code></li>\n  <li>Вы можете легко превратить изображение в гиперссылку, поместив <code>&lt;image&gt;</code> в элемент <a><code>&lt;a&gt;</code></a>.</li>\n</ul>\n<h4 id="минусы">Минусы</h4>\n<ul>\n  <li>Вы не можете изменять изображение с помощью JavaScript.</li>\n  <li>Если вы хотите управлять содержимым SVG с помощью CSS, вы должны использовать встроенные CSS стили в своём SVG коде. (Внешние таблицы стилей, вызываемые из файла SVG, не действуют.)</li>\n  <li>Вы не можете изменить стиль изображения с помощью псевдоклассов CSS (например <code>:focus</code>).</li>\n</ul></div></section><section aria-labelledby="устранение_неполадок_и_кросс-браузерная_поддержка"><h3 id="устранение_неполадок_и_кросс-браузерная_поддержка"><a>Устранение неполадок и кросс-браузерная поддержка</a></h3><div class="section-content"><p>Для браузеров которые не поддерживают SVG (IE 8 и ниже, Android 2.3 и ниже), вы можете ссылаться на PNG или JPG в <code>src</code> атрибуте и использовать <a><code>srcset</code></a> атрибут (который распознают только последние браузеры) чтобы сослаться на SVG. В этом случае SVG будут загружаться только поддерживающими браузерами - старые же браузеры будут загружать PNG:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="equilateral.png" alt="triangle with equal sides" srcset="equilateral.svg">\n</pre></div>\n<p>Также вы можете использовать SVG в качестве фоновых изображение CSS, как показано ниже. В приведённом коде ниже старые браузеры будут придерживаться PNG, который они понимают, тогда как новые браузеры будут загружать SVG:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">background: url("fallback.png") no-repeat center;\nbackground-image: url("image.svg");\nbackground-size: contain;\n</pre></div>\n<p>Подобно методу <code>&lt;img&gt;</code>, описанному выше, вставка SVG с использованием фоновых изображений CSS означает, что SVG нельзя манипулировать при помощи JavaScript, и что SVG будет иметь те же ограничения, что и CSS.</p>\n<p>Если ваши SVG не отображаются вовсе, возможно, ваш сервер не настроен должным образом. Если проблема в этом, то <a>данная статья укажет вам верное направление</a>.</p></div></section><section aria-labelledby="как_включить_svg_в_ваш_html_код"><h3 id="как_включить_svg_в_ваш_html_код"><a>Как включить SVG в ваш HTML код</a></h3><div class="section-content"><p>Вы можете открыть файл SVG в текстовом редакторе, скопировать этот код и вставить его в ваш HTML документ — такой приём иногда называют встраиванием SVG (<strong>SVG inline</strong> или <strong>inlining SVG</strong>). Убедитесь, что фрагмент вашего SVG кода начинается и заканчивается с тегов <a><code>&lt;svg&gt;&lt;/svg&gt;</code></a> (не включайте ничего, кроме них). Вот очень простой пример того, что вы можете вставить в ваш документ:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><svg width="300" height="200">\n  <rect width="100%" height="100%" fill="green"></rect>\n</svg>\n</pre></div>\n<h4 id="плюсы_2">Плюсы</h4>\n<ul>\n  <li>Вставка вашего SVG путём <strong>SVG inline</strong> позволяет сохранить HTTP запросы и, следовательно, может уменьшить время загрузки.</li>\n  <li>Вы можете присваивать <code>class</code>-ы и <code>id</code> элементам SVG и стилизовать их при помощи CSS, либо в пределах SVG, либо внутри SVG, либо там, где вы размещаете правила стиля CSS для вашего HTML документа. По факту вы можете использовать любой <a>атрибут представления SVG</a> как свойство CSS.</li>\n  <li><strong>SVG inline</strong> единственный метод, который позволяет вам использовать CSS-взаимодействия (как <code>:focus</code>) и CSS-анимацию на вашем SVG изображении (даже в вашей обычной таблице стилей).</li>\n  <li>Вы можете разметить SVG как гиперссылку, обернув в элемент <a><code>&lt;a&gt;</code></a>.</li>\n</ul>\n<h4 id="минусы_2">Минусы</h4>\n<ul>\n  <li>Этот метод подходит, только если вы используете SVG лишь в одном месте. Дублирование делает обслуживание ресурсоёмким.</li>\n  <li>Дополнительный SVG код увеличивает размер вашего HTML файла.</li>\n  <li>Браузер не может кешировать встроенный SVG, так как он кеширует обычные изображения.</li>\n  <li>Вы можете добавить альтернативный вариант в элементе <a><code>&lt;foreignObject&gt;</code></a>, но браузеры поддерживающие SVG будут продолжать загружать все альтернативные изображения. Вы должны взвесить действительно стоит ли поддержка устаревших браузеров дополнительных накладных расходов (ресурсов).</li>\n</ul></div></section><section aria-labelledby="как_встраивать_svg_при_помощи_iframe"><h3 id="как_встраивать_svg_при_помощи_iframe"><a>Как встраивать SVG при помощи &lt;iframe&gt;</a></h3><div class="section-content"><p>Вы можете открывать ваши SVG изображения в браузере просто как веб-страницы. Таким образом встраивание SVG документа с помощью <code>&lt;iframe&gt;</code> выполняется как мы изучали ранее в главе <a>От &lt;object&gt; к &lt;iframe&gt; — другие технологии внедрения</a>.</p>\n<p>Вот краткий обзор:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><iframe src="triangle.svg" width="500" height="500" sandbox="">\n  <img src="triangle.png" alt="Triangle with three unequal sides" />\n</iframe>\n</pre></div>\n<p>Это - определённо не самый лучший метод для выбора:</p>\n<h4 id="минусы_3">Минусы</h4>\n<ul>\n  <li>Как вы можете видеть, у <code>iframe</code>-ов есть резервный механизм, но браузеры отображают резервный вариант только если они вообще не поддерживают <code>iframe</code>-ы.</li>\n  <li>Более того, до тех пор пока SVG и ваша текущая веб-страница имеют одинаковый <a>origin</a>, вы не можете использовать JavaScript на вашей основной веб-странице, чтобы манипулировать SVG.</li>\n</ul></div></section><section aria-labelledby="активное_изучение_поиграйте_с_svg"><h2 id="активное_изучение_поиграйте_с_svg"><a>Активное изучение: поиграйте с SVG</a></h2><div class="section-content"><p>В этом разделе активного изучения мы бы хотели, чтобы вы просто попробовали поиграть с SVG. Ниже, в области <em>Input,</em> вы увидите, что мы уже предоставили некий пример для того, чтобы вы начали. А ещё вы можете посетить <a>SVG Element Reference</a>, чтобы узнать больше деталей о других игрушках, которые могут быть использованы в SVG, и тоже попробовать их. Этот раздел полностью посвящён практике ваших исследовательских навыков и вашему развлечению.</p>\n<p>Если Вы где-то застряли и ваш код не работает, вы всегда можете начать сначала, нажав кнопку <em>Reset</em>.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h2>Live output</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Editable code</h2>\n<p class="a11y-label">\n  Press Esc to move focus away from the code area (Tab inserts a tab character).\n</p>\n\n<input id="code" class="input" style="width: 95%;min-height: 200px;">  &lt;svg width="100%" height="100%"&gt;\n    &lt;rect width="100%" height="100%" fill="red" /&gt;\n    &lt;circle cx="100%" cy="100%" r="150" fill="blue" stroke="black" /&gt;\n    &lt;polygon points="120,0 240,225 0,225" fill="green"/&gt;\n    &lt;text x="50" y="100" font-family="Verdana" font-size="55"\n          fill="white" stroke="black" stroke-width="2"&gt;\n            Hello!\n    &lt;/text&gt;\n  &lt;/svg&gt;\n</input>\n\n<div class="playable-buttons">\n  <input id="reset" type="button" value="Reset">\n  <input id="solution" type="button" value="Show solution" disabled="">\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">html {\n  font-family: sans-serif;\n}\n\nh2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">var textarea = document.getElementById("code");\nvar reset = document.getElementById("reset");\nvar solution = document.getElementById("solution");\nvar output = document.querySelector(".output");\nvar code = textarea.value;\nvar userEntry = textarea.value;\n\nfunction updateCode() {\n  output.innerHTML = textarea.value;\n}\n\nreset.addEventListener("click", function () {\n  textarea.value = code;\n  userEntry = textarea.value;\n  solutionEntry = htmlSolution;\n  solution.value = "Show solution";\n  updateCode();\n});\n\nsolution.addEventListener("click", function () {\n  if (solution.value === "Show solution") {\n    textarea.value = solutionEntry;\n    solution.value = "Hide solution";\n  } else {\n    textarea.value = userEntry;\n    solution.value = "Show solution";\n  }\n  updateCode();\n});\n\nvar htmlSolution = "";\nvar solutionEntry = htmlSolution;\n\ntextarea.addEventListener("input", updateCode);\nwindow.addEventListener("load", updateCode);\n\n// stop tab key tabbing out of textarea and\n// make it write a tab at the caret position instead\n\ntextarea.onkeydown = function (e) {\n  if (e.keyCode === 9) {\n    e.preventDefault();\n    insertAtCaret("\t");\n  }\n\n  if (e.keyCode === 27) {\n    textarea.blur();\n  }\n};\n\nfunction insertAtCaret(text) {\n  var scrollPos = textarea.scrollTop;\n  var caretPos = textarea.selectionStart;\n\n  var front = textarea.value.substring(0, caretPos);\n  var back = textarea.value.substring(\n    textarea.selectionEnd,\n    textarea.value.length,\n  );\n  textarea.value = front + text + back;\n  caretPos = caretPos + text.length;\n  textarea.selectionStart = caretPos;\n  textarea.selectionEnd = caretPos;\n  textarea.focus();\n  textarea.scrollTop = scrollPos;\n}\n\n// Update the saved userCode every time the user updates the text area code\n\ntextarea.onkeyup = function () {\n  // We only want to save the state when the user code is being shown,\n  // not the solution, so that solution is not saved over the user code\n  if (solution.value === "Show solution") {\n    userEntry = textarea.value;\n  } else {\n    solutionEntry = textarea.value;\n  }\n\n  updateCode();\n};\n</pre></div><div class="code-example" id="sect6"><div class="example-header" id="sect7"></div></div></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Эта статья предоставила вам краткий обзор по тому, что такое векторная графика и SVG, почему полезно знать о них и как внедрять SVG в вашу веб-страницу. Эта статья не является полным руководством по изучению SVG, а всего лишь указатель, чтоб вы знали что такое SVG, на случай, если вы встретите его во время странствий по Сети. Так что не переживайте, если вы ещё не чувствуете себя экспертом в SVG. Ниже мы включили несколько ссылок, которые могут вам помочь, если вы хотите узнать больше о том, как это работает.</p>\n<p>В последней статье этого модуля мы будем исследовать адаптивные изображения в деталях, рассматривая инструменты HTML, которые позволяют делать ваши изображения так, чтоб они могли лучше работать на разных устройствах.</p></div></section>',
					works: [],
				},
				{
					title: 'Адаптивные изображения',
					chapter: 1.18,
					content:
						'<header><h1>Адаптивные изображения</h1></header><div class="section-content">\n<p>В данной статье мы изучим концепцию гибких (responsive) изображений — таких, которые отображаются хорошо на устройствах с сильно отличающимися размерами экрана, разрешением, и другими характеристиками — и рассмотрим инструменты, которые имеются в HTML для их реализации. Responsive images - только одна часть (и хорошее начало) гибкого веб-дизайна, темы, которая будет рассмотрена подробнее в будущем модуле на тему <a>CSS</a>.</p>\n</div><section aria-labelledby="почему_адаптивные_изображения"><h2 id="почему_адаптивные_изображения"><a>Почему адаптивные изображения?</a></h2><div class="section-content"><p>Какую проблему мы пытаемся решить адаптивными изображениями? Давайте рассмотрим типичный сценарий. Обычный веб-сайт может содержать изображение в заголовке, для улучшения визуального восприятия пользователем, а также несколько изображений в контенте под ним. Вы, вероятно, захотите, чтобы изображение в заголовке занимало всю ширину окна, а изображения в контенте размещались где-то внутри колонки с контентом. Давайте посмотрим на следующий простой пример:</p>\n<p>\n  \n</p>\n<p>Такая вёрстка хорошо выглядит на широкоформатных экранах ноутбуков и настольных ПК, (вы можете посмотреть <a class="external" target="_blank">посмотреть демо-пример</a> и найти <a class="external" target="_blank">исходный код</a> на Github.) Мы не будем подробно рассматривать CSS, скажем только следующее:</p>\n<ul>\n  <li>Содержимому тега <code>main</code> задана максимальная ширина 1200 пикселей. Если ширина окна браузера больше этого значения, то содержимое сайта остаётся на 1200 пикселей и центрирует себя в доступном пространстве. Если ширина окна браузера меньше, содержимое устанавливается в 100% от ширины экрана.</li>\n  <li>Изображение в шапке всегда будет оставаться в центре тега header вне зависимости от ширины браузера. Если сайт будет просматриваться на узких экранах, то важные детали в центре изображения (люди) всё равно будут видны. Все, что выходит за пределы ширины экрана будет скрыто. Высота шапки 200 пикселей.</li>\n  <li>Изображения в содержимом заданы так, что если ширина body становится меньше чем ширина изображения, то изображения начинают сжиматься и остаются всегда внутри body и не выступают за его пределы.</li>\n</ul>\n<p>Всё хорошо, однако проблемы начинаются, когда вы просматриваете сайт на устройстве с небольшим экраном – шапка внизу выглядит нормально, но теперь она занимает значительную высоту экрана; первое изображение в контенте напротив, выглядит ужасно – при таком размере едва можно рассмотреть людей!</p>\n<p>\n  \n</p>\n<p>Было бы намного лучше показывать обрезанную версию изображения, на котором видны важные детали снимка, когда сайт отображается на узком экране, и, возможно, что-то среднее между обрезанным и оригинальным изображениями для экранов средней ширины, таких как планшеты – это известно как <strong>art direction problem</strong>.</p>\n<p>Кроме того, нет нужды встраивать такие большие изображения на страницу, если она просматривается на маленьком экране мобильного устройства; это называется <strong>resolution switching problem</strong> — растровое изображение представляет собой точно-заданное количество пикселей по ширине и высоте; как мы успели заметить, когда рассматривали <a>векторную графику</a>, растровое изображение становится зернистым и выглядит ужасно, если оно отображается в размере большем, чем оригинальный (тогда как векторное изображение нет). В то же время, если изображение отображается в гораздо меньшем размере, чем оригинальный, это приведёт к напрасной трате трафика — пользователи мобильных устройств будут грузить большое изображение для компьютера, вместо маленького для их устройства. Идеально было бы иметь несколько файлов в разных разрешениях, и отображать нужный размер в зависимости от устройства, обращающегося к веб-сайту.</p>\n<p>Сложность в том, что для некоторых устройств с большим разрешением экрана нужны изображения большего чем ожидается размера, чтобы чётче отображалось. По сути это всё одна задача в разных условиях.</p>\n<p>Можно предположить, что векторные изображения могли бы решить эти проблемы. В какой-то степени это так. У них небольшой вес и размер, поэтому их можно использовать почти в любом случае. Они хороши для простой графики, узоров, элементов интерфейса и т. д. Сложнее создать векторное изображение с большим количеством деталей, как, например, на фото. Растровые изображения (JPEG) для нашего примера подходят больше.</p>\n<p>Такого рода проблемы не было в начале существования веба, в первой половине 90-х годов – тогда единственными устройствами для просмотра веб-страниц были настольные компьютеры и ноутбуки, так что создатели браузеров и авторы спецификаций даже не задумывались о создании решения. <em>Технологии отзывчивых изображений</em> были реализованы недавно для решения проблем, указанных выше. Они позволяют вам предоставить браузеру несколько изображений, каждое из которых отображает одно и то же, но содержит разное количество пикселей (<em>resolution switching</em>), или разные изображения с отдельными областями основного изображения (<em>art direction</em>).</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Новые возможности обсуждаются в статье — <a><code>srcset</code></a>/<a><code>sizes</code></a>/<a><code>&lt;picture&gt;</code></a> — все они поддерживаются последними версиями современных настольных и мобильных браузеров (включая Microsoft Edge, но не Internet Explorer).</p>\n</div></div></section><section aria-labelledby="как_сделать_изображения_отзывчивыми"><h2 id="как_сделать_изображения_отзывчивыми"><a>Как сделать изображения отзывчивыми?</a></h2><div class="section-content"><p>В этом разделе рассмотрим две вышеописанные проблемы и покажем, как их решить с использованием инструментов HTML <a><code>&lt;img&gt;</code></a>. Как показано на примере выше - изображение в заголовке используется только как украшение сайта и установлено как фоновое с помощью CSS. <a class="external" target="_blank">CSS больше подходит для адаптивного дизайна</a> чем HTML, об этом поговорим в следующем модуле о CSS.</p></div></section><section aria-labelledby="разные_разрешения_разные_размеры"><h3 id="разные_разрешения_разные_размеры"><a>Разные разрешения: Разные размеры</a></h3><div class="section-content"><p>Итак, какую проблему решают разные разрешения? В зависимости от устройства нужно отобразить одно и то же изображение, но разных размеров. Посмотрите на вторую картинку в примере. Стандартный элемент <a><code>&lt;img&gt;</code></a> обычно позволяет указать только один путь к файлу:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="elva-fairy-800w.jpg" alt="Elva dressed as a fairy">\n</pre></div>\n<p>Однако есть два новых атрибута — <a><code>srcset</code></a> и <a><code>sizes</code></a> — позволяющих добавить дополнительные изображения с пометками, чтобы браузер выбрал подходящее. Пример на Github: <a class="external" target="_blank">responsive.html</a> (также смотри <a class="external" target="_blank">источник кода</a>).</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img srcset="\n    elva-fairy-320w.jpg 320w,\n    elva-fairy-480w.jpg 480w,\n    elva-fairy-800w.jpg 800w\n  " sizes="(max-width: 320px) 280px,\n            (max-width: 480px) 440px,\n            800px" src="elva-fairy-800w.jpg" alt="Elva dressed as a fairy">\n</pre></div>\n<p>Атрибуты <code>srcset</code> и <code>sizes</code> кажутся сложными, но они не так плохи, если вы отформатируете их как в примере выше: каждая часть значения атрибута с новой строки. Значение состоит из списка элементов через запятую, каждый из которых включает три части. Давайте рассмотрим эти значения:</p>\n<p><strong><code>srcset</code></strong> включает названия изображений, среди которых браузер выберет нужное и их размеры. Перед каждой запятой части значения в таком порядке:</p>\n<ol>\n  <li>Название изображения (<code>elva-fairy-480w.jpg</code>.)</li>\n  <li>Пробел.</li>\n  <li>\n    <strong>Актуальная ширина картинки</strong> <strong>в пикселах</strong> (<code>480w</code>) — заметьте, что здесь используется <code>w</code> вместо <code>px</code>, как вы могли ожидать. Эта настоящая ширина изображения, которая может быть просмотрена в свойствах картинки на вашем компьютере (например, на Mac нужно открыть картинку в Finder и нажать\n    <kbd>Cmd</kbd>\n    +\n    <kbd>I</kbd>\n    , чтобы вывести информацию на экран).\n  </li>\n</ol>\n<p><strong><code>sizes</code></strong> определяет перечень медиавыражений (например, ширину экрана) и указывает предпочтительную ширину изображения, когда определённое медиавыражение истинно — это то, о чём мы говорили выше. В нашем случае, перед каждой запятой мы пишем:</p>\n<ol>\n  <li><strong>Медиа-условие</strong> (<code>(max-width:480px)</code>) — вы можете больше узнать об этом в <a>CSS topic</a>, но сейчас давайте скажем, что медиа-условие описывает возможное состояние экрана. В этом случае, мы говорим "когда viewport width меньше или равен 480 пикселям".</li>\n  <li>Пробел.</li>\n  <li><strong>Ширину слота</strong> (в оригинале "width of the slot"), занимаемую изображением, когда медиа-условие истинно. (<code>440px</code>)</li>\n</ol>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Для ширины слота, вы можете указать абсолютные значения (<code>px</code>, <code>em</code>) или значение относительно окна просмотра (<code>vw</code>), но НЕ проценты. Вы могли заметить, что у последнего слота нет медиа-условия — это значение по умолчанию, которое станет актуальным, если ни одно из предыдущих медиа-условий не будет истинно. Браузер игнорирует все последующие проверки после первого совпадения, так что будьте внимательнее к порядку их объявления.</p>\n</div>\n<p>Итак, с такими атрибутами, браузер сделает следующее:</p>\n<ol>\n  <li>Посмотрит на ширину экрана устройства.</li>\n  <li>Попытается определить подходящее медиа-условие из списка в атрибуте <code>sizes</code>.</li>\n  <li>Посмотрит на размер слота к этому медиавыражению.</li>\n  <li>Загрузит изображение из списка из <code>srcset</code>, которое имеет тот же размер, что и выбранный слот, или, если такого нет, то первое изображение, которое больше размера выбранного слота.</li>\n</ol>\n<p>И это всё! На текущий момент, если поддерживающий браузер с viewport width 480px загрузит страницу, медиа-условие <code>(max-width: 480px)</code> будет истинно, следовательно, будет выбран слот <code>440px</code>, тогда будет загружено изображение <code>elva-fairy-480w.jpg</code>, так как свойство ширины (<code>480w</code>) наиболее близко значение <code>440px</code>. Условно, изображение 800px занимает на диске 128KB, в то время как версия в 480px только 63KB — экономия в 65KB. Теперь представьте, что у вас страница, на которой много изображений. Используя это технику, вы обеспечите мобильным пользователям большую пропускную способность.</p>\n<p>Старые браузеры, не поддерживающие эти возможности, просто проигнорируют их и возьмут изображение по адресу из атрибута <a><code>src</code></a>.</p>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> В описании элемента <a><code>&lt;head&gt;</code></a> вы найдёте строку <code>&lt;meta name="viewport" content="width=device-width"&gt;</code>: это заставляет мобильные браузеры адаптировать их реальный viewport width для загрузки web-страниц (некоторые мобильные браузеры нечестны насчёт своего viewport width, вместо этого они загружают страницу в большем viewport width, а затем ужимают её, что не очень хорошо сказывается на наших отзывчивых изображениях или дизайне. Мы расскажем вам об этом больше в будущем модуле.)</p>\n</div></div></section><section aria-labelledby="полезные_инструменты_разработчика"><h3 id="полезные_инструменты_разработчика"><a>Полезные инструменты разработчика</a></h3><div class="section-content"><p>Есть несколько полезных браузерных <a>инструментов разработчика</a>, чтобы помочь с определением необходимой ширины слотов и т. д., которые вам нужно использовать. Когда я работал над ними, я сначала загружал фиксированную версию моего примера (<code>not-responsive.html</code>), затем открывал <a class="external" target="_blank">Responsive Design View</a> (<em>Tools &gt; Web Developer &gt; Responsive Design View</em>), который позволяет взглянуть на layout вашей веб-страницы как если бы они были просмотрены через устройства с различными размерами экрана.</p>\n<p>Я устанавливал viewport width на 320px, затем на 480px; для каждой я обращался к <a class="external" target="_blank">DOM Inspector,</a> кликал по элементу <a><code>&lt;img&gt;</code></a> в котором мы заинтересованы, далее смотрел размер во вкладке Box Model с правой стороны дисплея. Это должно дать вам необходимую ширину изображения</p>\n<p>\n  \n</p>\n<p>А дальше вы можете проверить работает ли <code>srcset</code> если установить значение viewport width таким каким вы хотите (например, установить узкую ширину), открыв Network Inspector (<em>Tools &gt; Web Developer &gt; Network</em>) и затем перезагрузить страницу. Это должно дать вам перечень ресурсов которые были загружены чтобы составить (собрать) web-страницу, и тут вы можете проверить какой файл изображения был выбран для загрузки.</p>\n<p>\n  \n</p></div></section><section aria-labelledby="переключения_разрешений_одинаковый_размер_разные_разрешения"><h3 id="переключения_разрешений_одинаковый_размер_разные_разрешения"><a>Переключения разрешений: Одинаковый размер, разные разрешения</a></h3><div class="section-content"><p>Если вы поддерживаете несколько разрешений экрана, но все видят ваше изображение в одном и том же размере на экране, вы можете позволить браузеру выбирать изображение с подходящим разрешением используя <code>srcset</code> с x-дескриптором и без <code>sizes</code> — более простой синтаксис! Найти пример как это выглядит можно здесь <a class="external" target="_blank">srcset-resolutions.html</a> (смотрите также <a class="external" target="_blank">the source code</a>):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img srcset="elva-fairy-320w.jpg, elva-fairy-480w.jpg 1.5x, elva-fairy-640w.jpg 2x" src="elva-fairy-640w.jpg" alt="Elva dressed as a fairy">\n</pre></div>\n<p>\n  В данном примере, к изображению применяется CSS таким образом, что оно имеет ширину в 320 пикселей на экране (также называемое CSS-пикселями):\n</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">img {\n  width: 320px;\n}\n</pre></div>\n<p>В этом случае, нет необходимости в <code>sizes</code> — браузер просто определяет в каком разрешении отображает дисплей и выводит наиболее подходящее изображение в соответствии с <code>srcset</code>. Таким образом, если устройство, подключаемое к странице, имеет дисплей стандартного/низкого разрешения, когда один пиксель устройства представляет (соответствует) каждый CSS-пиксель, то будет загружено изображение <code>elva-fairy-320w.jpg</code> (применён x1, то есть вам не надо включать его). Если устройство имеет высокое разрешение, в два пикселя устройства на каждый CSS-пиксель или более, то будет загружено изображение <code>elva-fairy-640w.jpg</code>. 640px изображение имеет размер 93KB, тогда так 320px изображение - всего 39KB.</p></div></section><section aria-labelledby="художественное_оформление"><h3 id="художественное_оформление"><a>Художественное оформление</a></h3><div class="section-content"><p>Подводя итоги, <strong>проблема художественного оформления</strong> заключается в желании изменить отображаемое изображение чтобы оно соответствовало разным размерам отображения изображения. Например, если на веб-сайте отображается большой пейзажный снимок с человеком посередине при просмотре в браузере на настольном компьютере, то при просмотре веб-сайта в мобильном браузере он уменьшается; он будет выглядеть плохо так как человек будет очень маленьким, и его будет тяжело разглядеть. Вероятно будет лучше показать меньшую портретную картинку в мобильной версии на которой человек отображается в увеличении (в приближении). Элемент <a><code>&lt;picture&gt;</code></a> позволяет нам применять именно такое решение.</p>\n<p>Возвращаясь к нашему оригинальному примеру <a class="external" target="_blank">not-responsive.html</a>, мы имеем изображение которое очень нуждается в художественном оформлении:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="elva-800w.jpg" alt="Chris standing up holding his daughter Elva">\n</pre></div>\n<p>Давайте исправим это при помощи элемента <a><code>&lt;picture&gt;</code></a>! Так же как <a><code>&lt;video&gt;</code> и <code>&lt;audio&gt;</code></a>, элемент <code>&lt;picture&gt;</code> это обёртка содержащая некоторое количество элементов <a><code>&lt;source&gt;</code></a> которые предоставляют браузеру выбор нескольких разных источников, в сопровождении крайне важного элемента <a><code>&lt;img&gt;</code></a>. Код <a class="external" target="_blank">responsive.html</a> выглядит так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><picture>\n  <source media="(max-width: 799px)" srcset="elva-480w-close-portrait.jpg">\n  <source media="(min-width: 800px)" srcset="elva-800w.jpg">\n  <img src="elva-800w.jpg" alt="Chris standing up holding his daughter Elva">\n</picture>\n</pre></div>\n<ul>\n  <li>Элемент <code>&lt;source&gt;</code> принимает атрибут <code>media</code>, который содержит медиа-условие; при помощи этих условий определяется, какое изображение будет выведено. В данном случае, если ширина viewport\'a составит 799px или меньше, будет выведено изображение первого элемента <code>&lt;source&gt;</code>. Если ширина составит 800px и более — второго.</li>\n  <li>Атрибут <code>srcset</code> содержит путь изображения, которое будет выведено. Обратите внимание, что, как и в примере с <code>&lt;img&gt;</code> выше, <code>&lt;source&gt;</code> может принимать атрибуты <code>srcset</code> и <code>sizes</code> с несколько предопределёнными изображениями. Так вы можете не только поместить группу изображений внутри элемента <code>&lt;picture&gt;</code>, но и задать группу предписаний для каждого из них. В реальности вы вряд ли захотите заниматься этим очень часто.</li>\n  <li>Вы всегда должны использовать элемент <code>&lt;img&gt;</code>, с <code>src</code> и <code>alt</code>, прямо перед <code>&lt;/picture&gt;</code>, иначе изображения не появятся. Это нужно на тот случай, когда ни одно из медиа-условий не удовлетворено (например, если бы вы убрали второй элемент <code>&lt;source&gt;)</code> или браузер не поддерживает элемент <code>&lt;picture&gt;</code>.</li>\n</ul>\n<p>Этот код позволяет нам выводить отзывчивое изображение и на широких, и на узких экранах, как показано ниже:</p>\n<p>\n  \n  \n</p>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> вам следует использовать атрибут <code>media</code> только при художественном оформлении; когда вы используете <code>media</code>, не применяйте медиа-условия с атрибутом <code>sizes</code>.</p>\n</div></div></section><section aria-labelledby="почему_это_нельзя_сделать_посредством_css_и_javascript"><h3 id="почему_это_нельзя_сделать_посредством_css_и_javascript"><a>Почему это нельзя сделать посредством CSS и JavaScript?</a></h3><div class="section-content"><p>Когда браузер начинает загружать страницу, он начинает загрузку изображений до того, как главный парсер начал загружать и интерпретировать CSS и JavaScript. В среднем, эта техника уменьшает время загрузки страницы на 20%. Но она не так полезна в случае с адаптивными изображениями, поэтому и необходимы такие решения, как <code>srcset</code>. Например, вы не могли бы загрузить элемент <code>&lt;img&gt;</code>, потом определить ширину вьюпорта при помощи JavaScript и динамически изменить источник изображения. Изначальное изображение было бы уже загружено к тому времени, как вы загрузили его меньшую версию, что плохо.</p></div></section><section aria-labelledby="смело_используйте_современные_форматы_изображений"><h3 id="смело_используйте_современные_форматы_изображений"><a>Смело используйте современные форматы изображений</a></h3><div class="section-content"><p>Есть несколько новых форматов изображения (таких, как WebP и JPEG-2000), которым удаётся сохранять высокое качество при малом размере файла. Тем не менее, браузеры поддерживают их не полностью.</p>\n<p><code>&lt;picture&gt;</code> позволяет нам использовать их в старых браузерах. Вы можете прописать MIME-тип внутри атрибута <code>type</code>, браузер сразу определит файлы такого типа как неподдерживаемые:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><picture>\n  <source type="image/svg+xml" srcset="pyramid.svg">\n  <source type="image/webp" srcset="pyramid.webp">\n  <img src="pyramid.png" alt="regular pyramid built from four equilateral triangles">\n</picture>\n</pre></div>\n<ul>\n  <li>Не используйте атрибут <code>media</code>, если вам не нужно художественное оформление.</li>\n  <li>В элементе <code>&lt;source&gt;</code> можно указывать путь к изображениям только того типа, который указан в <code>type</code>.</li>\n  <li>Как и в предыдущих примерах, при необходимости вы можете использовать <code>srcset</code> и <code>sizes</code>.</li>\n</ul></div></section><section aria-labelledby="активное_обучение_реализация_собственных_адаптивных_изображений"><h2 id="активное_обучение_реализация_собственных_адаптивных_изображений"><a>Активное обучение: реализация собственных адаптивных изображений</a></h2><div class="section-content"><p>Самостоятельно создайте отзывчивое, художественно оформленное изображение для широких и узких экранов, используя <code>&lt;picture&gt;</code> и <code>srcset</code>.</p>\n<ol>\n  <li>Напишите простую HTML-разметку.</li>\n  <li>Найдите широкоформатное пейзажное фото с какой-нибудь яркой деталью. Создайте веб-версию изображения посредством графического редактора, потом обрежьте его, чтобы крупнее выделить деталь, и создайте второе изображение (примерно 480px достаточно).</li>\n  <li>Используйте элемент <code>&lt;picture&gt;</code> для работы с художественно оформленной картинкой.</li>\n  <li>Обозначьте несколько разных размеров для этой картинки.</li>\n  <li>Используйте <code>srcset</code>/<code>size</code> для описания переключения при смене размеров вьюпорта</li>\n</ol>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> Используйте инструменты разработчика, чтобы отследить смену размера, как было описано выше.</p>\n</div></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Это все для отзывчивых изображений - мы надеемся, вам понравилось играть с этими новыми технологиями. Напомним, что мы здесь обсуждали две различные проблемы:</p>\n<ul>\n  <li><strong>Художественное оформление</strong>: Проблема, при которой вы хотите использовать обрезанные изображения для различных макетов - например, ландшафтное изображение для полных экранов на макете компьютера и портретное изображение, показывающее увеличенный основной объект, для мобильного макета. Всё это может быть решено с помощью <a><code>&lt;picture&gt;</code></a> элемента.</li>\n  <li><strong>Переключение разрешений</strong>: Проблема, при которой вы хотите использовать файлы изображений меньшего размера на устройствах с узким экраном, поскольку им не нужны огромные изображения, как на настольных дисплеях, а также дополнительно, что вы хотите использовать изображения разного разрешения для экранов с высокой/низкой плотностью. Эту проблему можно решить с помощью <a>векторной графики</a> (SVG изображений), и <a><code>srcset</code></a> и <a><code>sizes</code></a> атрибуты.</li>\n</ul>\n<p>Это так же подводит нас к окончанию целого модуля <a>"Мультимедиа и встраивание"</a>! Единственное, что вам осталось сейчас сделать перед тем, как двигаться дальше - это попробовать наше мультимедийное задание и посмотреть, как вы усвоили материал. Веселитесь!</p></div></section><section aria-labelledby="посмотрите_так_же"><h2 id="посмотрите_так_же"><a>Посмотрите так же</a></h2><div class="section-content"><ul>\n  <li><a class="external" target="_blank">Отличное введение в отзывчивые изображения от Джейсона Григсби</a></li>\n  <li><a class="external" target="_blank">Отзывчивые изображения: Если вы только меняете разрешения используйте srcset</a> — включает больше объяснений того,как браузер выбирает,какое изображение использовать</li>\n  <li><a><code>&lt;img&gt;</code></a></li>\n  <li><a><code>&lt;picture&gt;</code></a></li>\n  <li><a><code>&lt;source&gt;</code></a></li>\n</ul></div></section>',
					works: [],
				},
				{
					title: 'Страница о Mozilla',
					chapter: 1.19,
					content:
						'<header><h1>Страница о Mozilla</h1></header><div class="section-content">\n<p>В этом задании мы проверим ваши знания приёмов, рассмотренных в статьях этого модуля, через добавление изображений и видео на забавную страницу о Mozilla!</p>\n</div><section aria-labelledby="отправная_точка"><h2 id="отправная_точка"><a>Отправная точка</a></h2><div class="section-content"><p>Для начала этого задания скачайте все HTML файлы и изображения, доступные на github(<a class="external" target="_blank">mdn-splash-page-start</a>). Сохраните содержимое <a class="external" target="_blank">index.html</a> в файле с именем <code>index.html</code> на вашем диске в новой папке. Затем сохраните <a class="external" target="_blank">pattern.png</a> в той же папке (правый клик на изображении для выбора опции сохранения).</p>\n<p>Сохраните изображения из папки <a class="external" target="_blank">originals</a> тем же способом; возможно вы захотите сохранить их в другой папке пока не обработаете (некоторые из них) с помощью графического редактора.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Приведённый для примера HTML файл содержит довольно много CSS для стилизации страницы. Вам не нужно изменять CSS, только HTML внутри <a><code>&lt;body&gt;</code></a> элемента — пока вы используете корректную разметку, CSS будет придавать правильный внешний вид.</p>\n</div></div></section><section aria-labelledby="описание_проекта"><h2 id="описание_проекта"><a>Описание проекта</a></h2><div class="section-content"><p>В этом задании мы представляем вам почти законченный сайт-визитку Mozilla, цель которого - рассказать что-нибудь интересное о принципах Mozilla и предоставить несколько ссылок для углублённого ознакомления. К сожалению, изображения или видео не добавлены - это ваша работа! Вам нужно добавить несколько медиа-файлов для того, чтобы страница смотрелась лучше и имела больше смысла. В следующих подразделах подробно объяснено, что вам требуется сделать:</p></div></section><section aria-labelledby="подготовка_изображений"><h3 id="подготовка_изображений"><a>Подготовка изображений</a></h3><div class="section-content"><p>Используя ваш любимый редактор изображений, создайте версии шириной 400px и 120px, следующих изображений:</p>\n<ul>\n  <li><code>firefox_logo-only_RGB.png</code></li>\n  <li><code>firefox-addons.jpg</code></li>\n  <li><code>mozilla-dinosaur-head.png</code></li>\n</ul>\n<p>Назовите их как-нибудь разумно, например <code>firefoxlogo400.png</code> и <code>firefoxlogo120.png</code>.</p>\n<p>Вместе с <code>mdn.svg</code>, эти изображения будут иконками для ссылок на другие ресурсы внутри секции <code>further-info</code>. Вы также дадите ссылку на логотип Firefox в шапке сайта. Сохраните все копии внутри той же папки, что и <code>index.html</code>.</p>\n<p>Затем создайте фоновую версию <code>red-panda.jpg</code> шириной 1200px и портретную версию шириной 600px, которая показывает панду более крупным планом. Снова назовите их разумно, чтобы легко распознавать их. Сохраните обе копии внутри той же папки, что и <code>index.html</code>.</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Следует обрабатывать JPG и PNG изображения, чтобы делать их как можно меньше по весу, при сохранении хорошего вида. <a class="external" target="_blank">tinypng.com</a> - отличный сервис для этого.</p>\n</div></div></section><section aria-labelledby="добавление_логотипа_в_шапку"><h3 id="добавление_логотипа_в_шапку"><a>Добавление логотипа в шапку</a></h3><div class="section-content"><p>Добавьте внутрь элемента <a><code>&lt;header&gt;</code></a> элемент <a><code>&lt;img&gt;</code></a>, который вставит уменьшенную версию логотипа Firefox в шапку.</p></div></section><section aria-labelledby="добавление_видео_к_основному_содержанию_статьи"><h3 id="добавление_видео_к_основному_содержанию_статьи"><a>Добавление видео к основному содержанию статьи</a></h3><div class="section-content"><p>Внутри элемента <a><code>&lt;article&gt;</code></a> (сразу после открывающего тэга), вставьте ролик с YouTube по ссылке <a class="external" target="_blank">https://www.youtube.com/watch?v=ojcNcvb1olg</a>, используя подходящие инструменты YouTube для генерации кода. Видео должно быть 400px в ширину.</p></div></section><section aria-labelledby="добавление_отзывчивых_изображений_к_ссылкам_с_доп._информацией"><h3 id="добавление_отзывчивых_изображений_к_ссылкам_с_доп._информацией"><a>Добавление отзывчивых изображений к ссылкам с доп. информацией</a></h3><div class="section-content"><p>Внутри <a><code>&lt;div&gt;</code></a> с классом <code>further-info</code> вы найдёте четыре элемента <a><code>&lt;a&gt;</code></a> — каждый из которых ссылается на интересную страницу, связанную с Mozilla. Для завершения этой секции вам необходимо поместить элемент <a><code>&lt;img&gt;</code></a> внутрь каждого элемента <a><code>&lt;a&gt;</code></a> дополнив подходящими атрибутами <a><code>src</code></a>, <a><code>alt</code></a>, <a><code>srcset</code></a> и <a><code>sizes</code></a>.</p>\n<p>В каждом случае (кроме одного - какой из них по сути отзывчивый?) мы хотим, чтобы браузер использовал изображение шириной 120px , когда экран меньше или равен 480px, либо шириной 400px в других случаях.</p>\n<p>Убедитесь, что вы использовали изображения, соответствующие ссылкам.</p>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Для проверки правильности работы <code>srcset</code>/<code>sizes</code> , вам нужно загрузить ваш сайт на сервер (используйте <a>Github pages</a> - простое и бесплатное решение). Затем вы сможете проверить правильность их работы используя инструменты разработчика в браузере, как описано в <a>Responsive images: useful developer tools</a>.</p>\n</div></div></section><section aria-labelledby="искусственно_изменённая_красная_панда"><h3 id="искусственно_изменённая_красная_панда"><a>Искусственно изменённая красная панда</a></h3><div class="section-content"><p>Внутри элемента <a><code>&lt;div&gt;</code></a> с классом <code>red-panda</code>, мы хотим поместить элемент <a><code>&lt;picture&gt;</code></a> , который использует маленькое портретное изображение панды, если экран меньше или равен 600px, либо большое фоновое изображение.</p></div></section><section aria-labelledby="пример"><h2 id="пример"><a>Пример</a></h2><div class="section-content"><p>Следующие скриншоты демонстрируют, как сайт-визитка выглядит, при правильной разметке, на широких и узких экранах.</p>\n<p>\n  \n</p>\n<p>\n  \n</p></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Если вы выполняете это задание как часть организованного курса вам следует передать вашу работу учителю/наставнику для оценки. Если вы обучаетесь самостоятельно, то вы легко можете получить отметку <a class="external" target="_blank">в ветке форума этого упражнения</a>, либо в IRC канале <a>#mdn</a> на <a class="external" target="_blank">Mozilla IRC</a>. Сначала попробуйте выполнить упражнение - жульничеством ничего не добиться!</p></div></section>',
					works: [],
				},
				{
					title: 'HTML таблицы',
					chapter: 1.2,
					content:
						'<header><h1>HTML таблицы</h1></header><div class="section-content"><p>Структурирование табличных данных является в HTML самой обычной задачей, для этой цели есть множество элементов и атрибутов. С добавлением таблиц стилей (<a>CSS</a>) HTML с лёгкостью позволяет выводить в веб различные таблицы, например, расписание школьных уроков, график посещения бассейна, или статистические данные о ваших любимых динозаврах или футбольных командах. В данном разделе вы узнаете все, что вам потребуется для структурирования табличных данных с помощью HTML.</p></div><section aria-labelledby="необходимые_условия"><h2 id="необходимые_условия"><a>Необходимые условия</a></h2><div class="section-content"><p>Прежде чем приступить к данному разделу, вы должны ознакомиться с основами HTML — смотрите <a>Введение в HTML (Introduction to HTML</a>).</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Если компьютер/планшет/другое устройство, на котором вы работаете, не позволяет вам самостоятельно создавать файлы, то приводимые здесь примеры кода можно посмотреть в онлайновых программах для кодирования, например <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble</a>.</p>\n</div></div></section><section aria-labelledby="руководства"><h2 id="руководства"><a>Руководства</a></h2><div class="section-content"><p>Данный раздел содержит следующие статьи:</p>\n<dl>\n  <dt id="основы_работы_с_таблицами_html"><a>Основы работы с таблицами HTML</a></dt>\n  <dd>\n    <p>Эта статья поможет вам начать работу с таблицами HTML, познакомив с самыми базовыми понятиями - строками и ячейками, заголовками, слиянием строк или столбцов, а также с тем, как объединять все ячейки столбца для оформительских целей.</p>\n  </dd>\n  <dt id="продвинутые_возможности_таблиц_html_и_доступность"><a>Продвинутые возможности таблиц HTML и доступность</a></dt>\n  <dd>\n    <p>Во второй статье данного раздела мы рассмотрим более продвинутые возможности таблиц HTML — заголовки/подписи, а также разбиение строк таблицы на три части: "голову" (head), "тело" (body) и нижний колонтитул (footer) — а также исследуем, как можно представлять таблицы для людей, имеющих проблемы со зрением.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="проверка_знаний"><h2 id="проверка_знаний"><a>Проверка знаний</a></h2><div class="section-content"><dl>\n  <dt id="структурирование_данных_о_планетах"><a>Структурирование данных о планетах</a></dt>\n  <dd>\n    <p>Для проверки усвоенных знаний мы дадим вам ряд данных, касающихся планет солнечной системы, чтобы представить их в виде таблицы HTML.</p>\n  </dd>\n</dl></div></section>',
					works: [],
				},
				{
					title: 'HTML таблицы основы',
					chapter: 1.21,
					content:
						'<header><h1>HTML таблицы основы</h1></header><div class="section-content">\n<p>Этот раздел познакомит вас с таблицами HTML, представив самые базовые понятия - строки и ячейки, заголовки, слияние строк и столбцов, а также объединение всех ячеек в столбце в целях стилизации.</p>\n</div><section aria-labelledby="что_такое_таблица"><h2 id="что_такое_таблица"><a>Что такое таблица ?</a></h2><div class="section-content"><p>Таблица - это структурированный набор данных, состоящий из строк и столбцов (<strong>табличных данных</strong>). Таблицы позволяют быстро и легко посмотреть значения, показывающие некоторую взаимосвязь между различными типами данных, например - человек и его возраст, или расписание в плавательном бассейне.</p>\n<p>\n  \n</p>\n<p>\n  \n</p>\n<p>Люди постоянно используют таблицы, причём уже давно, как показывает документ по переписи в США, относящийся к 1800 году:</p>\n<p>\n  \n</p>\n<p>Так что не удивительно, что создатели HTML включили в него средства для структурирования и представления табличных данных в сети.</p></div></section><section aria-labelledby="как_работает_таблица"><h3 id="как_работает_таблица"><a>Как работает таблица?</a></h3><div class="section-content"><p>Смысл таблицы в том, что она жёсткая. Информацию легко интерпретировать, визуально сопоставляя заголовки строк и столбцов. Например, посмотрите на приведённую ниже таблицу и найдите единственное личное местоимение, используемое в третьем лице , с полом ♀, выступающее в качестве объекта в предложении. Ответ можно найти, сопоставив соответствующие заголовки столбцов и строк.</p>\n\n<p>Если правильно представить таблицу HTML, интерпретировать её данные смогут даже люди, имеющие проблемы со зрением.</p></div></section><section aria-labelledby="оформление_таблиц"><h3 id="оформление_таблиц"><a>Оформление таблиц</a></h3><div class="section-content"><p><a class="external" target="_blank">Исходный код HTML (HTML source code)</a> вышеприведённой таблице есть в GitHub; посмотрите его и <a class="external" target="_blank">живой пример (look at the live example)</a>! Вы заметите, что таблица там выглядит иначе — это потому, что на сайте MDN к этим данным была применена таблица стилей, а приведённый в GitHub пример информации о стиле не имеет.</p>\n<p>Не питайте ложных иллюзий - чтобы эффективно представлять таблицы в веб, необходимо придать им хорошую структуру в HTML и применить к ним таблицы стилей (<a>CSS</a>). В данном разделе мы сфокусируемся на HTML, чтобы узнать о том, что касается CSS, вам надо обратиться к статье <a>Стилизация таблиц</a>.</p>\n<p>В этом разделе мы не фокусируемся на CSS, но всё же дали простейшую таблицу стилей CSS, чтобы сделать таблицы более читабельными. Эту таблицу стилей можно найти <a class="external" target="_blank">здесь</a>, можно также использовать <a class="external" target="_blank">шаблон HTML</a>, применяющий эту стаблицу стилей — вместе они дадут вам хорошую основу для экспериментов с таблицами HTML.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Посмотрите также <a class="external" target="_blank">таблицу personal_pronouns с применённым к ней стилем</a>, чтобы получить представление о том, как она выглядит.</p>\n</div></div></section><section aria-labelledby="когда_не_надо_использовать_таблицы_html"><h3 id="когда_не_надо_использовать_таблицы_html"><a>Когда не надо использовать таблицы HTML?</a></h3><div class="section-content"><p>HTML-таблицы следует использовать для табличных данных — это то, для чего они предназначены. К сожалению, многие используют таблицы HTML для оформления веб-страниц, например, одна строка для заголовка, одна для содержимого, одна для сносок, и тому подобное. Подробнее об этом можно узнать в разделе <a>Вёрстка</a> на <a>Начальном обучающем модуле доступности</a>. Это происходило из-за плохой поддержки CSS в разных браузерах; в наше время такое встречается гораздо реже, но иногда всё же попадается.</p>\n<p>Короче говоря, использование таблиц в целях оформления вместо <a>методов CSS</a> является плохой идеей по следующим причинам :</p>\n<ol>\n  <li><strong>Таблицы, используемые для оформления, уменьшают доступность страниц для людей, имеющих проблемы со зрением</strong>: <a class="only-in-en-us" title="Currently only available in English (US)">Скринридеры (Screenreaders <small>(en-US)<small></small></small></a>), используемые ими, интерпретируют HTML-теги и читают содержимое пользователю. Поскольку таблицы не являются средством для представления структуры таблицы, и разметка получается сложнее, чем при использовании методов CSS, скринридеры вводят пользователей в заблуждение.</li>\n  <li><strong>Таблицы создают путаницу тегов</strong>: Как уже упоминалось, оформление страниц с помощью таблиц даёт более сложную структуру разметки, чем специально предназначенные для этого методы. Соответственно, такой код труднее писать, поддерживать и отлаживать.</li>\n  <li><strong>Таблицы не реагируют автоматически на тип устройства</strong>: У надлежащих контейнеров (например, <a><code>&lt;header&gt;</code></a>, <a><code>&lt;section&gt;</code></a>, <a><code>&lt;article&gt;</code></a>, или <a><code>&lt;div&gt;</code></a>) ширина по умолчанию равна 100% от их родительского элемента. У таблиц же размер по умолчанию подстраивается под их содержимое, так что чтобы они одинаково хорошо работали на разных типах устройств необходимо принимать дополнительные меры.</li>\n</ol></div></section><section aria-labelledby="упражнение_ваша_первая_таблица"><h2 id="упражнение_ваша_первая_таблица"><a>Упражнение: ваша первая таблица</a></h2><div class="section-content"><p>Итак, мы уже достаточно говорили о теории, теперь возьмём конкретный пример и построим таблицу.</p>\n<ol>\n  <li>Прежде всего, создайте локальную копию <a class="external" target="_blank">blank-template.html</a> и <a class="external" target="_blank">minimal-table.css</a> в новой папке на вашем компьютере.</li>\n  <li>Содержимое любой таблицы заключается между двумя тегами : <strong><a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;table&gt;&lt;/table&gt;</code> <small>(en-US)<small></small></small></a></strong>. Добавьте их в тело HTML.</li>\n  <li>Самым маленьким контейнером в таблице является ячейка, она создаётся элементом <strong><a><code>&lt;td&gt;</code></a></strong> (\'td\' - сокращение от \'table data\'). Введите внутри тегов table следующее:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">Hi, I\'m your first cell.\n</pre></div>\n  </li>\n  <li>Чтобы получить строку из четырёх ячеек, необходимо скопировать эти теги три раза. Обновите содержимое таблицы так, чтобы она выглядела следующим образом:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">Hi, I\'m your first cell.\nI\'m your second cell.\nI\'m your third cell.\nI\'m your fourth cell.\n</pre></div>\n  </li>\n</ol>\n<p>Как видите, ячейки не располагаются одна под другой, на самом деле они автоматически выравниваются по отношению к другим ячейкам той же строки. Каждый элемент <code>&lt;td&gt;</code> создаёт отдельную ячейку, а все вместе они создают первую строку. Каждая добавленная ячейка удлиняет эту строку.</p>\n<p>Чтобы эта строка перестала расти, а новые ячейки перешли на вторую строку, необходимо использовать элемент <strong><a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;tr&gt;</code> <small>(en-US)<small></small></small></a></strong> (\'tr\' - сокращение от \'table row\'). Попробуем, как это получится.</p>\n<ol>\n  <li>Поместите четыре уже созданных ячейки между тегами <code>&lt;tr&gt;</code> как здесь показано:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n  Hi, I\'m your first cell.\n  I\'m your second cell.\n  I\'m your third cell.\n  I\'m your fourth cell.\n\n</pre></div>\n  </li>\n  <li>Теперь, когда одна строка уже есть, добавим ещё — каждую строку надо вложить в дополнительный элемент <code>&lt;tr&gt;</code>, а каждая ячейка должна быть внутри <code>элемента &lt;td&gt;</code>.</li>\n</ol>\n<p>В результате получится таблица, которая будет выглядеть примерно так:</p>\n\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Этот пример можно также найти на GitHub под названием <a class="external" target="_blank">simple-table.html</a> (<a class="external" target="_blank">see it live also</a>).</p>\n</div></div></section><section aria-labelledby="добавление_заголовков_с_помощью_элементов_th"><h2 id="добавление_заголовков_с_помощью_элементов_th"><a>Добавление заголовков с помощью элементов &lt;th&gt;</a></h2><div class="section-content"><p>Теперь обратимся к табличным заголовкам — особым ячейкам, которые идут вначале строки или столбца и определяют тип данных, которые содержит данная строка или столбец (как "Person" и "Age" в первом примере данной статьи). Чтобы показать, для чего они нужны, возьмём следующий пример. Сначала исходный код:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><table>\n  <tbody><tr>\n    <td>&nbsp;</td>\n    <td>Knocky</td>\n    <td>Flor</td>\n    <td>Ella</td>\n    <td>Juan</td>\n  </tr>\n  <tr>\n    <td>Breed</td>\n    <td>Jack Russell</td>\n    <td>Poodle</td>\n    <td>Streetdog</td>\n    <td>Cocker Spaniel</td>\n  </tr>\n  <tr>\n    <td>Age</td>\n    <td>16</td>\n    <td>9</td>\n    <td>10</td>\n    <td>5</td>\n  </tr>\n  <tr>\n    <td>Owner</td>\n    <td>Mother-in-law</td>\n    <td>Me</td>\n    <td>Me</td>\n    <td>Sister-in-law</td>\n  </tr>\n  <tr>\n    <td>Eating Habits</td>\n    <td>Eats everyone\'s leftovers</td>\n    <td>Nibbles at food</td>\n    <td>Hearty eater</td>\n    <td>Will eat till he explodes</td>\n  </tr>\n</tbody></table>\n</pre></div>\n<p>Теперь как выглядит таблица:</p>\n\n<p>Проблема в том, что, хотя вы и можете представить, о чем идёт речь, ссылаться на эти данные не так легко, как хотелось бы. Лучше, чтобы строка и столбец с заголовками как-то выделялись.</p></div></section><section aria-labelledby="упражнение_заголовки"><h3 id="упражнение_заголовки"><a>Упражнение: заголовки</a></h3><div class="section-content"><p>Попробуем улучшить эту таблицу.</p>\n<ol>\n  <li>Сначала создайте локальную копию <a class="external" target="_blank">dogs-table.html</a> и <a class="external" target="_blank">minimal-table.css</a> в новой папке на вашем компьютере. HTML содержит пример Dogs, который вы уже видели выше.</li>\n  <li>Чтобы опознавать заголовки таблицы в качестве заголовков, визуально и семантически, можно использовать элемент <strong><a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;th&gt;</code> <small>(en-US)<small></small></small></a></strong> (\'th\' сокращение от \'table header\'). Он работает в точности как <code>&lt;td&gt;</code>, за исключением того, что обозначает заголовок, а не обычную ячейку. Замените в своём HTML все элементы <code>&lt;td&gt;</code>, содержащие заголовки, на элементы <code>&lt;th&gt;</code>.</li>\n  <li>Сохраните HTML и загрузите его в браузер, и вы увидите, что заголовки теперь выглядят как заголовки.</li>\n</ol>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Законченный пример можно найти на <a class="external" target="_blank">dogs-table-fixed.html</a> в GitHub (<a class="external" target="_blank">посмотрите живой пример</a>).</p>\n</div></div></section><section aria-labelledby="для_чего_нужны_заголовки"><h3 id="для_чего_нужны_заголовки"><a>Для чего нужны заголовки?</a></h3><div class="section-content"><p>Мы уже частично ответили на этот вопрос — когда заголовки выделяются, легче искать данные и таблица выглядит лучше.</p>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> По умолчанию к заголовкам таблицы применяется определённый стиль — они выделены жирным шрифтом и выровнены по центру, даже если вы не задавали для них стиль специально.</p>\n</div>\n<p>Заголовки дают дополнительное преимущество — вместе с атрибутом <code>scope</code> (который мы будем изучать в следующей статье) они помогают улучшить связь каждого заголовка со всеми данными строки или столбца одновременно, что довольно полезно</p></div></section><section aria-labelledby="слияние_нескольких_строк_или_столбцов"><h2 id="слияние_нескольких_строк_или_столбцов"><a>Слияние нескольких строк или столбцов</a></h2><div class="section-content"><p>Иногда нам нужно, чтобы ячейки распространялись на несколько строк или столбцов. Возьмём простой пример, в котором приведены имена животных. Иногда бывает нужно вывести имена людей рядом с именами животных. А иногда это не требуется, и тогда мы хотим, чтобы имя животного занимало всю ширину.</p>\n<p>Исходная разметка выглядит так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><table>\n  <tbody><tr>\n    <th>Animals</th>\n  </tr>\n  <tr>\n    <th>Hippopotamus</th>\n  </tr>\n  <tr>\n    <th>Horse</th>\n    <td>Mare</td>\n  </tr>\n  <tr>\n    <td>Stallion</td>\n  </tr>\n  <tr>\n    <th>Crocodile</th>\n  </tr>\n  <tr>\n    <th>Chicken</th>\n    <td>Cock</td>\n  </tr>\n  <tr>\n    <td>Rooster</td>\n  </tr>\n</tbody></table>\n</pre></div>\n<p>Но результат не такой, как хотелось бы:</p>\n\n<p>Нужно, чтобы "Animals", "Hippopotamus" и "Crocodile" распространялись на два столбца, а "Horse" и "Chicken" - на две строки. К счастью, табличные заголовки и ячейки имеют атрибуты <code>colspan</code> <code>и rowspan</code>, которые позволяют это сделать. Оба принимают безразмерное числовое значение, которое равно количеству строк или столбцов, на которые должны распространяться ячейки. Например, <code>colspan="2"</code> распространяет ячейку на два столбца.</p>\n<p>Воспользуемся <code>colspan</code> и <code>rowspan</code> чтобы улучшить таблицу.</p>\n<ol>\n  <li>Сначала создайте локальную копию <a class="external" target="_blank">animals-table.html</a> и <a class="external" target="_blank">minimal-table.css</a> в новой папке на вашем компьютере. Код HTML содержит пример с животными, который вы уже видели выше.</li>\n  <li>Затем используйте атрибут <code>colspan</code> чтобы распространить "Animals", "Hippopotamus" и "Crocodile" на два столбца.</li>\n  <li>Наконец, используйте атрибут <code>rowspan</code> чтобы распространить "Horse" и "Chicken" на две строки.</li>\n  <li>Сохраните код и откройте его в браузере, чтобы увидеть улучшения.</li>\n</ol>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> Законченный пример можно посмотреть в <a class="external" target="_blank">animals-table-fixed.html</a> на GitHub (<a class="external" target="_blank">живой пример</a>).</p>\n</div></div></section><section aria-labelledby="стилизация_столбцов"><h2 id="стилизация_столбцов"><a>Стилизация столбцов</a></h2><div class="section-content"><p>И последняя возможность, о которой рассказывается в данной статье. HTML позволяет указать, какой стиль нужно применять к целому столбцу данных сразу — для этого применяют элементы <strong><a><code>&lt;col&gt;</code></a></strong> и <strong><a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;colgroup&gt;</code> <small>(en-US)<small></small></small></a></strong>. Их ввели, поскольку задавать стиль для каждой ячейки в отдельности или использовать сложный селектор вроде <a class="only-in-en-us" title="Currently only available in English (US)"><code>:nth-child()</code> <small>(en-US)</small></a> было бы слишком утомительно.</p>\n<p>Возьмём простой пример:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><table>\n  <tbody><tr>\n    <th>Data 1</th>\n    <th style="background-color: yellow">Data 2</th>\n  </tr>\n  <tr>\n    <td>Calcutta</td>\n    <td style="background-color: yellow">Orange</td>\n  </tr>\n  <tr>\n    <td>Robots</td>\n    <td style="background-color: yellow">Jazz</td>\n  </tr>\n</tbody></table>\n</pre></div>\n<p>Что даёт нам:</p>\n\n<p>Он не идеален, поскольку нам пришлось повторить информацию о стиле для всех трёх ячеек в столбце (в реальном проекте, возможно, придётся вводить <code>class</code> на всех трёх и вводит правило в таблице стилей). Вместо этого, мы можем задать информацию один раз, в элементе <code>&lt;col&gt;</code>. <code>Элемент &lt;col&gt;</code> задаётся в контейнере <code>&lt;colgroup&gt;</code> сразу же за открывающим тегом <code>&lt;table&gt;</code>. Эффект, который мы видели выше, можно задать так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><table>\n  <colgroup>\n    <col>\n    <col style="background-color: yellow">\n  </colgroup>\n  <tbody><tr>\n    <th>Data 1</th>\n    <th>Data 2</th>\n  </tr>\n  <tr>\n    <td>Calcutta</td>\n    <td>Orange</td>\n  </tr>\n  <tr>\n    <td>Robots</td>\n    <td>Jazz</td>\n  </tr>\n</tbody></table>\n</pre></div>\n<p>Мы определяем два "стилизующих столбца". Мы не применяем стиль к первому столбцу, но пустой элемент <code>&lt;col&gt;</code> ввести необходимо — иначе стиль будет применён только к первому столбцу.</p>\n<p>Если бы мы хотели применить информацию о стиле к обоим столбцам, мы могли бы просто ввести один элемент <code>&lt;col&gt;</code> с атрибутом span, таким образом:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n  \n\n</pre></div>\n<p>Подобно <code>colspan</code> и <code>rowspan</code>, <code>span</code> принимает безразмерное числовое значение, указывающее, к какому количеству столбцов нужно применить данный стиль.</p></div></section><section aria-labelledby="упражнение_colgroup_и_col"><h3 id="упражнение_colgroup_и_col"><a>Упражнение: colgroup и col</a></h3><div class="section-content"><p>Теперь попробуйте сами.</p>\n<p>Ниже приведена таблица уроков по языкам. В пятницу (Friday) новый класс целый день изучает голландский (Dutch), кроме того, во вторник (Tuesday) и четверг (Thursdays) есть занятия по немецкому (German). Учительница хочет выделить столбцы, соответствующие дням, когда она преподаёт.</p>\n\n<p>Заново создайте таблицу, проделав указанные ниже действия.</p>\n<ol>\n  <li>Сначала создайте локальную копию файла <a class="external" target="_blank">timetable.html</a> в новой папке на вашем компьютере. Код HTML содержит таблицу, которую вы уже видели выше, но без информации о стиле.</li>\n  <li>Добавьте элемент <code>&lt;colgroup&gt;</code> вверху таблицы, сразу же под тегом <code>&lt;table&gt;</code>, куда вы сможете вставлять элементы <code>&lt;col&gt;</code>.</li>\n  <li>Первые два столбца надо оставить без стиля..</li>\n  <li>Добавьте цвет фона для третьего столбца. Значением атрибута <code>style</code> будет <code>background-color:#97DB9A;</code></li>\n  <li>Задайте ширину для четвёртого столбца. <code>Значением атрибута style</code> будет <code>width: 42px;</code></li>\n  <li>Добавьте цвет фона для пятого столбца. Значением атрибута <code>style</code> будет <code>background-color: #97DB9A;</code></li>\n  <li>Добавьте другой цвет фона и границу для шестого столбца, чтобы показать, что это особый день и она ведёт новый класс. Значениями атрибута <code>style</code> будут: <code>background-color:#DCC48E; border:4px solid #C1437A;</code></li>\n  <li>Последние два дня выходные; значением атрибута style <code>будет width: 42px;</code></li>\n</ol>\n<p>Посмотрите, что у вас получилось. Если застрянете, или захотите себя проверить, можете посмотреть нашу версию в <a class="external" target="_blank">timetable-fixed.html</a> (<a class="external" target="_blank">посмотрите живой пример</a>).</p></div></section><section aria-labelledby="итог"><h2 id="итог"><a>Итог</a></h2><div class="section-content"><p>Здесь приведены практически все базовые сведения о таблицах HTML. В следующей статье вы получите более продвинутые сведения на эту тему.</p></div></section>',
					works: [],
				},
				{
					title: 'HTML таблицы продвинутые возможности и доступность',
					chapter: 1.22,
					content:
						'<header><h1>HTML таблицы продвинутые возможности и доступность</h1></header><div class="section-content">\n<p>Во второй статье этого модуля мы рассматриваем ещё несколько продвинутых возможностей в HTML таблицах — такие как заголовок/описание и группировка строк внутри head, body и footer секциях таблицы, а также доступность таблиц для пользователей с ограниченными возможностями.</p>\n</div><section aria-labelledby="добавление_заголовка_к_таблице_с_помощью_caption"><h2 id="добавление_заголовка_к_таблице_с_помощью_caption"><a>Добавление заголовка к таблице с помощью &lt;caption&gt;</a></h2><div class="section-content"><p>Вы можете добавить заголовок для таблицы установив его в элементе <a><code>&lt;caption&gt;</code></a> и этот элемент необходимо поместить внутрь элемента <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;table&gt;</code> <small>(en-US)</small></a>. Причём вам нужно поместить его сразу после открытия тега <code>&lt;table&gt;</code>.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><table>\n  <caption>\n    Dinosaurs in the Jurassic period\n  </caption></table>\n\n  ...\n\n</pre></div>\n<p>Как можно понять из короткого примера выше, заголовок отражает в себе описание контента таблицы. Это полезно для всех читателей просматривающих страницу и желающих получить краткое представление от том полезна ли для них таблица, что особенно важно для слепых пользователей. Вместо того чтобы читать содержимое множества ячеек чтобы понять о чем таблица, он или она могут полагаться на заголовок и принимать решение читать ли таблицу более подробно.</p>\n<p>Заголовок помещают сразу после тега <code>&lt;table&gt;</code>.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Атрибут <a class="only-in-en-us" title="Currently only available in English (US)"><code>summary</code> <small>(en-US)<small></small></small></a> также может быть использован в <code>&lt;table&gt;</code> элементе предоставляя описание — это также читается скринридерами. Однако мы рекомендуем вместо этого использовать <code>&lt;caption&gt;</code> элемент, так как <code>summary</code> <a class="page-not-created" title="Документация об этом ещё не написана. Пожалуйста, поспособствуйте её написанию!">deprecated</a> в HTML5 спецификации и не может быть прочитан зрячими пользователями (он не отображается на странице).</p>\n</div></div></section><section aria-labelledby="упражнение_добавление_заголовка"><h3 id="упражнение_добавление_заголовка"><a>Упражнение: Добавление заголовка</a></h3><div class="section-content"><p>Давайте попробуем это, вернёмся к примеру который мы ранее встретили в прошлой статье.</p>\n<ol>\n  <li>Откройте расписание занятий школьного учителя по языку в конце статьи <a>HTML таблицы основы</a>, или сделайте копию нашего <a class="external" target="_blank">timetable-fixed.html</a> файла.</li>\n  <li>Добавьте подходящий заголовок к таблице.</li>\n  <li>Сохраните свой код и откройте его в браузере, чтобы посмотреть как это выглядит.</li>\n</ol>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Этот пример можно найти на GitHub по ссылке <a class="external" target="_blank">timetable-caption.html</a> (<a class="external" target="_blank">живой пример</a>).</p>\n</div></div></section><section aria-labelledby="добавление_структуры_с_помощью_thead_tfoot_и_tbody"><h2 id="добавление_структуры_с_помощью_thead_tfoot_и_tbody"><a>Добавление структуры с помощью &lt;thead&gt;, &lt;tfoot&gt; и &lt;tbody&gt;</a></h2><div class="section-content"><p>Когда таблицы становятся более сложными по структуре полезно дать им более структурированное определение. Отличный способ сделать это используя <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;thead&gt;</code> <small>(en-US)</small></a>, <a><code>&lt;tfoot&gt;</code></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;tbody&gt;</code> <small>(en-US)</small></a>, которые позволяют вам разметить header, footer и body секции таблицы.</p>\n<p>Эти элементы не создают дополнительной доступности для пользователей со скринридерами и не приводят к какому-то визуальному улучшению при их использовании. Зато они очень полезны при стилизации и разметке, как точки для добавления CSS к вашей таблице. Вот несколько интересных примеров, в случае длинной таблицы вы можете сделать header и footer таблицы повторяемый на каждой печатной странице, или вы можете сделать body таблицы отображаемое на одной странице и иметь доступ ко всему содержимому контенту прокручивая вверх и вниз.</p>\n<p>Использование:</p>\n<ul>\n  <li>Элементом <code>&lt;thead&gt;</code> нужно обернуть часть таблицы которая относится к заголовку — обычно это первая строка содержащая заголовки колонок, но это не обязательно всегда такой случай. Если вы используете <a><code>&lt;col&gt;</code></a>/<a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;colgroup&gt;</code> <small>(en-US)</small></a> элемент, тогда заголовок должен находиться ниже его.</li>\n  <li>Элементом <code>&lt;tfoot&gt;</code> нужно обернуть ту часть, которая относится к footer таблицы — например, это может быть последняя строка в которой отражаются суммы по столбцам таблицы. Вы можете включить сюда footer таблицы, как и следовало ожидать, или чуть ниже заголовка таблицы (браузер всё равно отобразит его внизу таблицы).</li>\n  <li>Элементом <code>&lt;tbody&gt;</code> необходимо обернуть остальную часть содержимого таблицы которая не находится в header или footer таблицы. Этот блок располагают ниже заголовка таблицы или иногда footer таблицы, зависит от того какую структуру вы решите использовать (читать выше по тексту).</li>\n</ul>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> <code>&lt;tbody&gt;</code> всегда включён в каждой таблице, неявно если не укажете его в коде. Проверьте это, открыв один из предыдущих примеров в котором не используется <code>&lt;tbody&gt;</code> и посмотрите HTML код в <a>browser developer tools</a> — вы увидите, что браузер добавил этот тег самостоятельно. Вы могли бы задаться вопросом почему мы должны волноваться о его включении, но вы должны, потому что это даёт больше контроля над структурой таблицы и стилем.</p>\n</div></div></section><section aria-labelledby="упражнение_добавление_структуры_таблицы"><h3 id="упражнение_добавление_структуры_таблицы"><a>Упражнение: Добавление структуры таблицы</a></h3><div class="section-content"><p>Давайте используем эти новые элементы.</p>\n<ol>\n  <li>В первую очередь, сделайте копию <a class="external" target="_blank">spending-record.html</a> и <a class="external" target="_blank">minimal-table.css</a> в новой папке.</li>\n  <li>Попробуйте открыть это в браузере — вы увидите, что все выглядит классно, но могло бы быть лучше. Строка "SUM" которая содержит потраченные суммы кажется находится не в том месте и некоторые детали отсутствуют в коде.</li>\n  <li>Поместите очевидную строку заголовка внутрь <code>&lt;thead&gt;</code> элемента, строку "SUM" внутрь <code>&lt;tfoot&gt;</code> элемента и оставшийся контент внутрь <code>&lt;tbody&gt;</code> элемента.</li>\n  <li>Сохраните, перезагрузите и вы увидите, что добавление элемента <code>&lt;tfoot&gt;</code> привело к тому, что строка "SUM" опустилась к нижней части таблицы.</li>\n  <li>Далее, добавьте атрибут <a><code>colspan</code></a>, чтобы ячейка "SUM" занимала первые четыре столбца, таким образом числовое значение "Cost" появится в последнем столбце.</li>\n  <li>Давайте добавим несколько простых дополнительных стилей к таблице, чтобы дать вам представление насколько эти элементы полезны при использовании CSS. Внутри в <code>&lt;head&gt;</code> вашего HTML документа вы увидите пустой элемент <a><code>&lt;style&gt;</code></a>. Внутри этого элемента добавьте следующие строки CSS кода:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">tbody {\n  font-size: 90%;\n  font-style: italic;\n}\n\ntfoot {\n  font-weight: bold;\n}\n</pre></div>\n  </li>\n  <li>Сохраните, обновите и вы увидите результат. Если <code>&lt;tbody&gt;</code> и <code>&lt;tfoot&gt;</code> элементы не были установлены, то вам придётся писать много сложных селекторов/правил для применения одного и того же стиля.</li>\n</ol>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> Мы не ожидаем что сейчас вы полностью поймёте CSS. Вы узнаете больше когда пройдёте наши CSS курсы (например, <a>Вступление в CSS</a> это хорошее место для начала; у нас также есть статья конкретно о <a>стилизации таблиц</a>).</p>\n</div>\n<p>Ваша готовая таблица должна выглядеть примерно так:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup">\n\n  \n    <meta charset="utf-8">\n    <title>My spending record</title>\n    <style>\n      html {\n        font-family: sans-serif;\n      }\n\n      table {\n        border-collapse: collapse;\n        border: 2px solid rgb(200, 200, 200);\n        letter-spacing: 1px;\n        font-size: 0.8rem;\n      }\n\n      td,\n      th {\n        border: 1px solid rgb(190, 190, 190);\n        padding: 10px 20px;\n      }\n\n      th {\n        background-color: rgb(235, 235, 235);\n      }\n\n      td {\n        text-align: center;\n      }\n\n      tr:nth-child(even) td {\n        background-color: rgb(250, 250, 250);\n      }\n\n      tr:nth-child(odd) td {\n        background-color: rgb(245, 245, 245);\n      }\n\n      caption {\n        padding: 10px;\n      }\n\n      tbody {\n        font-size: 90%;\n        font-style: italic;\n      }\n\n      tfoot {\n        font-weight: bold;\n      }\n    </style>\n  \n  \n    <table>\n      <caption>\n        How I chose to spend my money\n      </caption>\n      <thead>\n        <tr>\n          <th>Purchase</th>\n          <th>Location</th>\n          <th>Date</th>\n          <th>Evaluation</th>\n          <th>Cost (€)</th>\n        </tr>\n      </thead>\n      <tfoot>\n        <tr>\n          <td colspan="4">SUM</td>\n          <td>118</td>\n        </tr>\n      </tfoot>\n      <tbody>\n        <tr>\n          <td>Haircut</td>\n          <td>Hairdresser</td>\n          <td>12/09</td>\n          <td>Great idea</td>\n          <td>30</td>\n        </tr>\n        <tr>\n          <td>Lasagna</td>\n          <td>Restaurant</td>\n          <td>12/09</td>\n          <td>Regrets</td>\n          <td>18</td>\n        </tr>\n        <tr>\n          <td>Shoes</td>\n          <td>Shoeshop</td>\n          <td>13/09</td>\n          <td>Big regrets</td>\n          <td>65</td>\n        </tr>\n        <tr>\n          <td>Toothpaste</td>\n          <td>Supermarket</td>\n          <td>13/09</td>\n          <td>Good</td>\n          <td>5</td>\n        </tr>\n      </tbody>\n    </table>\n  \n\n</pre></div><div class="code-example" id="sect5"><div class="example-header" id="sect6"></div></div>\n<div class="notecard note" id="sect7">\n  <p><strong>Примечание:</strong> Этот пример можно также найти на GitHub по ссылке <a class="external" target="_blank">spending-record-finished.html</a> (<a class="external" target="_blank">живой пример</a>).</p>\n</div></div></section><section aria-labelledby="вложенные_таблицы"><h2 id="вложенные_таблицы"><a>Вложенные таблицы</a></h2><div class="section-content"><p>В одну таблицу вкладывать другую таблицу возможно, если вы используете полную структуру включая элемент <code>&lt;table&gt;</code>. Это как правило не рекомендуется, так как делает разметку более запутанной и менее доступной для пользователей скринридеров, так в большинстве случаев вы можете просто вставить дополнительные ячейки/строки/столбцы в существующую таблицу. Однако, иногда это необходимо, например, если вы хотите легко импортировать контент из других источников.</p>\n<p>Разметка простой вложенной таблицы:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><table id="table1">\n  <tbody><tr>\n    <th>title1</th>\n    <th>title2</th>\n    <th>title3</th>\n  </tr>\n  <tr>\n    <td id="nested">\n      <table id="table2">\n        <tbody><tr>\n          <td>cell1</td>\n          <td>cell2</td>\n          <td>cell3</td>\n        </tr>\n      </tbody></table>\n    </td>\n    <td>cell2</td>\n    <td>cell3</td>\n  </tr>\n  <tr>\n    <td>cell4</td>\n    <td>cell5</td>\n    <td>cell6</td>\n  </tr>\n</tbody></table>\n</pre></div></div></section><section aria-labelledby="таблицы_для_пользователей_с_ограниченными_возможностями"><h2 id="таблицы_для_пользователей_с_ограниченными_возможностями"><a>Таблицы для пользователей с ограниченными возможностями</a></h2><div class="section-content"><p>Давайте кратко опишем как мы используем данные таблицы. Таблицы могут быть удобным инструментом, который даёт нам быстрый доступ к данным и позволяет искать разные значения. Например, быстрого взгляда на таблицу ниже достаточно, чтобы найти сколько колец было продано в Амстердаме в августе 2016. Чтобы понять эту информацию, мы проводим визуальные ассоциации между данными в этой таблице и её заголовками колонок и/или строк.</p>\n\n<p>Но что если вы не можете провести эти визуальные ассоциации? Как тогда вы сможете прочитать таблицу выше? Люди с ослабленным зрением часто используют скринридер, который читает им информацию с веб-страницы. Это не проблема когда вы читаете простой текст, но интерпретация таблицы может быть сложной проблемой для слепых людей. Тем не менее, вместе с правильной разметкой мы можем заменить визуальные ассоциации программными.</p>\n<p>В этой части статьи приводятся дополнительные способы которые делают таблицы более доступными.</p></div></section><section aria-labelledby="использование_заголовков_столбцов_и_строк"><h3 id="использование_заголовков_столбцов_и_строк"><a>Использование заголовков столбцов и строк</a></h3><div class="section-content"><p>Скринридеры будут определять все заголовки и использовать их создавая программные ассоциации между этими заголовками и ячейками к которым они относятся. Сочетание заголовков столбцов и строк будет определять и интерпретировать данные в каждой ячейке так, что пользователи скринридеров могут интерпретировать таблицу также как это делают зрячие пользователи.</p>\n<p>Мы уже разобрали заголовки в предыдущей статье, смотри по ссылке <a>Добавление заголовков с помощью элемента &lt;th&gt;</a>.</p></div></section><section aria-labelledby="атрибут_scope"><h3 id="атрибут_scope"><a>Атрибут scope</a></h3><div class="section-content"><p>Новая тема в этой статье это атрибут <a class="only-in-en-us" title="Currently only available in English (US)"><code>scope</code> <small>(en-US)<small></small></small></a>, который может быть добавлен к элементу <code>&lt;th&gt;</code> он сообщает скринридеру какие ячейки точно являются заголовками — например, заголовок строки в которой он находится или столбца. Возвращаясь назад к нашему примеру с записями расходов, вы могли однозначно определить заголовки столбцов как здесь:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n  \n    Purchase\n    Location\n    Date\n    Evaluation\n    Cost (€)\n  \n\n</pre></div>\n<p>И у каждой строки может быть определён заголовок, как здесь (если мы добавили заголовки строк и заголовки столбцов):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n  Haircut\n  Hairdresser\n  12/09\n  Great idea\n  30\n\n</pre></div>\n<p>Скринридер распознает разметку структурированную таким образом, что позволяют пользователям прочитать весь столбец или строку целиком.</p>\n<p>Атрибут <code>scope</code> имеет ещё два возможных значения — <code>colgroup</code> и <code>rowgroup</code>. Они используются для заголовков, которые располагаются вверху ваших столбцов или строк. Если вы посмотрите на таблицу "Items sold..." в начале этого раздела статьи, вы увидите что ячейка с "Clothes" находится над ячейками "Trousers", "Skirts" и "Dresses". Все эти ячейки должны быть помечены как заголовки (<code>&lt;th&gt;</code>), но "Clothes" заголовок который находится сверху и определяет остальные три подзаголовка. Поэтому "Clothes" должна получить атрибут <code>scope="colgroup"</code>, тогда как другие получат атрибут <code>scope="col"</code>.</p></div></section><section aria-labelledby="атрибуты_id_и_headers"><h3 id="атрибуты_id_и_headers"><a>Атрибуты id и headers</a></h3><div class="section-content"><p>Альтернатива атрибута <code>scope</code> это использование атрибутов <a><code>id</code></a> и <a><code>headers</code></a> задавая ассоциации между заголовками и ячейками. Этот способ выглядит следующим образом:</p>\n<ol>\n  <li>Вы устанавливаете уникальный <code>id</code> для каждого <code>&lt;th&gt;</code> элемента.</li>\n  <li>Вы устанавливаете атрибут <code>headers</code> для каждого <code>&lt;td&gt;</code> элемента. Каждый <code>headers</code> атрибут должен содержать список всех <code>id</code>, разделённый пробелами, ко всем <code>&lt;th&gt;</code> элементам которые действуют как заголовок для этой ячейки.</li>\n</ol>\n<p>Это обеспечивает явное определение позиции для каждой ячейки вашей HTML таблицы, определяет заголовки столбцов и строк таблицы. Для того чтобы это работало реально хорошо таблице нужно определить и заголовки столбцов, и заголовки строк.</p>\n<p>Вернёмся к нашему примеру с расчётом затрат, его можно переписать следующим образом:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n  \n    Purchase\n    Location\n    Date\n    Evaluation\n    Cost (€)\n  \n\n\n  \n    Haircut\n    Hairdresser\n    12/09\n    Great idea\n    30\n  \n\n  ...\n\n</pre></div>\n<div class="notecard note" id="sect8">\n  <p><strong>Примечание:</strong> Этот метод создания очень точного определения ассоциаций между заголовками и данными в ячейках, но использует <strong>гораздо</strong> больше разметки и оставляет обширное пространство для ошибок. Атрибута <code>scope</code> обычно достаточно для большинства таблиц.</p>\n</div></div></section><section aria-labelledby="упражнение_играем_со_scope_и_headers"><h3 id="упражнение_играем_со_scope_и_headers"><a>Упражнение: играем со scope и headers</a></h3><div class="section-content"><ol>\n  <li>Для заключительного упражнения мы, вначале создадим копию <a class="external" target="_blank">items-sold.html</a> и <a class="external" target="_blank">minimal-table.css</a> в новой папке.</li>\n  <li>Теперь попробуем добавить соответствующий атрибут <code>scope</code>, который наиболее соответствует этой таблице.</li>\n  <li>И наконец попробуем сделать другую копию изначальных файлов, на этот раз делая таблицу более доступной используя атрибуты <code>id</code> и <code>headers</code>.</li>\n</ol>\n<div class="notecard note" id="sect9">\n  <p><strong>Примечание:</strong> вы можете проверить как работает последние примеры здесь <a class="external" target="_blank">items-sold-scope.html</a> (<a class="external" target="_blank">also see this live</a>) и <a class="external" target="_blank">items-sold-headers.html</a> (<a class="external" target="_blank">see this live too</a>).</p>\n</div></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Есть ещё некоторые вещи которые можно узнать о HTML таблицах, но мы действительно дали всё что нужно на настоящий момент. Дальше вы возможно захотите больше узнать о стилизации HTML таблиц, посмотрите статью <a>"Стилизация таблиц"</a>.</p></div></section><section aria-labelledby="в_этом_блоке"><h2 id="в_этом_блоке"><a>В этом блоке</a></h2><div class="section-content"><ul>\n  <li><a>HTML таблицы основы</a></li>\n  <li><a aria-current="page">HTML таблицы продвинутые возможности и доступность</a></li>\n  <li><a>Структурирование данных о планетах</a></li>\n</ul></div></section>',
					works: [],
				},
				{
					title: 'Аттестация- Структурирование данных о планетах',
					chapter: 1.23,
					content:
						'<header><h1>Аттестация: Структурирование данных о планетах</h1></header><div class="section-content">\n<p>В нашей аттестации, мы предоставим вам некоторые данные о планетах солнечной системы, и убедим вас структурировать их в HTML таблицу.</p>\n</div><section aria-labelledby="отправная_точка"><h2 id="отправная_точка"><a>Отправная точка</a></h2><div class="section-content"><p>Для того, чтобы начать аттестацию, скопируйте <a class="external" target="_blank">blank-template.html</a>, <a class="external" target="_blank">minimal-table.css</a>, и <a class="external" target="_blank">planets-data.txt</a> в новую директорию на вашем компьютере.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> В качестве альтернативы, вы можете использовать такие сайты, как <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Glitch</a>, чтобы пройти аттестацию. Вы можете вставлять HTML, CSS и JavaScript в один из этих онлайн редакторов. Если используемый вами онлайн редактор не имеет отдельных JavaScript/CSS панелей, не стесняйтесь вставлять <code>&lt;script&gt;</code>/<code>&lt;style&gt;</code> элементы в HTML страницу.</p>\n</div></div></section><section aria-labelledby="краткое_описание_проекта"><h2 id="краткое_описание_проекта"><a>Краткое описание проекта</a></h2><div class="section-content"><p>Вы работаете в школе. В настоящее время ваши ученики изучают планеты солнечной системы, и вы хотите обеспечить их наглядным пособием для поиска фактов и данных о планетах. Таблица HTML была бы идеальным вариантом — вам необходимо взять необработанные данные, которые у вас есть, и превратить их в таблицу, следуя нижеприведённым инструкциям.</p>\n<p>Готовая таблица должна выглядеть так:</p>\n<p>\n  \n</p>\n<p>Вы можете также <a class="external" target="_blank">посмотреть на готовый вариант здесь</a> (не смотрите на исходный код — не жульничайте!).</p></div></section><section aria-labelledby="шаги_для_завершения"><h2 id="шаги_для_завершения"><a>Шаги для завершения</a></h2><div class="section-content"><p>Следующие шаги описывают что вам нужно сделать, чтобы завершить пример таблицы. Все данные, что вам нужны находятся в файле <code>planets-data.txt</code>. Если у вас возникли проблемы с визуализацией данных, посмотрите приведённый выше пример или попробуйте нарисовать диаграмму.</p>\n<ol>\n  <li>Откройте вашу копию <code>blank-template.html</code> , и запустите таблицу, предоставив ей внешний контейнер, заголовок и тело таблицы. Вам не нужен нижний колонтитул (footer) для этого примера.</li>\n  <li>Добавьте предоставленную подпись к вашей таблице ("Caption" в конце <code>planets-data.txt</code>).</li>\n  <li>Добавьте строку в заголовок таблицы, содержащую все заголовки столбцов.</li>\n  <li>Создайте все строки содержимого внутри тела таблицы, помня, что все заголовки строк должны быть <em>семантически</em>.</li>\n  <li>Убедитесь, что весь контент помещён в нужные ячейки - в исходных данных каждая строка данных о планете отображается рядом со связанной с ней планетой.</li>\n  <li>Добавьте атрибуты, чтобы заголовки строк и столбцов были однозначно связаны со строками, столбцами или группами строк, для которых они выступают в качестве заголовков.</li>\n  <li>Добавьте чёрную рамку вокруг столбца, который содержит все заголовки строк с именами планет.</li>\n</ol></div></section><section aria-labelledby="подсказки_и_советы"><h2 id="подсказки_и_советы"><a>Подсказки и советы</a></h2><div class="section-content"><ul>\n  <li>Первая ячейка строки заголовка должна быть пустой, и занимать два столбца.</li>\n  <li>Заголовки групповых строк (например, <em>Jovian planets</em>), которые расположены слева от заголовков строк с именами планет (например, <em>Saturn</em>), немного сложно разобрать - необходимо убедиться, что каждый из них охватывает правильное количество строк и столбцов.</li>\n  <li>Один из способов связать заголовки с их строками / столбцами намного проще, чем другой.</li>\n</ul></div></section><section aria-labelledby="аттестация_или_дальнейшая_помощь"><h2 id="аттестация_или_дальнейшая_помощь"><a>Аттестация или дальнейшая помощь</a></h2><div class="section-content"><p>Если вы хотите, чтобы ваша работа была оценена, или вы застряли и хотите обратиться за помощью:</p>\n<ol>\n  <li>Разместите свою работу в онлайн-редакторе, таком как <a class="external" target="_blank">CodePen</a>, <a class="external" target="_blank">jsFiddle</a> или <a class="external" target="_blank">Glitch</a>.</li>\n  <li>Напишите сообщение с просьбой об оценке и/или помощи в <a class="external" target="_blank">разделе обучения на форуме MDN Discourse</a>. Ваш пост должен включать:\n    <ul>\n      <li>Описательный заголовок, такой как «Требуется оценка для структурирования данных планеты».</li>\n      <li>Детали того, что вы уже пробовали, и что вы хотели бы, чтобы мы сделали, например, если вы застряли и нуждаетесь в помощи, или хотите оценить свою работу.</li>\n      <li>Ссылка на пример, который вы хотите оценить или в котором вам нужна помощь, в онлайн-редакторе (как упомянуто в шаге 1 выше). Это хорошая практика в решении проблем - очень сложно помочь кому-то с проблемой кода, если вы не видите его код.</li>\n      <li>Ссылка на актуальную задачу или страницу оценки, чтобы мы могли найти вопрос, с которым вам нужно помочь.</li>\n    </ul>\n  </li>\n</ol></div></section>',
					works: [],
				},
			],
		},
		{
			title: '',
			chapter: 2,
			part: 'javascript',
			content: '',
			parts: [
				{
					title: 'Научитесь стилизовать HTML с помощью CSS',
					chapter: 2.1,
					content:
						'<header><h1>Научитесь стилизовать HTML с помощью CSS</h1></header><div class="section-content"><p>Каскадные таблицы стилей — или <a>CSS</a> — это технология, которую следует изучать непосредственно после HTML. В отличие от HTML, который служит для определения структуры и семантики содержимого, CSS отвечает за его внешний вид и отображение. К примеру, с помощью CSS можно изменять шрифт, цвет, размер, межстрочный интервал, разделять содержимое на колонки, а также добавлять анимацию и другие декоративные элементы.</p>\n<div class="callout" id="sect1">\n  <h4 id="хотите_стать_frontend-разработчиком">Хотите стать frontend-разработчиком?</h4>\n  <p>Мы составили курс, который содержит всю необходимую информацию для достижения этой цели.</p>\n  <p><a><strong>Начать изучение курса</strong></a></p>\n</div></div><section aria-labelledby="необходимые_условия"><h2 id="необходимые_условия"><a>Необходимые условия</a></h2><div class="section-content"><p>Прежде чем браться за CSS, вам стоит разобраться с основами HTML. Мы рекомендуем сначала изучить модуль <a>Введение в HTML</a></p>\n<p>После того как вы разберётесь с основами HTML, мы рекомендуем продолжать изучение HTML и CSS одновременно, переключаясь между темами. HTML гораздо интереснее в сочетании с CSS, и вы не можете по настоящему изучить CSS не зная HTML</p>\n<p>В данном разделе содержится информация, которая требует базового знакомства с компьютером и интернетом. В статье <a>Установка рабочего пространства</a> подробно описано необходимое ПО и способы его установки, необходимо также будет уметь создавать и управлять файлами, в чём поможет статья <a>Работа с файлами</a>, которая включена в полное руководство для новичка <a>Основы веб</a>.</p>\n<p>Перед тем как начинать данный раздел, мы рекомендуем пройти руководство <a>Основы веб</a>, хотя это вовсе не обязательно — большая часть того, что вы найдёте в статье об основах CSS также встречается в разделе <a>Введение в CSS</a>, хотя и более детально.</p></div></section><section aria-labelledby="модули"><h2 id="модули"><a>Модули</a></h2><div class="section-content"><p>Этот раздел содержит модули в порядке, наиболее подходящем для работы с ними. Лучше всего начать с самого первого.</p>\n<dl>\n  <dt id="введение_в_css"><a>Введение в CSS</a></dt>\n  <dd>\n    <p>CSS (каскадные таблицы стилей) используется для стилизации и компоновки веб-страниц — например, для изменения шрифта, цвета, размера и интервала содержимого, разделения его на несколько столбцов или добавления анимации и других декоративных элементов. Этот модуль обеспечивает хорошее начало вашего пути к освоению CSS с основами того, как он работает, как выглядит синтаксис и как вы можете начать использовать его для добавления стилей в HTML.</p>\n  </dd>\n  <dt id="устройство_css"><a>Устройство CSS</a></dt>\n  <dd>\n    <p>Этот модуль продолжается с того места, где закончился модуль <a>введение в CSS</a> — теперь, после того как вы познакомились с языком и получили опыт его использования, пришло время погрузится немного глубже. В этот модуле рассказывается про каскад и наследование, все доступные типы селекторов, единицы измерения, размеры, стилизацию фона и рамок, отладку, и многое другое.</p>\n    <p>Цель этого модуля — предоставить вам инструментарий для написания компетентного CSS, перед переходом к более специфичным дисциплинам, как <a>стилизация текста</a> и <a>CSS раскладки</a>.</p>\n  </dd>\n  <dt id="стилизация_текста"><a>Стилизация текста</a></dt>\n  <dd>\n    <p>После изучения основ, следующая тема, которую стоит изучить — стилизация текста. Это одна из самых распространенных вещей, для которых используется CSS. В этом модуле мы рассмотрим основы стилизации текста, включая установку шрифта, жирность, курсив, межстрочный и межбуквенный интервалы, тени и другие особенности оформления. В завершении модуля мы рассмотрим подключение пользовательских шрифтов на странице, а так же стилизацию списков и ссылок</p>\n  </dd>\n  <dt id="css_раскладки"><a>CSS раскладки</a></dt>\n  <dd>\n    <p>К текущему моменту мы познакомились с основами CSS. Мы знаем, как оформлять текст, как оформлять и изменять блоки, в которых находится ваш контент. Пришло время узнать, как разместить ваши блоки в нужных местах в зависимости от области просмотра и тому подобного. Мы уже знаем достаточно, чтобы погрузиться в изучение раскладки с помощью CSS, в то, как изменять отображение в зависимости от особенностей экрана, как использовать современные методы раскладки, такие как Flexbox и CSS grid, и некоторые традиционные методы раскладки, которые все ещё применяются.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="решаем_часто_встречающиеся_проблемы_в_css"><h2 id="решаем_часто_встречающиеся_проблемы_в_css"><a>Решаем часто встречающиеся проблемы в CSS</a></h2><div class="section-content"><p>В разделе <strong><a>Использование CSS для решения общих проблем</a></strong> даны ссылки на разделы, объясняющие, как следует использовать CSS для решения самых распространённых проблем при создании веб-страницы.</p>\n<p>В самом начале вы будете применять цвет к тексту и фону HTML-элементов, изменять их размер, форму, местоположение, добавлять и стилизовать границы. Однако с углублённым знанием даже основ CSS вы сможете сделать практически что угодно. Одним из плюсов изучения CSS является то, что вы быстро начнёте понимать, можно или нельзя что-то сделать средствами CSS, даже если вы ещё не уверены, как это сделать.</p></div></section><section aria-labelledby="css_странный"><h2 id="css_странный"><a>"CSS странный"</a></h2><div class="section-content"><p>CSS иначе, чем большинство языков программирования и инструментов для дизайна, с которыми вы можете столкнуться. Почему это работает именно так? В следующем видео, Мириам Сюзанна дает объяснение того, почему CSS работает так, как он работает, и почему он так развивался:</p></div></section>',
					works: [],
				},
				{
					title: 'Основы CSS',
					chapter: 2.2,
					content:
						'<header><h1>Основы CSS</h1></header><div class="section-content">\n<p>CSS (Cascading Style Sheets) — это код, который вы используете для стилизации вашей веб-страницы. <em>Основы CSS</em> помогут вам понять, что вам нужно для начала работы. Мы ответим на такие вопросы как: Как сделать мой текст черным или красным? Как сделать так, чтобы контент появлялся в определённом месте на экране? Как украсить мою веб-страницу с помощью фоновых изображений и цветов?</p></div><section aria-labelledby="так_что_же_такое_css"><h2 id="так_что_же_такое_css"><a>Так что же такое CSS?</a></h2><div class="section-content"><p>Как и HTML, CSS на самом деле не является языком программирования. Это не язык разметки - это <em>язык таблицы стилей.</em> Это означает, что он позволяет применять стили выборочно к элементам в документах HTML. Например, чтобы выбрать <strong>все</strong> элементы абзаца на HTML странице и изменить текст внутри них с чёрного на красный, вы должны написать этот CSS:</p>\n<pre compile="false" disable="true" language="markup">p {\n  color: red;\n}\n</pre>\n<p>Давайте попробуем: вставьте эти три строки CSS в новый файл в ваш текстовый редактор, а затем сохраните файл как <code>style.css</code> в вашей папке <code>styles</code>.</p>\n<p>Но нам всё равно нужно применить CSS к нашему HTML документу. В противном случае, CSS стиль не повлияет на то, как ваш браузер отобразит HTML документ. (Если вы не следили за нашим проектом, то прочитайте раздел <a>Работа с файлами</a> и <a>Основы HTML</a>, чтобы узнать, что вам нужно сделать в первую очередь.)</p>\n<ol>\n  <li>Откройте ваш файл <code>index.html</code> и вставьте следующую строку куда-нибудь в шапку, между <code>&lt;head&gt;</code> и <code>&lt;/head&gt;</code> тегами:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><link href="styles/style.css" rel="stylesheet" type="text/css">\n</pre></div>\n  </li>\n  <li>Сохраните <code>index.html</code> и загрузите его в вашем браузере. Вы должны увидеть что-то вроде этого:</li>\n</ol>\n<p>\n  Если текст вашего абзаца теперь красный, примите наши поздравления! Вы написали свой первый успешный CSS!\n</p></div></section><section aria-labelledby="анатомия_набора_правил_css"><h3 id="анатомия_набора_правил_css"><a>Анатомия набора правил CSS</a></h3><div class="section-content"><p>Давайте взглянем на вышеупомянутый CSS немного более подробно:</p>\n<p>\n  \n</p>\n<p>Вся структура называется <strong>набором правил</strong> (но зачастую для краткости "правило"). Отметим также имена отдельных частей:</p>\n<dl>\n  <dt id="селектор_selector"><a>Селектор (Selector)</a></dt>\n  <dd>\n    <p>Имя HTML-элемента в начале набора правил. Он выбирает элемент(ы) для применения стиля (в данном случае, элементы <code>p</code> ). Для стилизации другого элемента, просто измените селектор.</p>\n  </dd>\n  <dt id="объявление_declaration"><a>Объявление (Declaration)</a></dt>\n  <dd>\n    <p>Единственное правило, например <code>color: red;</code> указывает, какие из <strong>свойств</strong> элемента вы хотите стилизовать.</p>\n  </dd>\n  <dt id="свойства_properties"><a>Свойства (Properties)</a></dt>\n  <dd>\n    <p>Способы, которыми вы можете стилизовать определённый HTML-элемент (в данном случае, <code>color</code> является свойством для элементов <a><code>&lt;p&gt;</code></a>). В CSS вы выбираете, какие свойства вы хотите затронуть в вашем правиле.</p>\n  </dd>\n  <dt id="значение_свойства_property_value"><a>Значение свойства (Property value)</a></dt>\n  <dd>\n    <p>Справа от свойства, после двоеточия, у нас есть <strong>значение свойства</strong>, которое выбирает одно из множества возможных признаков для данного свойства (существует множество значений <code>color</code>, помимо <code>red</code>).</p>\n  </dd>\n</dl>\n<p>Обратите внимание на важные части синтаксиса:</p>\n<ul>\n  <li>Каждый набор правил (кроме селектора) должен быть обёрнут в фигурные скобки (<code>{}</code>).</li>\n  <li>В каждом объявлении необходимо использовать двоеточие (<code>:</code>), чтобы отделить свойство от его значений.</li>\n  <li>В каждом наборе правил вы должны использовать точку с запятой (<code>;</code>), чтобы отделить каждое объявление от следующего.</li>\n</ul>\n<p>Таким образом, чтобы изменить несколько значений свойств сразу, вам просто нужно написать их, разделяя точкой с запятой, например так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p {\n  color: red;\n  width: 500px;\n  border: 1px solid black;\n}\n</pre></div></div></section><section aria-labelledby="выбор_нескольких_элементов"><h3 id="выбор_нескольких_элементов"><a>Выбор нескольких элементов</a></h3><div class="section-content"><p>Вы также можете выбрать несколько элементов разного типа и применить единый набор правил для всех из них. Добавьте несколько селекторов, разделённых запятыми. Например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p,\nli,\nh1 {\n  color: red;\n}\n</pre></div></div></section><section aria-labelledby="разные_типы_селекторов"><h3 id="разные_типы_селекторов"><a>Разные типы селекторов</a></h3><div class="section-content"><p>Существует множество различных типов селектора. Выше мы рассматривали только <strong>селектор элементов</strong>, который выбирает все элементы определённого типа в HTML документе. Но мы можем сделать выбор более конкретным. Вот некоторые из наиболее распространённых типов селекторов:</p>\n\n<p>Существует ещё много селекторов для изучения, и вы можете найти более подробный список в нашем <a class="only-in-en-us" title="Currently only available in English (US)">Руководстве селекторов <small>(en-US)<small></small></small></a>.</p></div></section><section aria-labelledby="шрифты_и_текст"><h2 id="шрифты_и_текст"><a>Шрифты и текст</a></h2><div class="section-content"><p>Теперь, когда мы изучили некоторые основы CSS, давайте добавим ещё несколько правил и информацию в наш файл <code>style.css</code>, чтобы наш пример хорошо выглядел. Прежде всего, давайте сделаем, чтобы наши шрифты и текст выглядели немного лучше.</p>\n<ol>\n  <li>Прежде всего, вернитесь и найдите <a>вывод из Google Fonts</a>, который вы уже где-то сохранили. Добавьте элемент <a><code>&lt;link&gt;</code></a> где-нибудь внутри шапки вашего <code>index.html</code> (снова, в любом месте между тегами <code>&lt;head&gt;</code> и <code>&lt;/head&gt;</code>). Это будет выглядеть примерно так:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><link href="http://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" type="text/css">\n</pre></div>Этот код связывает вашу страницу с таблицой стилями, которая загружает семейство шрифтов Open Sans вместе с вашей страницей и позволяет вам применять их к вашим HTML-элементам используя свою собственную таблицу стилей.\n  </li>\n  <li>Затем, удалите существующее правило в вашем <code>style.css</code> файле. Это был хороший тест, но красный текст, на самом деле, не очень хорошо выглядит.</li>\n  <li>Добавьте следующие строки в нужное место, заменив строку <code>placeholder</code> актуальной <code>font-family</code> строкой, которую вы получили из Google Fonts. (<code>font-family</code> просто означает, какой шрифт(ы) вы хотите использовать для вашего текста). Это правило устанавливает глобальный базовый шрифт и размер шрифта для всей страницы (поскольку <code>&lt;html&gt;</code> является родительским элементом для всей страницы, и все элементы внутри него наследуют такой же <code>font-size</code> и <code>font-family</code>):\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">html {\n  font-size: 10px; /* px значит \'пиксели\': базовый шрифт будет 10 пикселей в высоту  */\n  font-family: placeholder: здесь должно быть имя шрифта из Google fonts\n}\n</pre></div>\n    <div class="notecard note" id="sect1">\n      <p><strong>Примечание:</strong> Все в CSS документе между <code>/*</code> и <code>*/</code> является <strong>CSS комментарием</strong>, который браузер игнорирует при исполнении кода. Это место, где вы можете написать полезные заметки о том, что вы делаете.</p>\n    </div>\n  </li>\n  <li>Теперь мы установим размер шрифта для элементов, содержащих текст внутри HTML тела (<a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a>, <a><code>&lt;li&gt;</code></a>, и <a><code>&lt;p&gt;</code></a>). Мы также отцентрируем текст нашего заголовка и установим некоторую высоту строки и расстояние между буквами в теле документа, чтобы сделать его немного более удобным для чтения:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">h1 {\n  font-size: 60px;\n  text-align: center;\n}\n\np,\nli {\n  font-size: 16px;\n  line-height: 2;\n  letter-spacing: 1px;\n}\n</pre></div>\n  </li>\n</ol>\n<p>Вы можете настроить значения <code>px</code> так, как вам нравится, чтобы ваш дизайн выглядел так, как вы хотите, но, в общем, ваш дизайн должен выглядеть вот так:</p>\n<p>\n  \n</p></div></section><section aria-labelledby="блоки_блоки_и_ещё_раз_блоки"><h2 id="блоки_блоки_и_ещё_раз_блоки"><a>Блоки, блоки и ещё раз блоки</a></h2><div class="section-content"><p>Одна вещь, которую вы заметите в написании CSS, заключается в том, что многое из этого касается блоков - настройка их размера, цвета, положения и т.д. Большинство HTML-элементов на странице можно рассматривать как блоки, расположенные друг над другом.</p>\n<p>\n  \n</p>\n<p>Не удивительно, макет CSS основан, главным образом, на <em>блочной модели (box model)</em>. Каждый из блоков, занимающий пространство на вашей странице имеет такие свойства, как:</p>\n<ul>\n  <li><code>padding</code>, пространство только вокруг контента (например, вокруг абзаца текста)</li>\n  <li><code>border</code>, сплошная линия, которая расположена рядом с padding</li>\n  <li><code>margin</code>, пространство вокруг внешней стороны элемента</li>\n</ul>\n<p>\n  \n</p>\n<p>В этом разделе мы также используем:</p>\n<ul>\n  <li><code>width</code> (ширину элемента)</li>\n  <li><code>background-color</code>, цвет позади контента и padding элементов</li>\n  <li><code>color</code>, цвет контента элемента (обычно текста)</li>\n  <li><code>text-shadow</code>: устанавливает тень на тексте внутри элемента</li>\n  <li><code>display</code>: устанавливает режим отображения элемента (пока что не волнуйтесь об этом)</li>\n</ul>\n<p>Итак, давайте начнём и добавим больше CSS на нашей странице! Продолжайте добавлять эти новые правила, расположенные в нижней части страницы, и не бойтесь экспериментировать с изменением значений, чтобы увидеть, как это работает.</p></div></section><section aria-labelledby="изменение_цвета_страницы"><h3 id="изменение_цвета_страницы"><a>Изменение цвета страницы</a></h3><div class="section-content"><div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">html {\n  background-color: #00539f;\n}\n</pre></div>\n<p>Это правило устанавливает цвет фона для всей страницы. Измените код цвета сверху, на цвет который <a>вы выбрали при планировании вашего сайта</a>.</p></div></section><section aria-labelledby="разбираемся_с_телом"><h3 id="разбираемся_с_телом"><a>Разбираемся с телом</a></h3><div class="section-content"><div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">body {\n  width: 600px;\n  margin: 0 auto;\n  background-color: #ff9500;\n  padding: 0 20px 20px 20px;\n  border: 5px solid black;\n}\n</pre></div>\n<p>Теперь для <a><code>&lt;body&gt;</code></a> элемента. Здесь есть немало деклараций, так что давайте пройдём через них всех по одному:</p>\n<ul>\n  <li><code>width: 600px;</code> — заставляет тело быть всегда 600 пикселей в ширину.</li>\n  <li><code>margin: 0 auto;</code> — когда вы устанавливаете два значения для таких свойств как <code>margin</code> или <code>padding</code>, первое значение элемента влияет на верхнюю <strong>и</strong> нижнюю сторону (делает их <code>0</code> в данном случае), и второе значение на левую <strong>и</strong> правую сторону (здесь, <code>auto</code> является особым значением, которое делит доступное пространство по горизонтали поровну слева и справа). Вы также можете использовать один, три или четыре значения, как описано <a>здесь</a>.</li>\n  <li><code>background-color: #FF9500;</code> — как и прежде, устанавливает цвет фона элемента. Я использовал красновато-оранжевый для тела, в отличие от темно-синего цвета для <a><code>&lt;html&gt;</code></a> элемента, но не стесняйтесь и экспериментируйте.</li>\n  <li><code>padding: 0 20px 20px 20px;</code> — у нас есть четыре значения, установленные для padding, чтобы сделать немного пространства вокруг нашего контента. В этот раз мы не устанавливаем padding на верхней части тела, но делаем 20 пикселей слева, снизу и справа. Значения устанавливаются сверху, справа, снизу, слева, в таком порядке.</li>\n  <li><code>border: 5px solid black;</code> — просто устанавливает сплошную чёрную рамку шириной 5 пикселей со всех сторон тела.</li>\n</ul></div></section><section aria-labelledby="позиционирование_и_стилизация_нашего_заголовка_главной_страницы"><h3 id="позиционирование_и_стилизация_нашего_заголовка_главной_страницы"><a>Позиционирование и стилизация нашего заголовка главной страницы</a></h3><div class="section-content"><div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">h1 {\n  margin: 0;\n  padding: 20px 0;\n  color: #00539f;\n  text-shadow: 3px 3px 1px black;\n}\n</pre></div>\n<p>Вы, возможно, заметили, что есть ужасный разрыв в верхней части тела. Это происходит, потому что браузеры применяют некоторый <strong>стиль по умолчанию</strong> для элемента <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a> (по сравнению с другими), даже если вы не применяли какой-либо CSS вообще! Это может звучать как плохая идея, но мы хотим, чтобы веб-страница без стилей имела базовую читаемость. Чтобы избавиться от разрыва, мы переопределили стиль по умолчанию, установив <code>margin: 0;</code>.</p>\n<p>Затем мы установили заголовку верхний и нижний padding на 20 пикселей, и сделали текст заголовка того же цвета, как и цвет фона html.</p>\n<p>Здесь, мы использовали одно довольно интересное свойство - это <code>text-shadow</code>, которое применяет тень к текстовому контенту элемента. Оно имеет следующие четыре значения:</p>\n<ul>\n  <li>Первое значение пикселей задаёт <strong>горизонтальное смещение</strong> тени от текста — как далеко она движется поперёк: отрицательное значение должно двигать её влево.</li>\n  <li>Второе значение пикселей задаёт <strong>вертикальное смещение</strong> тени от текста — как далеко она движется вниз, в этом примере: отрицательное значение должно переместить её вверх.</li>\n  <li>Третье значение пикселей задаёт <strong>радиус размытия</strong> тени — большее значение будет означать более размытую тень.</li>\n  <li>Четвёртое значение задаёт основной цвет тени.</li>\n</ul>\n<p>И вновь попробуйте поэкспериментировать с различными значениями, чтобы посмотреть, что вы можете придумать.</p></div></section><section aria-labelledby="центрирование_изображения"><h3 id="центрирование_изображения"><a>Центрирование изображения</a></h3><div class="section-content"><div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">img {\n  display: block;\n  margin: 0 auto;\n}\n</pre></div>\n<p>В заключение, мы отцентрируем изображение, чтобы оно лучше выглядело. Мы можем использовать <code>margin: 0 auto</code> уловку снова, как мы это делали раньше для body, но мы также должны сделать кое-что ещё. Элемент <a><code>&lt;body&gt;</code></a> является <strong>блочным</strong>, это значит, что он занимает всю ширину страницы и может иметь margin и другие значения отступов, применяемых к нему. Изображения, наоборот, являются <strong>строчными</strong> элементами, то есть они этого не могут. Таким образом, чтобы применить margin к изображению, мы должны дать изображению блочное поведение с помощью <code>display: block;</code>.</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Приведённые выше инструкции предполагают, что вы используете изображение меньшей ширины, чем заданная для <a><code>&lt;body&gt;</code></a> (600px). Если ваше изображение больше, тогда оно выйдет за границы <a><code>&lt;body&gt;</code></a> и займёт пространство страницы. Чтобы исправить это, вы можете: 1) уменьши ширину изображения используя <a class="external" target="_blank">графический редактор</a>, или 2) изменить размер изображения используя CSS путём установки свойства <a><code>width</code></a> для <code>&lt;img&gt;</code> меньше, чем у <a><code>&lt;body&gt;</code></a>.</p>\n</div>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Не стоит беспокоиться, если вы ещё не понимаете <code>display: block;</code> и различия между блочным/строчным. Вы поймёте, когда будете изучать CSS более подробно. Вы можете узнать больше о различных доступных значениях display на нашей странице о свойстве <a>display</a>.</p>\n</div></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Если вы следовали всем инструкциям в этой статье, вы должны получить страницу, которая выглядит примерно так (вы также можете <a class="external" target="_blank">посмотреть нашу версию здесь</a>):</p>\n<p>\n  \n</p>\n<p>Если вы застряли, вы всегда можете сравнить свою работу с нашим <a class="external" target="_blank">готовым примером кода на Github</a>.</p>\n<p>Здесь мы узнали только самую поверхность CSS. Чтобы узнать больше, перейдите на нашу <a>страницу изучения CSS</a>.</p></div></section>',
					works: [],
				},
				{
					title: 'Введение в CSS',
					chapter: 2.3,
					content:
						'<header><h1>Введение в CSS</h1></header><div class="section-content"><p>CSS (каскадные таблицы стилей) используется для стилизации и компоновки веб-страниц - например, для изменения шрифта, цвета, размера и интервала содержимого, разделения его на несколько столбцов или добавления анимации и других декоративных элементов. Этот модуль обеспечивает хорошее начало вашего пути к освоению CSS с основами того, как он работает, как выглядит синтаксис и как вы можете начать использовать его для добавления стилей в HTML.</p></div><section aria-labelledby="необходимые_условия"><h2 id="необходимые_условия"><a>Необходимые условия</a></h2><div class="section-content"><p>Перед запуском этого модуля вы должны иметь:</p>\n<ol>\n  <li>Базовое знакомство с использованием компьютеров и пассивным использованием Интернета (то есть, просматривая его, потребляя контент).</li>\n  <li>Базовая рабочая среда, описанная в разделе <a>Установка базового программного обеспечения</a>, и понимание того, как создавать файлы и управлять ими, подробно описано в разделе <a>Работа с файлами</a>.</li>\n  <li>Основное знакомство с HTML, как описано в модуле <a>Введение в HTML</a>.</li>\n</ol>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Если вы работаете на компьютере / планшете / другом устройстве, на котором у вас нет возможности создавать свои собственные файлы, вы можете опробовать (большую часть) примеры кода в онлайн-программах кодирования, таких как JSBin или Thimble.</p>\n</div></div></section><section aria-labelledby="руководства"><h2 id="руководства"><a>Руководства</a></h2><div class="section-content"><p>Этот модуль содержит следующие статьи, в которых вы ознакомитесь со всеми основными теориями CSS и сможете проверить некоторые навыки.</p>\n<dl>\n  <dt id="что_такое_css"><a>Что такое CSS?</a></dt>\n  <dd>\n    <p><strong><a>CSS</a></strong> (Каскадные таблицы стилей) позволяет создавать великолепно выглядящие веб-страницы, но как же это работает? Эта статья объясняет, что такое CSS с помощью простого примера синтаксиса, а также охватывает некоторые ключевые термины о языке.</p>\n  </dd>\n  <dt id="начало_работы_с_css"><a>Начало работы с CSS</a></dt>\n  <dd>\n    <p>В этой статье мы возьмём простой HTML-документ и применим к нему CSS, изучая некоторые практические вещи о языке.</p>\n  </dd>\n  <dt id="как_структурирован_css"><a>Как структурирован CSS</a></dt>\n  <dd>\n    <p>Теперь, когда у вас есть представление о том, что такое CSS и как его использовать, пришло время немного углубиться в структуру самого языка. Мы уже встречали множество концепций, обсуждаемых здесь; вы можете вернуться к этому, чтобы повторить, если вы находите какие-либо более поздние концепции запутанными.</p>\n  </dd>\n  <dt id="как_работает_css"><a>Как работает CSS</a></dt>\n  <dd>\n    <p>Мы изучили основы CSS — для чего он нужен и как писать простые таблицы стилей. В этом уроке мы рассмотрим, как браузер берёт CSS и HTML и превращает их в веб-страницу.</p>\n  </dd>\n  <dt id="использование_ваших_новых_знаний"><a>Использование ваших новых знаний</a></dt>\n  <dd>\n    <p>С учётом того, что вы узнали за последние несколько уроков, вы должны обнаружить, что вы можете форматировать простые текстовые документы с использованием CSS, чтобы добавить к ним свой собственный стиль. Эта статья даёт вам шанс сделать это.</p>\n  </dd>\n</dl></div></section>',
					works: [],
				},
				{
					title: 'Что такое CSS?',
					chapter: 2.4,
					content:
						'<header><h1>Что такое CSS?</h1></header><div class="section-content">\n<p><strong><a>CSS</a></strong> (Каскадные таблицы стилей) позволяет создавать великолепно выглядящие веб-страницы, но как же это работает? Эта статья объясняет, что такое CSS, с помощью простого примера синтаксиса, а также охватывает некоторые ключевые термины о языке.</p>\n\n<p>В модуле <a>Основы HTML</a> мы рассмотрели, что такое HTML и как он используется для разметки документов. Эти документы будут доступны для чтения в веб-браузере. Заголовки будут выглядеть больше, чем обычный текст, абзацы разбиваются на новую строку и будут иметь пространство между друг другом. Ссылки выделены цветом и подчёркнуты, чтобы отличить их от остального текста. То, что вы видите, — это стили браузера по умолчанию — самые основные стили, которые браузер применяет к HTML, чтобы гарантировать, что он будет в основном читабельным, даже если автор страницы не указал явный стиль.</p>\n<p>\n  \n</p>\n<p>Тем не менее, интернет был бы скучным, если бы все сайты выглядели так. Используя CSS, вы можете до мелочей контролировать, как элементы HTML выглядят в браузере, представляя вашу разметку, используя любой понравившийся вам дизайн.</p></div><section aria-labelledby="для_чего_нужен_css"><h2 id="для_чего_нужен_css"><a>Для чего нужен CSS?</a></h2><div class="section-content"><p>Как мы уже упоминали ранее, CSS — это язык для определения того, как документы представляются пользователям — как они оформляются, размещаются и т. д.</p>\n<p><strong>Документ</strong> обычно представляет собой текстовый файл, структурированный с использованием языка разметки: <a>HTML</a> — самый распространённый язык разметки, но вы также можете встретить другие языки разметки, такие как <a>SVG</a> или <a>XML</a>.</p>\n<p><strong>Представление</strong> документа пользователю означает преобразование его в форму, используемую вашей аудиторией**.** <a>Browsers</a>, такие как <a class="only-in-en-us" title="Currently only available in English (US)">Firefox <small>(en-US)</small></a>, <a class="only-in-en-us" title="Currently only available in English (US)">Chrome <small>(en-US)</small></a> или <a class="only-in-en-us" title="Currently only available in English (US)">Edge <small>(en-US)</small></a> , предназначены для визуального представления документов, например, на экране компьютера, проектора или принтера.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Браузер иногда называют <a>user agent</a>, что в основном означает компьютерную программу, которая представляет человека внутри компьютерной системы. Браузеры — это основной тип пользовательского агента, о котором мы думаем, когда говорим о CSS, но он не единственный. Доступны и другие пользовательские агенты, например, те, которые преобразуют документы HTML и CSS в файлы PDF для печати.</p>\n</div>\n<p>CSS может использоваться для очень простой стилизации текста документа, например, изменение <a>цвета</a> и <a>размера</a> заголовков и ссылок. Он может быть использован для создания макета, например, <a class="only-in-en-us" title="Currently only available in English (US)">превращение одного столбца текста в макет <small>(en-US)<small></small></small></a> с основной областью контента и боковой панелью для соответствующей информации. Это может даже использоваться для эффектов, таких как <a>анимация</a>. Посмотрите на ссылки в этом параграфе для конкретных примеров.</p></div></section><section aria-labelledby="синтаксис_css"><h2 id="синтаксис_css"><a>Синтаксис CSS</a></h2><div class="section-content"><p>CSS — это язык на основе правил: вы задаёте правила, определяющие группы стилей, которые должны применяться к определённым элементам или группам элементов на вашей веб-странице. Например:</p>\n<p>«Я хочу, чтобы основной заголовок на моей странице отображался крупным красным текстом».</p>\n<p>В следующем коде показано очень простое правило CSS, которое будет соответствовать стилю, описанному выше:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">h1 {\n  color: red;\n  font-size: 5em;\n}\n</pre></div>\n<p>Правило открывается с помощью <a>селектора</a> . Этот селектор выбирает HTML-элемент, который мы собираемся стилизовать. В этом случае мы используем заголовки первого уровня — (<a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a>).</p>\n<p>Затем у нас есть набор фигурных скобок <code>{ }</code>. Внутри них будет один или несколько <strong>объявлений</strong>, которые принимают форму пары <strong>свойства</strong> и его <strong>значения</strong>. Каждая пара указывает свойство элемента(-ов), который(-е) мы выбираем, а затем значение, которое мы хотели бы присвоить свойству.</p>\n<p>Перед двоеточием у нас есть свойство, а после двоеточия — значение. CSS-<a class="only-in-en-us" title="Currently only available in English (US)">свойства <small>(en-US)</small></a> имеют разные допустимые значения в зависимости от того, какое свойство указывается. В нашем примере мы имеем свойство <code>color</code>, которое может принимать различные <a>цветовые значения</a>. У нас также есть свойство <code>font-size</code>. Это свойство может принимать различные <a>значения размера</a>, как и свойства.</p>\n<p>Таблица стилей CSS будет содержать много таких правил, написанных одно за другим.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">h1 {\n  color: red;\n  font-size: 5em;\n}\n\np {\n  color: black;\n}\n</pre></div>\n<p>Вы обнаружите, что вы быстро изучаете некоторые значения, тогда как другие вам нужно искать. Страницы отдельных свойств в MDN дают вам быстрый способ поиска свойств и их значений, когда вы забыли или хотите узнать, что ещё вы можете использовать в качестве значения.</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> вы можете найти ссылки на все страницы свойств CSS (вместе с другими функциями CSS), перечисленные в MDN <a>Руководстве по CSS</a>. Кроме того, вы должны привыкнуть к поиску "MDN <em>css-feature-name</em>" в вашем браузере, когда вам нужно узнать больше информации о функции CSS. Например, попробуйте поискать «mdn color» и «mdn font-size»!</p>\n</div></div></section><section aria-labelledby="css-модули"><h2 id="css-модули"><a>CSS-модули</a></h2><div class="section-content"><p>Поскольку существует множество вещей, которые можно стилизовать с помощью CSS, язык разбит на модули. По мере изучения MDN вы увидите ссылки на эти модули, а многие страницы документации организованы вокруг определённого модуля. Например, вы можете взглянуть на ссылку MDN в модуле <a class="only-in-en-us" title="Currently only available in English (US)">Свойства фона и границ <small>(en-US)<small></small></small></a>, чтобы узнать, какова его цель и какие различные свойства и другие функции он содержит. Вы также найдёте ссылки на спецификацию CSS, которая определяет технологию (см. ниже).</p>\n<p>На этом этапе вам не нужно слишком беспокоиться о том, как структурирован CSS, однако это может упростить поиск информации, если, например, вы знаете, что определённое свойство может быть найдено среди других похожих вещей, и поэтому, вероятно, в той же спецификации.</p>\n<p>Для конкретного примера давайте вернёмся к модулю Свойства фона и границ — вы можете подумать, что это логично для свойств <a><code>background-color</code></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>border-color</code> <small>(en-US)<small></small></small></a>, которые будут определены в этом модуле. И Вы правы.</p></div></section><section aria-labelledby="технические_характеристики_css"><h3 id="технические_характеристики_css"><a>Технические характеристики CSS</a></h3><div class="section-content"><p>Все технологии веб-стандартов (HTML, CSS, JavaScript и т. д.) определены в гигантских документах, называемых спецификациями, которые публикуются организациями по стандартизации (такие как <a>W3C</a>, <a>WHATWG</a>, <a>ECMA</a> или <a class="only-in-en-us" title="Currently only available in English (US)">Khronos <small>(en-US)</small></a>) и определяют, как эти технологии должны вести себя.</p>\n<p>CSS ничем не отличается — он разработан группой в W3C, которая называется <a class="external" target="_blank">CSS Working Group</a>. Эта группа состоит из представителей производителей браузеров и других компаний, которые заинтересованы в CSS. Есть также другие люди, известные как приглашённые эксперты, которые выступают как независимые голоса; они не связаны с членами организации.</p>\n<p>Новые функции CSS разрабатываются или определяются рабочей группой CSS. Иногда потому, что конкретный браузер заинтересован в том, чтобы иметь какие-то возможности, иногда потому, что веб-дизайнеры и разработчики запрашивают функцию, а иногда потому, что сама рабочая группа определила требование. CSS постоянно развивается, появляются новые функции. Тем не менее, ключевым моментом в CSS является то, что все работают очень усердно, чтобы никогда не менять вещи таким образом, чтобы это сломало старые сайты. Веб-сайт, созданный в 2000 году, с использованием ограниченного CSS, доступного в то время, должен всё ещё использоваться в браузере сегодня!</p>\n<p>Как новичок в CSS, вполне вероятно, что вы найдёте CSS-спецификации ошеломляющими — они предназначены для инженеров, чтобы использовать их для реализации поддержки функций в пользовательских агентах, а не для веб-разработчиков, чтобы читать, чтобы понимать CSS. Многие опытные разработчики предпочитают обращаться к документации MDN или другим учебникам. Однако стоит знать, что они существуют, понимать взаимосвязь между используемым CSS, поддержкой браузера (см. ниже) и спецификациями.</p></div></section><section aria-labelledby="информация_о_совместимости_с_браузерами"><h2 id="информация_о_совместимости_с_браузерами"><a>Информация о совместимости с браузерами</a></h2><div class="section-content"><p>После того как CSS был указан, он будет полезен для разработки веб-страниц, только если один или несколько браузеров его реализовали. Это означает, что код был написан для превращения инструкции в нашем CSS-файле во что-то, что может быть выведено на экран. Мы рассмотрим этот процесс подробнее на уроке <a>Как работает CSS</a><a>.</a> Это необычно для всех браузеров, чтобы реализовать функцию одновременно, и поэтому обычно есть пробел, где вы можете использовать некоторую часть CSS в одних браузерах, а не в других. По этой причине полезно проверять состояние реализации. На каждой странице свойств в MDN вы можете видеть статус интересующего вас свойства, чтобы вы могли определить, сможете ли вы использовать её на веб-сайте.</p></div></section><section aria-labelledby="что_дальше"><h2 id="что_дальше"><a>Что дальше?</a></h2><div class="section-content"><p>Теперь, когда у вас есть некоторое представление о том, что такое CSS, давайте перейдём к <a>Началу работы с CSS</a>, где вы можете начать писать CSS самостоятельно.</p></div></section>',
					works: [],
				},
				{
					title: 'Начало работы с CSS',
					chapter: 2.5,
					content:
						'<header><h1>Начало работы с CSS</h1></header><div class="section-content">\n<p>В этой статье мы возьмём простой HTML-документ и применим к нему CSS, изучая некоторые практические вещи о языке.</p>\n</div><section aria-labelledby="начнём_с_html"><h2 id="начнём_с_html"><a>Начнём с HTML</a></h2><div class="section-content"><p>Нашей отправной точкой является HTML-документ. Вы можете скопировать код снизу, если вы хотите работать на своём компьютере. Сохраните приведённый ниже код как <code>index.html</code> в папке на вашем компьютере.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n\n  \n    <meta charset="utf-8">\n    <title>Начало работы с CSS</title>\n  \n\n  \n    <h1>Я заголовок первого уровня</h1>\n\n    <p>\n      Это абзац. В нём есть <span>элемент span</span>, а также\n      <a href="http://example.com">ссылка</a>.\n    </p>\n\n    <p>Это второй абзац. Он содержит <em>акцентирующий</em> текст.</p>\n\n    <ul>\n      <li>Элемент один</li>\n      <li>Элемент два</li>\n      <li>Элемент <em>три</em></li>\n    </ul>\n  \n\n</pre></div>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Если вы читаете это на устройстве или в среде, где вы не можете легко создавать файлы, не беспокойтесь — ниже представлены редакторы кода, чтобы вы могли написать код прямо здесь, на странице.</p>\n</div></div></section><section aria-labelledby="добавление_css_в_наш_документ"><h2 id="добавление_css_в_наш_документ"><a>Добавление CSS в наш документ</a></h2><div class="section-content"><p>Самое первое, что нам нужно сделать, — это сообщить HTML-документу, что у нас есть некоторые правила CSS, которые мы хотим использовать. Существует три различных способа применения CSS к документу HTML, с которым вы обычно сталкиваетесь, однако сейчас мы рассмотрим наиболее обычный и полезный способ сделать это — связать CSS с заголовком вашего документа.</p>\n<p>Создайте файл в той же папке, что и документ HTML, и сохраните его как <code>styles.css</code>. Расширение .css показывает, что это файл CSS.</p>\n<p>Чтобы связать styles.css с index.html, добавьте следующую строку где-то внутри<a><code>&lt;head&gt;</code></a> HTML документа:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><link rel="stylesheet" href="styles.css">\n</pre></div>\n<p>Элемент <a><code>&lt;link&gt;</code></a> сообщает браузеру, что у нас есть таблица стилей, используя атрибут <em>rel</em>, и местоположение этой таблицы стилей в качестве значения атрибута <em>href.</em> вы можете проверить, работает ли CSS, добавив правило в <em>styles.css</em>. Используя ваш редактор кода, добавьте следующее в ваш файл CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">h1 {\n  color: red;\n}\n</pre></div>\n<p>Сохраните файлы HTML и CSS и перезагрузите страницу в веб-браузере. Заголовок первого уровня в верхней части документа теперь должен быть красным. Если это произойдёт, поздравляю — вы успешно применили CSS к документу HTML. Если этого не произойдёт, внимательно проверьте, правильно ли вы ввели всё.</p>\n<p>Вы можете продолжить работу в <code>styles.css</code> локально, или вы можете использовать наш интерактивный редактор ниже, чтобы продолжить этот урок. Интерактивный редактор действует так, как если бы CSS на первой панели был связан с документом HTML, как это было в нашем документе выше.</p></div></section><section aria-labelledby="стилизация_html-элементов"><h2 id="стилизация_html-элементов"><a>Стилизация HTML-элементов</a></h2><div class="section-content"><p>Делая наш заголовок красным, мы уже продемонстрировали, что можем нацеливать и стилизовать элемент HTML. Мы делаем это путём нацеливания на элемент <em>selector</em> — это селектор, который напрямую соответствует имени элемента HTML. Чтобы нацелиться на все абзацы в документе, вы должны использовать селектор <code>p</code>. Чтобы сделать все абзацы зелёными, вы должны использовать:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p {\n  color: green;\n}\n</pre></div>\n<p>Вы можете выбрать несколько селекторов одновременно, разделив их запятыми. Если я хочу, чтобы все параграфы и все элементы списка были зелёными, моё правило выглядит так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p,\nli {\n  color: green;\n}\n</pre></div>\n<p>Попробуйте это в интерактивном редакторе ниже (отредактируйте поля кода) или в своём локальном документе CSS.</p></div></section><section aria-labelledby="изменение_поведения_элементов_по_умолчанию"><h2 id="изменение_поведения_элементов_по_умолчанию"><a>Изменение поведения элементов по умолчанию</a></h2><div class="section-content"><p>Когда мы смотрим на хорошо размеченный HTML-документ, даже такой простой, как наш пример, мы можем увидеть, как браузер делает HTML читаемым, добавив некоторые стили по умолчанию. Заголовки большие и жирные, в нашем списке есть маркеры. Это происходит потому, что в браузерах есть внутренние таблицы стилей, содержащие стили по умолчанию, которые по умолчанию применяются ко всем страницам; без них весь текст работал бы вместе, и мы должны были бы стилизовать всё с нуля. Все современные браузеры по умолчанию отображают HTML-контент практически одинаково.</p>\n<p>Однако вам часто захочется что-то другое, кроме выбора, сделанного браузером. Это можно сделать, просто выбрав элемент HTML, который вы хотите изменить, и используя правило CSS, чтобы изменить его внешний вид. Хорошим примером является наш <code>&lt;ul&gt;</code> — неупорядоченный список. Он добавляет маркеры, и если я решу, что я не хочу эти маркеры, я могу удалить их вот так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">li {\n  list-style-type: none;\n}\n</pre></div>\n<p>Попробуйте добавить это в свой CSS сейчас.</p>\n<p>Свойство <code>list-style-type</code> — это хорошее свойство, информацию о котором можно найти на MDN, чтобы увидеть, какие значения поддерживаются. Взгляните на страницу для <a class="only-in-en-us" title="Currently only available in English (US)"><code>list-style-type</code> <small>(en-US)<small></small></small></a> и вы найдёте интерактивный пример в верхней части страницы, чтобы опробовать некоторые другие значения, затем все допустимые значения будут подробно описаны ниже.</p>\n<p>Глядя на эту страницу, вы обнаружите, что помимо удаления маркеров списка вы можете изменить их — попробуйте изменить их на квадратные маркеры, используя значение <code>square</code>.</p></div></section><section aria-labelledby="добавление_класса"><h2 id="добавление_класса"><a>Добавление класса</a></h2><div class="section-content"><p>Пока у нас есть стилизованные элементы, основанные на их именах HTML-элементов. Это работает до тех пор, пока вы хотите, чтобы все элементы этого типа в вашем документе выглядели одинаково. В большинстве случаев это не так, и вам нужно будет найти способ выбрать подмножество элементов, не меняя остальные. Самый распространённый способ сделать это — добавить класс к вашему HTML-элементу и нацелиться на этот класс.</p>\n<p>В своём HTML-документе добавьте Атрибут <a>class</a> ко второму пункту списка. Ваш список теперь будет выглядеть так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><ul>\n  <li>Элемент один</li>\n  <li class="special">Элемент два</li>\n  <li>Элемент <em>три</em></li>\n</ul>\n</pre></div>\n<p>В вашем CSS вы можете выбрать класс <code>special</code> к любому элементу на странице, чтобы он выглядел так же, как и этот элемент списка. Добавьте следующее в ваш файл CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.special {\n  color: orange;\n  font-weight: bold;\n}\n</pre></div>\n<p>Сохраните и обновите, чтобы увидеть результат.</p>\n<p>Вы можете захотеть, чтобы &lt;span&gt; в абзаце также был оранжевым и жирным. Попробуйте добавить класс "<code>special"</code>, затем перезагрузите страницу и посмотрите, что получится.</p>\n<p>Иногда вы увидите правила с селектором, который перечисляет селектор HTML-элемента вместе с классом:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">li.special {\n  color: orange;\n  font-weight: bold;\n}\n</pre></div>\n<p>Этот синтаксис означает «предназначаться для любого элемента li, который имеет класс special». Если бы вы сделали это, вы бы больше не смогли применить класс к <code>&lt;span&gt;</code> или другому элементу, просто добавив к нему класс; вы должны добавить этот элемент в список селекторов:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">li.special,\nspan.special {\n  color: orange;\n  font-weight: bold;\n}\n</pre></div>\n<p>Как вы можете себе представить, некоторые классы могут быть применены ко многим элементам, и вам не нужно постоянно редактировать свой CSS каждый раз, когда что-то новое должно принять этот стиль. Поэтому иногда лучше обойти элемент и просто обратиться к классу, если только вы не знаете, что хотите создать некоторые специальные правила для одного элемента и, возможно, хотите убедиться, что они не применяются к другим элементам.</p></div></section><section aria-labelledby="стилизация_элементов_на_основе_их_расположения_в_документе"><h2 id="стилизация_элементов_на_основе_их_расположения_в_документе"><a>Стилизация элементов на основе их расположения в документе</a></h2><div class="section-content"><p>Есть моменты, когда вы хотите, чтобы что-то выглядело иначе, в зависимости от того, где оно находится в документе. Здесь есть несколько селекторов, которые могут вам помочь, но сейчас мы рассмотрим только пару. В нашем документе два элемента <code>&lt;em&gt;</code> — один внутри абзаца, а другой внутри элемента списка. Чтобы выбрать только <code>&lt;em&gt;</code> который вложен в элемент <code>&lt;li&gt;</code>, я могу использовать селектор под названием <strong>descendant combinator (комбинатор-потомок)</strong>, который просто принимает форму пробела между двумя другими селекторами.</p>\n<p>Добавьте следующее правило в таблицу стилей.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">li em {\n  color: rebeccapurple;\n}\n</pre></div>\n<p>Этот селектор выберет любой элемент <code>&lt;em&gt;</code>, который находится внутри (потомка) <code>&lt;li&gt;</code>. Итак, в вашем примере документа вы должны найти, что <code>&lt;em&gt;</code> в третьем элементе списка теперь фиолетовый, но тот, который находится внутри абзаца, не изменился.</p>\n<p>Ещё можно попробовать стилизовать абзац, когда он идёт сразу после заголовка на том же уровне иерархии в HTML. Для этого поместите <code>+</code> (<strong>соседний братский комбинатор</strong>) между селекторами.</p>\n<p>Попробуйте также добавить это правило в таблицу стилей:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">h1 + p {\n  font-size: 200%;\n}\n</pre></div>\n<p>Пример ниже включает в себя два правила выше. Попробуйте добавить правило, чтобы сделать элемент span красный, если он внутри абзаца. Вы узнаете, правильно ли вы это сделали, так как промежуток в первом абзаце будет красным, но цвет в первом элементе списка не изменит цвет.</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Как вы можете видеть, CSS даёт нам несколько способов нацеливания на элементы, и мы пока только слегка изучили его! Мы будем внимательно смотреть на все эти селекторы и многое другое в нашей статье <a>Селекторы</a> позже в нашем курсе.</p>\n</div></div></section><section aria-labelledby="стилизация_элементов_на_основе_состояния"><h2 id="стилизация_элементов_на_основе_состояния"><a>Стилизация элементов на основе состояния</a></h2><div class="section-content"><p>Последний тип стилей, который мы рассмотрим в этом уроке, — это возможность стилизовать элементы в зависимости от их состояния. Прямым примером этого является стиль ссылок. Когда мы создаём ссылку, мы должны нацелить элемент <a><code>&lt;a&gt;</code></a> (якорь). Он имеет различные состояния в зависимости от того, посещается ли он, посещается, находится над ним, фокусируется с помощью клавиатуры или в процессе нажатия (активации). Вы можете использовать CSS для нацеливания на эти разные состояния — CSS-код ниже отображает невидимые ссылки розового цвета и посещённые ссылки зелёного цвета.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">a:link {\n  color: pink;\n}\n\na:visited {\n  color: green;\n}\n</pre></div>\n<p>Вы можете изменить внешний вид ссылки, когда пользователь наводит на неё курсор, например, удалив подчёркивание, что достигается с помощью следующего правила:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">a:hover {\n  text-decoration: none;\n}\n</pre></div>\n<p>В приведённом ниже примере вы можете поиграть с разными значениями для разных состояний ссылки. Я добавил к нему правила, приведённые выше, и теперь понимаю, что розовый цвет довольно лёгкий и трудно читаемый — почему бы не изменить его на лучший цвет? Можете ли вы сделать ссылки жирным шрифтом?</p>\n<p>Мы удалили подчёркивание на нашей ссылке при наведении курсора. Вы можете удалить подчёркивание из всех состояний ссылки. Однако стоит помнить, что на реальном сайте вы хотите, чтобы посетители знали, что ссылка является ссылкой. Оставив подчёркивание на месте, люди могут понять, что на какой-то текст внутри абзаца можно нажимать — к такому поведению они привыкли. Как и всё в CSS, существует возможность сделать документ менее доступным с вашими изменениями — мы постараемся выделить потенциальные подводные камни в соответствующих местах.</p>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> вы часто будете видеть упоминание о <a>доступности</a> в этих уроках и по всей MDN. Когда мы говорим о доступности, мы имеем в виду требование, чтобы наши веб-страницы были понятными и доступными для всех.</p>\n  <p>Ваш посетитель вполне может быть на компьютере с мышью или сенсорной панелью или на телефоне с сенсорным экраном. Либо они могут использовать программу чтения с экрана, которая считывает содержимое документа, либо им может потребоваться использовать текст значительно большего размера, либо перемещаться по сайту только с помощью клавиатуры.</p>\n  <p>Простой HTML-документ, как правило, доступен каждому — когда вы начинаете оформлять этот документ, важно, чтобы вы не сделали его менее доступным.</p>\n</div></div></section><section aria-labelledby="сочетание_селекторов_и_комбинаторов"><h2 id="сочетание_селекторов_и_комбинаторов"><a>Сочетание селекторов и комбинаторов</a></h2><div class="section-content"><p>Стоит отметить, что вы можете комбинировать несколько селекторов и комбинаторов вместе. Вот пример:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">/* выбирает любой <span> внутри <p>, который находится внутри </p><article>  */\narticle p span { ... }\n\n/* выбирает любой <p>, который идёт сразу после </p><ul>, который идёт сразу после <h1>  */\nh1 + ul + p { ... }\n</h1></ul></article></span></pre></div>\n<p>Вы также можете комбинировать несколько типов вместе. Попробуйте добавить следующее в ваш код:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">body h1 + p .special {\n  color: yellow;\n  background-color: black;\n  padding: 5px;\n}\n</pre></div>\n<p>Это будет стиль любого элемента с классом <code>special</code>, который находится внутри <code>&lt;p&gt;</code>, который приходит сразу после <code>&lt;h1&gt;</code>, который находится внутри <code>&lt;body&gt;</code>. Уф!</p>\n<p>В оригинальном HTML, который мы предоставили, единственный элемент в стиле <code>&lt;span class="special"&gt;</code>.</p>\n<p>Не беспокойтесь, если это покажется сложным — вы скоро начнёте понимать это, когда будете писать больше на CSS.</p></div></section><section aria-labelledby="завершение"><h2 id="завершение"><a>Завершение</a></h2><div class="section-content"><p>В этом уроке мы рассмотрели несколько способов стилизации документа с использованием CSS. Мы будем развивать эти знания по мере прохождения остальных уроков. Однако вы уже знаете достаточно, чтобы стилизовать текст, применять CSS на основе различных способов нацеливания на элементы в документе и искать свойства и значения в документации MDN.</p>\n<p>На следующем уроке мы рассмотрим структуру CSS.</p></div></section>',
					works: [],
				},
				{
					title: 'Как структурирован CSS',
					chapter: 2.6,
					content:
						'<header><h1>Как структурирован CSS</h1></header><div class="section-content">\n<p>Теперь, когда у вас есть представление о том, чем является CSS, и о его основах, настало время посмотреть немного глубже в структуру самого языка. Нам уже встречались многие из обсуждаемых здесь концепций; вы можете вернуться к этому, чтобы разобраться, если вы обнаружите какие-либо более поздние концепции запутанными.</p>\n</div><section aria-labelledby="применение_css_к_вашему_html"><h2 id="применение_css_к_вашему_html"><a>Применение CSS к вашему HTML</a></h2><div class="section-content"><p>Первое, что мы рассмотрим, это три метода применения CSS к документу.</p></div></section><section aria-labelledby="внешняя_таблица_стилей"><h3 id="внешняя_таблица_стилей"><a>Внешняя таблица стилей</a></h3><div class="section-content"><p>В статье <a>Начало работы с CSS</a> мы связывали внешнюю таблицу стилей с нашей страницей. Это самый распространённый и полезный способ крепления CSS к документу, так вы можете привязать CSS сразу к нескольким страницам, что позволяет стилизовать их всё с той же таблицей стилей. В большинстве случаев различные страницы сайта будут выглядеть почти так же, поэтому вы можете использовать один и тот же набор правил для основного вида.</p>\n<p>Внешняя таблица стилей - это когда у вас есть CSS отдельным файлом с расширением <code>.css</code>, и ссылка на него из HTML-элемента <code>&lt;link&gt;</code>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n\n  \n    <meta charset="utf-8">\n    <title>Я пробую писать CSS</title>\n    <link rel="stylesheet" href="styles.css">\n  \n  \n    <h1>Привет!</h1>\n    <p>Это мой первый опыт в CSS</p>\n  \n\n</pre></div>\n<p>Файл CSS может выглядеть следующим образом:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">h1 {\n  color: blue;\n  background-color: yellow;\n  border: 1px solid black;\n}\n\np {\n  color: red;\n}\n</pre></div>\n<p>Атрибут <code>href</code> элемента <a><code>&lt;link&gt;</code></a> должен ссылаться на файл в файловой системе.</p>\n<p>В приведённом выше примере файл CSS находится в той же папке, что и HTML-документ, но вы можете поместить его куда-нибудь ещё и настроить относительный путь, например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><!-- Файл находится внутри под-директории styles, находящейся в текущей директории -->\n<link rel="stylesheet" href="styles/style.css">\n\n<!-- Файл — внутри под-директории styles внутри под-под-директории general и так далее -->\n<link rel="stylesheet" href="styles/general/style.css">\n\n<!-- Вверх на один уровень в директории, затем направиться в под-директорию styles -->\n<link rel="stylesheet" href="../styles/style.css">\n</pre></div></div></section><section aria-labelledby="внутренняя_таблица_стилей"><h3 id="внутренняя_таблица_стилей"><a>Внутренняя таблица стилей</a></h3><div class="section-content"><p>Внутренняя таблица стилей, где у вас нет внешнего файла CSS, но вместо этого CSS помещён внутри элемента <a><code>&lt;style&gt;</code></a>, содержащейся внутри HTML <a><code>&lt;head&gt;</code></a>.</p>\n<p>Таким образом, HTML будет выглядеть вот так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n\n  \n    <meta charset="utf-8">\n    <title>Я пробую писать CSS</title>\n    <style>\n      h1 {\n        color: blue;\n        background-color: yellow;\n        border: 1px solid black;\n      }\n\n      p {\n        color: red;\n      }\n    </style>\n  \n  \n    <h1>Привет!</h1>\n    <p>Это мой первый опыт в CSS</p>\n  \n\n</pre></div>\n<p>Это может быть полезно в некоторых обстоятельствах (возможно, вы работаете с системой управления контентом, где вы не можете изменить CSS-файлы непосредственно), но это менее эффективно, чем внешние таблицы стилей: CSS будет необходимо прописывать отдельно для каждой страницы и изменять, если требуются изменения.</p></div></section><section aria-labelledby="встроенные_стили"><h3 id="встроенные_стили"><a>Встроенные стили</a></h3><div class="section-content"><p>Встроенные стили являются правилами CSS, которые влияют только на один элемент, содержащиеся в атрибуте <code>style</code>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n\n  \n    <meta charset="utf-8">\n    <title>Я пробую писать CSS</title>\n  \n  \n    <h1 style="color: blue;background-color: yellow;border: 1px solid black;">\n      Привет!\n    </h1>\n    <p style="color:red;">Это мой первый опыт в CSS</p>\n  \n\n</pre></div>\n<p><strong>Пожалуйста, не делайте этого!</strong> Это очень плохо для технического обслуживания (вам, возможно, придётся обновить одну и ту же информацию несколько раз в одном документе), а также смешивает ваши презентационные данные CSS с структурной информацией HTML, что делает код трудным для чтения и понимания. Хранение различных типов кода отделено делает работу гораздо более лёгкой для всех, кто работает над кодом.</p>\n<p>Есть несколько мест, где встроенные стили являются более распространёнными или даже желательными. Вам, возможно, придётся прибегнуть к использованию их, если ваша рабочая среда сильно ограничена (возможно, ваша CMS позволяет редактировать только HTML-тело). Вы также увидите, как они использовали много в HTML электронной почте, чтобы получить совместимость с таким количеством почтовых клиентов, со скольким это возможно.</p></div></section><section aria-labelledby="игра_с_css_в_этой_статье"><h2 id="игра_с_css_в_этой_статье"><a>Игра с CSS в этой статье</a></h2><div class="section-content"><p>Существует много возможностей, чтобы поиграть с CSS в этой статье. Для этого мы рекомендуем создать новый каталог / папку на вашем компьютере и внутри него создать копии следующих двух файлов:</p>\n<p>index.html:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n\n  \n    <meta charset="utf-8">\n    <title>Я пробую писать CSS</title>\n    <link rel="stylesheet" href="styles.css">\n  \n  \n    <p>Пишите сюда свой код</p>\n  \n\n</pre></div>\n<p>styles.css:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">/* Пишите сюда свой код */\n\np {\n  color: red;\n}\n</pre></div>\n<p>Затем, когда вы столкнётесь с CSS и захотите поэкспериментировать со стилями, измените содержимое <code>&lt;body&gt;</code> HTML-документа и начинайте добавлять CSS-стили внутри вашего файла CSS.</p>\n<p>Если вы не используете систему, в которой вы можете легко создавать файлы, вы можете вместо этого использовать интерактивный редактор ниже чтобы экспериментировать.</p>\n<p>Читайте дальше и получайте удовольствие!</p></div></section><section aria-labelledby="селекторы"><h2 id="селекторы"><a>Селекторы</a></h2><div class="section-content"><p>Говоря о CSS, нельзя не упомянуть о селекторах, о некоторых типах которых мы уже говорили в руководстве <a>Начало работы с CSS</a>. Селектор — это то, как мы обозначаем что-либо в нашем HTML-документе, чтобы стилизовать его. Если стиль не применился, то это, скорее всего, потому, что селектор в таблицах стилей не совпал с тем, что в HTML-документе.</p>\n<p>Каждое CSS-правило начинается с одного или нескольких селекторов, отделяемых друг от друга запятыми, чтобы дать понять браузеру, к чему применять стили. В следующем примере перечислены стандартные селекторы:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">h1  /* это селектор тегов */\na:link  /* это селектор ссылок */\n.manythings  /* это селектор классов (классы применяются тогда, когда необходимо применить правило к нескольким элементам) */\n#onething  /* это селектор идентификаторов (они применяются, когда правило относится к одному элементу) */\n*  /* универсальный селектор */\n.box p  /* селектор потомков */\n.box p:first-child  /* селектор потомков + селектор псевдоклассов */\nh1, h2, .intro  /* перечисление селекторов */\n</pre></div>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> вы узнаете больше о селекторах в руководстве <a>CSS-селекторы</a> в следующем модуле.</p>\n</div></div></section><section aria-labelledby="спецификация"><h3 id="спецификация"><a>Спецификация</a></h3><div class="section-content"><p>Иногда может случаться такое, что два селектора будут относиться к одному и тому же элементу HTML. Смотрите: в примере ниже я задал правило для элемента <code>p</code> — он будет синим; также я задал класс, который сделает элемент красным:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.special {\n  color: red;\n}\n\np {\n  color: blue;\n}\n</pre></div>\n<p>А теперь допустим, что в нашем HTML-коде у нас есть абзац <code>p</code> с классом <code>special</code>. Оба правила могут быть добавлены: так какое же одержит верх? Как вы думаете, какого цвета будет надпись?</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p class="special">Какого же я цвета?</p>\n</pre></div>\n<p>В языке CSS есть правила, которые определяют, какое правило "выиграет" в случае подобного столкновения — они называются <strong>каскадами</strong>, или <strong>спецификациями</strong>. В примере ниже мы задали два правила для селектора <code>p</code>, но в итоге текст будет синим: объявление, делающее надпись синей, появилось позже того, которое делает её красной. Это каскад в действии.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p {\n  color: red;\n}\n\np {\n  color: blue;\n}\n</pre></div>\n<p>А в примере с селектором класса и селектором тега победит селектор класса — даже если он объявлен раньше.</p>\n<p><strong>Попрактикуйтесь сами — добавьте два правила для параграфа <code>p { ... }</code> в вашу таблицу стилей. Затем добавьте класс к одному элементу <code>p</code> и попробуйте применить к нему какой-нибудь стиль.</strong></p>\n<p>Понимание каскадов, или правил, улучшается с практикой. В статье <a>Каскад и наследование</a> я хорошенько объясню, как определить уровень спецификации. А пока что запомните, что иногда CSS не применяется так, как вы того хотели бы, так как у чего-то в таблице стилей больший уровень спецификации.</p></div></section><section aria-labelledby="свойства_и_значения"><h2 id="свойства_и_значения"><a>Свойства и значения</a></h2><div class="section-content"><p>Если говорить в общем, CSS строится на двух его составляющих:</p>\n<dl>\n  <dt id="свойства"><a><strong>Свойства</strong></a></dt>\n  <dd>\n    <p>Определяют, какую характеристику вы желаете изменить (например, <a><code>font-size</code></a>, <a><code>width</code></a>, <a><code>background-color</code></a>).</p>\n  </dd>\n  <dt id="значения"><a>Значения</a></dt>\n  <dd>\n    <p>Это величина свойства, определяющая, как и/или насколько вы желаете изменить свойство.</p>\n  </dd>\n</dl>\n<p>На изображении внизу выделены свойство и его значение. Здесь свойство — <code>color</code>, а его значение — <code>blue</code>.</p>\n<p>\n  \n</p>\n<p>Свойство вкупе со значением называется <em>CSS-объявлением</em>. CSS-объявления помещаются внутри <em>блока объявлений CSS</em>. Ниже показан наш CSS-код с выделенным блоком объявлений.</p>\n<p>\n  \n</p>\n<p>Наконец блок объявлений воссоединяется с <em>селекторами</em>, образуя <em>CSS-правила</em>. Наше изображение содержит два правила — одно для селектора <code>h1</code>, другое для селектора <code>p</code>. Правило для <code>h1</code> выделено.</p>\n<p>\n  \n</p>\n<p>Установление значений для CSS-свойств — вот суть языка CSS. Движок CSS определяет, какие объявления применять к каждому элементу на странице, чтобы соответствующим образом размещать и стилизовать его. Необходимо запомнить, что и свойства, и значения чувствительны к регистру. Пара свойство–значение разделяется двоеточием (<code>:</code>).</p>\n<p><strong>Попробуйте подобрать нужные значения к следующим свойствам, а свойства добавить в ваш код:</strong></p>\n<ul>\n  <li><strong><a><code>font-size</code></a></strong></li>\n  <li><strong><a><code>width</code></a></strong></li>\n  <li><strong><a><code>background-color</code></a></strong></li>\n  <li><strong><a class="only-in-en-us" title="Currently only available in English (US)"><code>color</code> <small>(en-US)</small></a></strong></li>\n  <li><strong><a><code>border</code></a></strong></li>\n</ul>\n<div class="notecard warning" id="sect2">\n  <p><strong>Предупреждение:</strong> <strong>Важно</strong>: Если свойство или значение не определено, то объявление считается <em>недействительным</em> — и будет попросту проигнорировано.</p>\n</div>\n<div class="notecard warning" id="sect3">\n  <p><strong>Предупреждение:</strong> <strong>Важно</strong>: В CSS (и прочих веб-стандартах) американское написание является стандартом. Например, <code>color</code> надо <em>всегда</em> писать <code>color</code>; британский вариант <code>colour</code> не будет работать.</p>\n</div></div></section><section aria-labelledby="функции"><h3 id="функции"><a>Функции</a></h3><div class="section-content"><p>Чаще всего в качестве значений выступают ключевые слова или числа. Но некоторые значения могут быть функциями.</p>\n<h4 id="функция_calc">Функция calc()</h4>\n<p>Напрмер, рассмотрим функцию <code>calc()</code>, с попомщью которой можно выполнять простые математические операции в CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="outer">\n  <div class="box">Ширина внутреннего контейнера равна 90% - 30px.</div>\n</div>\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.outer {\n  border: 5px solid black;\n}\n\n.box {\n  padding: 10px;\n  width: calc(90% - 30px);\n  background-color: rebeccapurple;\n  color: white;\n}\n</pre></div>\n<p>Этот код отобразит следующий результат:</p><div class="code-example" id="sect4"><div class="example-header" id="sect5"></div></div>\n<p>Вызов функции состоит из имени функции, круглых скобок и значения внутри них. В приведённом выше примере с помощью функции <code>calc()</code> устанавливается ширина контейнера равная 90% от ширины родтиельского блока минус 30 пикселей. Результат такого расчёта нельзя вычислить заранее и ввести как статическое значение.</p>\n<h4 id="функции_трансформации">Функции трансформации</h4>\n<p>Другим примером могут служить различные <a><code>функции трансформации</code></a>, такие как <code>rotate()</code>.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="box"></div>\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.box {\n  margin: 30px;\n  width: 100px;\n  height: 100px;\n  background-color: rebeccapurple;\n  transform: rotate(0.8turn);\n}\n</pre></div>\n<p>Результат приведённого выше кода будет таким:</p><div class="code-example" id="sect6"><div class="example-header" id="sect7"></div></div>\n<p><strong>Найдите различные значения свойств, перечисленных ниже. Напишите правила CSS, которые применяют стили к различным элементам HTML:</strong></p>\n<ul>\n  <li><strong><a><code>transform</code></a></strong></li>\n  <li><strong><a><code>background-image</code></a>, в том числе значения градиента</strong></li>\n  <li><strong><a class="only-in-en-us" title="Currently only available in English (US)"><code>color</code> <small>(en-US)</small></a>, в том числе значения rgb и hsl</strong></li>\n</ul></div></section><section aria-labelledby="правила"><h2 id="правила"><a>Правила</a></h2><div class="section-content"><p>До сих пор не сталкивались мы с правилами <a><code>@rules</code></a> (произносится как <em>эт-рулс</em>, от английского "at-rules"). Это особые правила, дающие CSS инструкции, как вести себя. У некоторых правил <code>@rules</code> простые названия и значения. Чтобы, к примеру, импортировать ещё одну таблицу стилей в основной CSS-файл, нужно использовать <code>@import</code>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">@import "styles2.css";\n</pre></div>\n<p>Чаще других встречается <code>@rules</code> под названием <code>@media</code>: оно позволяет вам использовать <a>медиавыражения</a>, чтобы применять CSS в определённых случаях, только если выполняются те или иные условия (например, при изменении размеров окна или при просмотре сайта с иного типа устройства).</p>\n<p>Ниже у нас CSS-файл, в котором значение заднего фона элемента <code>&lt;body&gt;</code> равно <code>pink</code>. Однако после мы добавили правило <code>@media</code>, которое делает задний фон элемента синим, при условии если ширина окна не менее 30em.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">body {\n  background-color: pink;\n}\n\n@media (min-width: 30em) {\n  body {\n    background-color: blue;\n  }\n}\n</pre></div>\n<p>Вы столкнётесь и с другими правилами <code>@rules</code> в продолжение следующих уроков.</p>\n<p><strong>Добавьте правило, которое изменяет стиль элемента, основываясь на ширине окна. Измените ширину окна, чтобы увидеть результат.</strong></p></div></section><section aria-labelledby="стенография"><h2 id="стенография"><a>Стенография</a></h2><div class="section-content"><p>Некоторые свойства вроде <a><code>font</code></a>, <a><code>background</code></a>, <a><code>padding</code></a>, <a><code>border</code></a> и <a><code>margin</code></a> называются <em>стенографическими свойствами</em>, — они позволяют установить несколько значений свойств в одной строке, ускоряя запись и делая её аккуратной.</p>\n<p>К примеру, это строка (комментарий не в счёт):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">/* В четырёхзначных стенографиях наподобие padding и margin значения добавляются\n   в порядке верх–право–низ–лево (по часовой стрелке сверху). В трёхзначных стенограммах\n   значения добавляются в порядке верх(низ)–право–лево.\n   В двузначных стенограммах значения добавляются\n   от верхнего/нижнего края к левому/правому краю */\npadding: 10px 15px 15px 5px;\n</pre></div>\n<p>делает то же самое, что и эти четыре, вместе взятые:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">padding-top: 10px;\npadding-right: 15px;\npadding-bottom: 15px;\npadding-left: 5px;\n</pre></div>\n<p>или эти:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="cpp">padding-block-start: 10px\npadding-inline-end: 15px;\npadding-block-end: 15px;\npadding-inline-start: 5px;\n</pre></div>\n<p>в то время как строка:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">background: red url(bg-graphic.png) 10px 10px repeat-x fixed;\n</pre></div>\n<p>делает то же, что и эти строки:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">background-color: red;\nbackground-image: url(bg-graphic.png);\nbackground-position: 10px 10px;\nbackground-repeat: repeat-x;\nbackground-scroll: fixed;\n</pre></div>\n<p>Мы не будем проходить это сейчас — вы можете найти эти и многие другие стенографии в <a>Руководстве по CSS</a>.</p>\n<p><strong>Добавьте вышеупомянутые объявления в ваш код. Попробуйте изменить значения и посмотреть на результат.</strong></p>\n<div class="notecard warning" id="sect8">\n  <p><strong>Предупреждение:</strong> <strong>Осторожно</strong>: Стенографии позволяют пропускать некоторые величины, и это может отразиться на результате недолжным образом.</p>\n</div></div></section><section aria-labelledby="комментарии"><h2 id="комментарии"><a>Комментарии</a></h2><div class="section-content"><p>Как и в HTML, вы можете делать комментарии, чтобы прояснить тот или иной отрывок кода.</p>\n<p>Комментарии в CSS начинаются с <code>/*</code> и окачиваются с <code>*/</code>. В примере ниже я отметил комментариями различные разделы кода. Это очень полезно для навигации — комментарии легче искать.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">/* Работаю над основными элементами */\n/* -------------------------------------------------------------------------------------------- */\nbody {\n  font:\n    1em/150% Helvetica,\n    Arial,\n    sans-serif;\n  padding: 1em;\n  margin: 0 auto;\n  max-width: 33em;\n}\n\n@media (min-width: 70em) {\n  /* Позволяет определить размер шрифта. На широких экранах\n     больше размер шрифта для удобства чтения */\n  body {\n    font-size: 130%;\n  }\n}\n\nh1 {\n  font-size: 1.5em;\n}\n\n/* Работаю над элементами, вложенными в DOM  */\n/* -------------------------------------------------------------------------------------------- */\ndiv p,\n#id:first-line {\n  background-color: red;\n  background-style: none;\n}\n\ndiv p {\n  margin: 0;\n  padding: 1em;\n}\n\ndiv p + p {\n  padding-top: 0;\n}\n</pre></div>\n<p>Отделяя комментариями участки кода, не нуждающиеся в проверке, вы можете выискивать ошибку (если такая есть). Ниже я отделил правило для селектора <code>.special</code>.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">/*.special {\n  color: red;\n}*/\n\np {\n  color: blue;\n}\n</pre></div>\n<p><strong>Добавьте комментарии в ваш CSS-код, чтобы приноровиться к ним.</strong></p></div></section><section aria-labelledby="отступы"><h2 id="отступы"><a>Отступы</a></h2><div class="section-content"><p>Под отступами подразумеваются пробелы, табуляция и перенос на новую строку. Как и в HTML, браузер будет стараться игнорировать большие отступы в CSS-коде; к тому же большие отступы пагубны для читаемости кода.</p>\n<p>В примере ниже каждое объявление (а также начало/окончание правила) находится на своей строке — это, возможно, наилучший вариант написания CSS-кода: он понятен и аккуратен:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">body {\n  font:\n    1em/150% Helvetica,\n    Arial,\n    sans-serif;\n  padding: 1em;\n  margin: 0 auto;\n  max-width: 33em;\n}\n\n@media (min-width: 70em) {\n  body {\n    font-size: 130%;\n  }\n}\n\nh1 {\n  font-size: 1.5em;\n}\n\ndiv p,\n#id:first-line {\n  background-color: red;\n  background-style: none;\n}\n\ndiv p {\n  margin: 0;\n  padding: 1em;\n}\n\ndiv p + p {\n  padding-top: 0;\n}\n</pre></div>\n<p>То же самое вы можете написать, не добавляя большие отступы, — коды идентичны; но я уверен, вы согласитесь, что это очень тяжело прочитать:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">body {\n  font:\n    1em/150% Helvetica,\n    Arial,\n    sans-serif;\n  padding: 1em;\n  margin: 0 auto;\n  max-width: 33em;\n}\n@media (min-width: 70em) {\n  body {\n    font-size: 130%;\n  }\n}\n\nh1 {\n  font-size: 1.5em;\n}\n\ndiv p,\n#id:first-line {\n  background-color: red;\n  background-style: none;\n}\ndiv p {\n  margin: 0;\n  padding: 1em;\n}\ndiv p + p {\n  padding-top: 0;\n}\n</pre></div>\n<p>Как вы будете оформлять код — решать вам; хотя, работая в команде, вы обнаружите, что она придерживается тех правил форматирования, которые в ней утверждены.</p>\n<p>Внимательно делайте отступы в свойствах и значениях. К примеру, такие объявления будут работать:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">margin: 0 auto;\npadding-left: 10px;\n</pre></div>\n<p>А такие объявления не действительны:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">margin: 0auto;\npadding- left: 10px;\n</pre></div>\n<p>Всегда отделяйте друг от друга значения, а свойства пишите без пробелов через дефис.</p>\n<p><strong>Добавьте отступы в ваш код и посмотрите, что повлияет на код, а что нет.</strong></p></div></section><section aria-labelledby="что_дальше"><h2 id="что_дальше"><a>Что дальше?</a></h2><div class="section-content"><p>Полезно знать, как браузер делает из HTML и CSS готовую страницу, поэтом следующая ваша статья — <a>Как работает CSS</a> — мы рассмотрим этот процесс.</p></div></section>',
					works: [],
				},
				{
					title: 'Как работает CSS',
					chapter: 2.7,
					content:
						'<header><h1>Как работает CSS</h1></header><div class="section-content">\n<p>Мы уже изучили основы CSS, для чего он нужен и как создавать простые таблицы стилей. В этом уроке мы посмотрим, как браузер обрабатывает CSS и HTML и выводит содержимое на веб-страницу.</p>\n</div><section aria-labelledby="как_работает_css"><h2 id="как_работает_css"><a>Как работает CSS?</a></h2><div class="section-content"><p>Когда браузер отображает документ, он должен совместить его содержимое с его стилями. Этот процесс идёт в несколько этапов, о которых мы сейчас поговорим. Держите в уме, что это очень упрощённая версия того как браузер действительно загружает веб-страницу, а также то, что разные браузеры делают это по разному. Но, происходит, грубо говоря, следующее:</p>\n<ol>\n  <li>Браузер получает HTML-страницу (например, из Интернета)</li>\n  <li>Преобразует <a>HTML</a> в <a>DOM</a> (<em>Document Object Model</em>). DOM (или DOM-дерево) - это представление страницы в памяти компьютера. Подробнее на DOM мы остановимся чуть позже.</li>\n  <li>Затем браузер забирает все ресурсы и описания, связанные с HTML-документом, например: встроенные картинки, видео ... и стили CSS! JavaScript присоединяется чуть позже и мы пока не будем говорить об этом, чтобы все не усложнять.</li>\n  <li>После этого браузер анализирует полученный CSS код, сортирует описанные там правила в зависимости от их селекторов и раскладывает их в различные «корзины»: элементы, классы, идентификаторы(ID) и т.п. Основываясь на найденных селекторах браузер понимает какие правила относятся к определённым «узлам» в DOM-дереве и применяет их по мере необходимости (этот промежуточный шаг называют «формированием дерева представления» или «формированием дерева рендеринга»)</li>\n  <li>Дерево представления (<em>render tree</em>) формируется в том порядке, в каком оно затем должно будет отображаться, когда все правила будут применены.</li>\n  <li>Затем происходит визуальное отображение контента на странице (этот этап называется «отрисовкой»)</li>\n</ol>\n<p>Диаграмма демонстрирует этот процесс.</p>\n<p>\n  \n</p></div></section><section aria-labelledby="dom-дерево"><h2 id="dom-дерево"><a>DOM-дерево</a></h2><div class="section-content"><p>DOM напоминает дерево. Каждый элемент, атрибут, отрывок текста становится <a class="only-in-en-us" title="Currently only available in English (US)">DOM node <small>(en-US)</small></a> в разметке. DOM-узлы определяются их отношением с другими узлами. Некоторые родительские элементы имеют дочерние, а у дочерних элементов есть братские.</p>\n<p>Понимание DOM позволит вам разрабатывать, отлаживать и поддерживать ваш CSS, потому что именно в DOM-дереве ваши таблицы стилей и код встречаются. Когда вы начнёте работать с браузерным DevTools(инструменты для разработки) вы будете перемещаться по DOM при выборе элементов чтобы увидеть какие правила применяются.</p></div></section><section aria-labelledby="как_представлено_dom-дерево"><h2 id="как_представлено_dom-дерево"><a>Как представлено DOM-дерево</a></h2><div class="section-content"><p>Вместо длинного, нудного объяснения взглянем лучше на пример, чтобы понять, как HTML-код преобразуется в DOM.</p>\n<p>Возьмём следующий пример:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  Let\'s use:\n  <span>Cascading</span>\n  <span>Style</span>\n  <span>Sheets</span>\n</p>\n</pre></div>\n<p>В DOM-дереве узел, соответствующий элементу <code>&lt;p&gt;</code>, — это родительский элемент. Его дочерние элементы — текст и три элемента <code>&lt;span&gt;</code>. Узлы <code>SPAN</code> также будут родителями — с текстом в качестве дочерних элементов:</p>\n<pre compile="false" disable="true" language="markup">P\n├─ "Let\'s use:"\n├─ SPAN\n|  └─ "Cascading"\n├─ SPAN\n|  └─ "Style"\n└─ SPAN\n   └─ "Sheets"\n</pre>\n<p>Вот как браузер преобразует HTML-код — он загружает DOM-дерево, и в результате мы получим это:</p><div class="code-example" id="sect1"><div class="example-header" id="sect2"></div></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">p {\n  margin: 0;\n}\n</pre></div></div></section><section aria-labelledby="добавление_css_в_dom"><h2 id="добавление_css_в_dom"><a>Добавление CSS в DOM</a></h2><div class="section-content"><p>Допустим, мы добавили таблицу стилей к нашему примеру:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  Let\'s use:\n  <span>Cascading</span>\n  <span>Style</span>\n  <span>Sheets</span>\n</p>\n</pre></div>\n<p>А вот CSS-код:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">span {\n  border: 1px solid black;\n  background-color: lime;\n}\n</pre></div>\n<p>Браузер загрузит HTML-код, преобразует его в DOM и только потом загрузит CSS. Так как у нас всего одно правило, браузер загрузит CSS очень быстро! Это правило будет добавлено к каждому из трёх элементов <code>&lt;span&gt;</code>. После этого информация будет отображена на экране.</p>\n<p>Новый результат:</p><div class="code-example" id="sect3"><div class="example-header" id="sect4"></div></div>\n<p>В статье <a>Отладка CSS</a> мы будем использовать браузер DevTools для отладки CSS.</p></div></section><section aria-labelledby="что_происходит_когда_браузер_не_понимает_css"><h2 id="что_происходит_когда_браузер_не_понимает_css"><a>Что происходит, когда браузер не понимает CSS?</a></h2><div class="section-content"><p><a>В предыдущем уроке</a> я упомянул, что некоторые браузеры могут не поддерживать новые функции CSS. Вдобавок не все используют новейшие версии браузеров. Зная, что CSS разрабатывается всё время, вы можете поразиться и крайне ужаснуться тому, что происходит, если браузер не распознаёт объявление или селектор. Что же произойдёт?</p>\n<p>— Да ничего: браузер просто пропустит это!</p>\n<p>Если браузер встретит свойство, которое он не понимает, он просто-напросто проигнорирует его и двинется дальше. Он сделает так, если вы допустите опечатку или ошибку в свойстве или значении или если он не поддерживает какое-либо свойство или значение.</p>\n<p>Если же браузер встретит селектор, который он не распознаёт, то он просто пропустит данное правило и двинется дальше.</p>\n<p>Ниже я использовал британское написание слова <em>color</em>, что делает свойство некорректным. Поэтому текст не будет синим. Однако всё остальное будет работать; пропущено только недействительное свойство.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>I want this text to be large, bold and blue.</p>\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p {\n  font-weight: bold;\n  colour: blue; /* некорректное написание свойства цвета */\n  font-size: 200%;\n}\n</pre></div><div class="code-example" id="sect5"><div class="example-header" id="sect6"></div></div>\n<p>Такое поведение можно использовать, например, при добавлении новых функций CSS в качестве дополнения, причём вы будете уверены, что ничего не сломается, если браузер не распознает элемент. Вы можете использовать два правила с одинаковыми уровнями спецификации: одно — в качестве альтернативы для случая, если браузер не поддерживает нововведение.</p>\n<p>Это хорошо применяется, если вы хотите использовать величину, не использующуюся везде в документе. К примеру, некоторые старые браузеры не поддерживают <code>calc()</code> как значение. Я добавлю резерв — значение в px, затем задам ширину с помощью функции <code>calc()</code>, равной <code>100% - 50px</code>. Старые браузеры используют пиксельное значение, потому что не распознают <code>calc()</code>. Новые браузеры используют <code>calc()</code> так как эта строка появляется позже в каскаде.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.box {\n  width: 500px;\n  width: calc(100% - 50px);\n}\n</pre></div></div></section><section aria-labelledby="завершение"><h2 id="завершение"><a>Завершение</a></h2><div class="section-content"><p>Вы почти закончили модуль; осталось только одно. В следующей статье вы попрактикуетесь в <a>использовании ваших новых знаний</a>.</p></div></section>',
					works: [],
				},
				{
					title: 'Использование ваших новых знаний',
					chapter: 2.8,
					content:
						'<header><h1>Использование ваших новых знаний</h1></header><div class="section-content">\n<p>С учётом того что вы узнали за последние несколько уроков, вы должны обнаружить, что вы можете форматировать простые текстовые документы с использованием CSS, чтобы добавить к ним свой собственный стиль. Эта статья даёт вам возможность сделать это.</p>\n</div><section aria-labelledby="перед_началом"><h2 id="перед_началом"><a>Перед началом</a></h2><div class="section-content"><p>Вы можете писать код в редакторе ниже или <a class="external" target="_blank">скачать исходный код</a>, чтобы работать в вашем собственном редакторе. Это страница с кодом HTML и CSS внутри него. Если вам так удобнее, вы можете переместить CSS в отдельный файл на вашем компьютере. Или вы можете использовать онлайн-редакторы, такие как <a class="external" target="_blank">CodePen</a>, <a class="external" target="_blank">jsFiddle</a> или <a class="external" target="_blank">Glitch</a>.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Если у вас не получается, попросите о помощи — читайте раздел <a>Помощь</a> с кодом ниже.</p>\n</div></div></section><section aria-labelledby="работа_с_css"><h2 id="работа_с_css"><a>Работа с CSS</a></h2><div class="section-content"><p>В следующем примере демонстрируется биография, стилизованная с помощью CSS. Каждое использованное мной свойство CSS — ссылка на соответствующую страницу MDN.</p>\n<ul>\n  <li><a><code>font-family</code></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>color</code> <small>(en-US)</small></a></li>\n  <li><a><code>border-bottom</code></a></li>\n  <li><a><code>font-weight</code></a></li>\n  <li><a><code>font-size</code></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>text-decoration</code> <small>(en-US)</small></a></li>\n</ul>\n<p>Я использовал разные селекторы, такие как h1 и h2, а также создал класс для названия профессии для его стилизации.</p>\n<p>Измените значения свойств CSS, чтобы поменять внешний вид биографии.</p>\n<ol>\n  <li>Сделайте заголовок розовым, используя CSS-цвет <code>hotpink</code>.</li>\n  <li>Значение свойства заголовка <a><code>border-bottom</code></a> сделайте пунктирным (10px dotted) и добавьте цвет <code>purple</code>.</li>\n  <li>Примените к подзаголовку <code>&lt;h2&gt;</code> курсив.</li>\n  <li>Установите цвет <code>#eeeeee</code> для фона <a><code>background-color</code></a> маркированного списка с контактными данными и значение 5px solid purple для <a><code>border</code></a>. Используйте <a><code>padding</code></a>, чтобы отделить содержимое блока от границы.</li>\n  <li>Сделайте ссылки <code>зелёными</code> при наведении.</li>\n</ol>\n<p>У вас должно получиться примерно как-то так:</p>\n<p>\n  \n</p>\n<p>После этого попробуйте использовать селекторы, не указанные здесь, но описанные в <a>Руководстве по CSS</a>. Не бойтесь ошибок — практикуйтесь!</p>\n<p>Помните: тут нет неверного решения — сейчас вы предоставлены сами себе; развлекайтесь!</p></div></section><section aria-labelledby="помощь"><h2 id="помощь"><a>Помощь</a></h2><div class="section-content"><p>Если вы хотите, чтобы вашу работу оценили, или вы не справляетесь, и вам нужна помощь:</p>\n<ol>\n  <li>Загрузите ваш код на <a class="external" target="_blank">CodePen</a>, <a class="external" target="_blank">jsFiddle</a> или <a class="external" target="_blank">Glitch</a>.</li>\n  <li>Напишите пост с просьбой о помощи и / или оценке на <a class="external" target="_blank">форуме MDN</a>. Добавьте тег "learning" к вашему посту, чтобы нам легче было его найти. В вашем посте должны быть:\n    <ul>\n      <li>Заголовок с описанием наподобие "Assessment wanted for CSS First Steps".</li>\n      <li>Описание того, что вам нужно, — к примеру, что вы уже пробовали, что у вас не получается и вам нужна помощь.</li>\n      <li>Ссылка на ваш код в онлайн-редакторе.</li>\n      <li>Ссылка на страницу о помощи, чтобы мы смогли помочь вам с вашим вопросом.</li>\n    </ul>\n  </li>\n</ol></div></section><section aria-labelledby="что_дальше"><h2 id="что_дальше"><a>Что дальше?</a></h2><div class="section-content"><p>Поздравляем вас с завершением первого модуля! Теперь вы неплохо разбираетесь в CSS и можете разобраться в таблицах стилей. В следующем модуле, <a>Как устроен CSS</a>, мы глубже разберёмся в некоторых аспектах языка.</p></div></section>',
					works: [],
				},
				{
					title: 'Устройство CSS',
					chapter: 2.9,
					content:
						'<header><h1>Устройство CSS</h1></header><div class="section-content"><p>Этот модуль — продолжение раздела <a>Введение в CSS</a>: вы уже знакомы с синтаксисом языка и опробовали основные функции; пришло время углубиться в CSS. В этом модуле рассматриваются каскады и наследование, все доступные типы селекторов, блоков, изменений размеров, фонов, границ, а также отладка и многое другое.</p>\n<p>Наша цель в этом модуле — обеспечить вас необходимым набором инструментов для написания хорошего CSS-кода, а также помочь вам понять необходимую теорию для перехода к особым дисциплинам, таким как <a>стилизация текста</a> и <a>размещение элементов с помощью CSS</a>.</p></div><section aria-labelledby="необходимые_умения"><h2 id="необходимые_умения"><a>Необходимые умения</a></h2><div class="section-content"><p>Перед изучением этого раздела вы должны иметь:</p>\n<ol>\n  <li>Стандартную рабочую среду (<a>Установке базового программного обеспечения</a>), а также понимание того, как создавать файлы и работать с ними (<a>Работа с файлами</a>).</li>\n  <li>Общее представление о HTML (модуль <a>Введение в HTML</a>).</li>\n  <li>Общее представление о CSS (модуль <a>Начало работы с CSS</a>).</li>\n</ol>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Если вы работаете на компьютере/планшете/другом устройстве, где нет возможности создавать файлы, вы можете опробовать примеры (большую часть) на таких онлайн-программах, как <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble</a>.</p>\n</div></div></section><section aria-labelledby="руководства"><h2 id="руководства"><a>Руководства</a></h2><div class="section-content"><p>В этом модуле содержатся следующие статьи, в которых рассказывается об основных составляющих языка. По мере обучения вы встретите упражнения, позволяющие вам усвоить пройденный материал.</p>\n<dl>\n  <dt id="каскад_и_наследование"><a>Каскад и наследование</a></dt>\n  <dd>\n    <p>Цель данного урока — углубить ваше понимание основных концепций CSS — каскадов, спецификаций и наследования, — которые контролируют, как CSS добавляется в HTML и как разрешаются конфликты.</p>\n  </dd>\n  <dt id="css-селекторы"><a>CSS-селекторы</a></dt>\n  <dd>\n    <p>Существует широкий выбор CSS-селекторов, позволяющий максимально точно отбирать элементы для стилизации. В этой статье и её подстатьях мы рассмотрим разные типы в мельчайших подробностях и увидим как они работают. Подстатьи по порядку:</p>\n    <ul>\n      <li><a>Селекторы типа, класса и ID</a></li>\n      <li><a>Селекторы атрибутов</a></li>\n      <li><a>Псевдоклассы, псевдоэлементы</a></li>\n      <li><a>Комбинации селекторов</a></li>\n    </ul>\n  </dd>\n  <dt id="блоки_в_css"><a>Блоки в CSS</a></dt>\n  <dd>\n    <p>Всё в CSS имеет форму блока, и понимание блоков позволяет вам размещать элементы с помощью CSS или согласовывать их друг с другом. В этом уроке мы как следует рассмотрим <em>CSS-блоки.</em></p>\n  </dd>\n  <dt id="фон_и_границы"><a>Фон и границы</a></dt>\n  <dd>\n    <p>В этом уроке мы рассмотрим всякие интересные вещи, которые вы можете делать благодаря CSS-фонам и границам, — от добавления градиентов и фоновых изображений до скругления углов, фонов и границ.</p>\n  </dd>\n  <dt id="изменение_направления_текста"><a>Изменение направления текста</a></dt>\n  <dd>\n    <p>Раньше CSS развивался, чтобы лучше поддерживать разные <strong>режимы написания</strong>, включая <em>справа налево</em> или <em>сверху вниз</em> (как в японском языке). Мы рассмотрим их в этой статье.</p>\n  </dd>\n  <dt id="перекрытие_содержимого"><a>Перекрытие содержимого</a></dt>\n  <dd>\n    <p>В этом уроке мы рассмотрим ещё одну важную концепцию CSS — <strong>overflow</strong>. Переполнение происходит, когда слишком много информации находится в пределах ограниченного блока. В этой статье мы рассмотрим, как это исправить.</p>\n  </dd>\n  <dt id="значения_свойств_css"><a>Значения свойств CSS</a></dt>\n  <dd>\n    <p>У каждого CSS-свойства есть значения. В этом уроке мы рассмотрим основные значения и их единицы.</p>\n  </dd>\n  <dt id="изменение_размеров_в_css"><a>Изменение размеров в CSS</a></dt>\n  <dd>\n    <p>В предыдущих уроках вы встречались с различными способами изменения размеров элементов с использованием CSS. В этой статье мы собрали разные способы изменить размер через CSS.</p>\n  </dd>\n  <dt id="элементы_изображений_форм_и_медиа-элементы"><a>Элементы изображений, форм и медиа-элементы</a></dt>\n  <dd>\n    <p>Мы рассмотрим, как некоторые элементы относятся к CSS. Изображения, формы и другие медиа-элементы ведут себя по-другому, когда вы стилизуете их через CSS. Некоторые функции могут не работать, поэтому в этой статье мы рассмотрим то, что вам нужно знать про эти элементы.</p>\n  </dd>\n  <dt id="стилизация_таблиц"><a>Стилизация таблиц</a></dt>\n  <dd>\n    <p>Стилизация HTML таблиц — это не самая гламурная работа в мире, но иногда нам нужно это делать. Эта статья описывает, как сделать, чтобы Ваши HTML-таблицы выглядели хорошо, и некоторые свойства, подробно рассмотренные в предыдущих статьях.</p>\n  </dd>\n  <dt id="отладка_css"><a>Отладка CSS</a></dt>\n  <dd>\n    <p>При написании CSS вы можете столкнуться с тем, что ваш CSS-код работает не так, как вы того хотели. Вы узнаете, как отлаживать CSS и как с помощью инструментов разработчика понять, где неполадка.</p>\n  </dd>\n  <dt id="организация_css-кода"><a class="only-in-en-us" title="Currently only available in English (US)">Организация CSS-кода <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Как только вы начнёте работать над большими проектами и таблицами стилей, вы поймёте, что обслуживать такие таблицы не так-то и легко. В статье мы рассмотрим, как лучше писать CSS, чтобы его было легче обслуживать.</p>\n  </dd>\n</dl></div></section>',
					works: [],
				},
				{
					title: 'Селекторы CSS',
					chapter: 2.1,
					content:
						'<header><h1>Селекторы CSS</h1></header><div class="section-content">\n<p>В <a>CSS</a>-селекторы используются для стилизации <a>HTML</a> элементов на веб-странице. Существует широкий выбор CSS-селекторов, позволяющий максимально точно отбирать элементы для стилизации. В этой статье и её подстатьях мы в мельчайших подробностях рассмотрим разные их типы и увидим, как они работают.</p>\n</div><section aria-labelledby="что_такое_селекторы"><h2 id="что_такое_селекторы"><a>Что такое селекторы?</a></h2><div class="section-content"><p>Вы уже встречались с селекторами. Это выражения, которые говорят браузеру, к какому элементу HTML нужно применить те или иные свойства CSS, определённые внутри блока объявления стиля.</p>\n<p>\n  \n</p>\n<p>Ранее вы встречали несколько разных селекторов и узнали, что существуют селекторы, которые по-разному относятся к документу, — например используя элемент <code>h1</code> или класс <code>.special</code>.</p>\n<p>В CSS селекторы определяются в спецификации CSS-селекторов; как и другие части CSS, нужно поддерживать их работу в браузерах. Большинство селекторов, которые вы встретите, определены в <a class="external" target="_blank">Спецификации селекторов 3 уровня</a>, где вы сможете найти всю информацию о поддержке селекторов в браузерах.</p></div></section><section aria-labelledby="несколько_селекторов"><h2 id="несколько_селекторов"><a>Несколько селекторов</a></h2><div class="section-content"><p>Несколько селекторов, использующих одни и те же таблицы стилей, можно объединить в <em>лист селекторов</em>: правило будет добавлено к каждому селектору. К примеру, у меня есть одинаковые правила для заголовка <code>h1</code> и класса <code>.special</code>; я могу написать их так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">h1 {\n  color: blue;\n}\n\n.special {\n  color: blue;\n}\n</pre></div>\n<p>А могу написать короче — просто отделив селекторы запятыми:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">h1, .special {\n  color: blue;\n}\n</pre></div>\n<p>Пробел можно вставлять до или после запятой. Ещё удобнее писать каждый селектор с новой строки:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">h1,\n.special {\n  color: blue;\n}\n</pre></div>\n<p>В упражнении ниже объедините два селектора в одном правиле. Результат должен остаться таким же.</p>\n<p>При объединении селекторов таким образом, при условии если хоть один селектор будет недействительным, всё правило будет пропущено.</p>\n<p>В примере ниже правило для селектора класса не будет работать, в то время как <code>h1</code> будет стилизован.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">h1 {\n  color: blue;\n}\n\n..special {\n  color: blue;\n}\n</pre></div>\n<p>Но если мы объединим селекторы, правило не применится ни к <code>h1</code>, ни к классу: оно считается недействительным.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">h1,\n..special {\n  color: blue;\n}\n</pre></div></div></section><section aria-labelledby="типы_селекторов"><h2 id="типы_селекторов"><a>Типы селекторов</a></h2><div class="section-content"><p>Понимание того, какой именно селектор вам нужен, очень помогает подобрать подходящий элемент. Сейчас мы разберём разные виды селекторов.</p></div></section><section aria-labelledby="селекторы_тегов_классов_и_идентификаторов"><h3 id="селекторы_тегов_классов_и_идентификаторов"><a>Селекторы тегов, классов и идентификаторов</a></h3><div class="section-content"><p>К этой группе относятся селекторы HTML-элементов, таких как <code>&lt;h1&gt;</code>.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">h1 {\n}\n</pre></div>\n<p>К группе относятся и селекторы классов:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.box {\n}\n</pre></div>\n<p>или селекторы идентификаторов (ID):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">#unique {\n}\n</pre></div></div></section><section aria-labelledby="селекторы_атрибутов"><h3 id="селекторы_атрибутов"><a>Селекторы атрибутов</a></h3><div class="section-content"><p>Эта группа селекторов позволяет выбирать селекторы, основываясь на <em>наличии</em> у них конкретного атрибута элемента:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">a[title] {\n}\n</pre></div>\n<p>или основываясь на <em>значении</em> атрибута:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">a[href="https://example.com"]\n{\n}\n</pre></div></div></section><section aria-labelledby="псевдоклассы_псевдоэлементы"><h3 id="псевдоклассы_псевдоэлементы"><a>Псевдоклассы, псевдоэлементы</a></h3><div class="section-content"><p>К этой группе относятся псевдоклассы, которые стилизуют определённое состояние элемента. Псевдокласс <code>:hover</code>, например, применяет правило, только если на элемент наведён курсор мыши</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">a:hover {\n}\n</pre></div>\n<p>К группе ещё относятся псевдоэлементы, которые выбирают определённую часть элемента (вместо целого элемента). Например, <code>::first-line</code> всегда выбирает первую строку внутри элемента (абзаца <code>&lt;p&gt;</code> в нашем случае), действуя, как если бы тег <code>&lt;span&gt;</code> оборачивал первую строку, а затем был стилизован.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p::first-line {\n}\n</pre></div></div></section><section aria-labelledby="комбинаторы"><h3 id="комбинаторы"><a>Комбинаторы</a></h3><div class="section-content"><p>И последняя группа селекторов: она позволяет объединять селекторы, чтобы было легче находить конкретные элементы внутри документа. В следующем примере мы отыскали дочерний элемент <code>&lt;article&gt;</code> с помощью комбинатора дочерних элементов (<code>&gt;</code>):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">article &gt; p {\n}\n</pre></div></div></section><section aria-labelledby="продолжение"><h2 id="продолжение"><a>Продолжение</a></h2><div class="section-content"><p>Ниже можно просмотреть таблицу различных видов селекторов с соответствующими ссылками, или вы можете двинуться дальше: нас ждут <a>селекторы тегов, классов и идентификаторов</a>.</p></div></section><section aria-labelledby="справка_о_селекторах"><h2 id="справка_о_селекторах"><a>Справка о селекторах</a></h2><div class="section-content"><p>В таблице ниже — доступные сейчас селекторы, а также ссылки к страницам, где рассказывается, как использовать каждый из них. Я также добавил ссылки на страницы MDN для каждого селектора, чтобы вы могли проверить, поддерживаются ли они браузерами.</p>\n</div></section>',
					works: [],
				},
				{
					title: 'Селекторы типа, класса и ID',
					chapter: 2.11,
					content:
						'<header><h1>Селекторы типа, класса и ID</h1></header><div class="section-content">\n<p>В этом уроке мы рассмотрим некоторые из базисных селекторов, которые вы, вероятно, будете чаще всего использовать в вашей работе.</p>\n</div><section aria-labelledby="селекторы_типа"><h2 id="селекторы_типа"><a>Селекторы типа</a></h2><div class="section-content"><p><strong>Селектор типа</strong> иногда называется <em>селектором имени тега</em> или <em>селектором элемента</em>, поскольку он выбирает тег/элемент HTML в вашем документе. В примере ниже мы использовали селекторы span, em и strong.</p>\n<p><strong>Попробуйте добавить CSS-правило, чтобы выбрать элемент <code>&lt;h1&gt;</code> и изменить его цвет на синий.</strong></p></div></section><section aria-labelledby="универсальный_селектор"><h2 id="универсальный_селектор"><a>Универсальный селектор</a></h2><div class="section-content"><p>Универсальный селектор обозначается звёздочкой (<code>*</code>). Он выбирает всё в документе (или внутри родительского элемента, если он сцеплен с другим элементом и с комбинатором потомка). В следующем примере мы используем универсальный селектор, чтобы убрать внешние отступы у всех элементов. Несмотря на стилизацию по умолчанию, добавленную браузером, — она раздвигает заголовки и абзацы с помощью отступов, — всё плотно сжато.</p>\n<p>Такого рода поведение иногда можно увидеть в «таблицах сброса стилей», которые вычищают всю стилизацию браузера. Так как универсальный селектор вызывает глобальные изменения, мы используем его в очень специфических ситуациях, таких как та, что описана ниже.</p></div></section><section aria-labelledby="использование_универсального_селектора_для_облегчения_чтения_ваших_селекторов"><h3 id="использование_универсального_селектора_для_облегчения_чтения_ваших_селекторов"><a>Использование универсального селектора для облегчения чтения ваших селекторов</a></h3><div class="section-content"><p>Одно из применений универсального селектора состоит в том, чтобы облегчить чтение селекторов и сделать их более удобопонятными с точки зрения того, что они делают. Например, если мы хотим выбрать элементы-потомки элемента <code>&lt;article&gt;</code>, которые являются первыми дочерними элементами своего родителя, включая дочерние элементы самого <code>&lt;article&gt;</code>, и сделать их шрифт жирным, мы могли бы использовать псевдокласс <a><code>:first-child</code></a>, который мы будем изучать в уроке о <a>псевдоклассах и псевдо-элементах</a>, как селектор-потомок вместе с селектором элемента <code>&lt;article&gt;</code>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">article :first-child {\n  font-weight: bold;\n}\n</pre></div>\n<p>Однако этот селектор можно спутать с <code>article:first-child</code>, который выберет любой элемент <code>&lt;article&gt;</code>, являющийся первым дочерним элементом другого элемента .</p>\n<p>Чтобы избежать этой путаницы, мы можем добавить универсальный селектор в псевдокласс <code>:first-child</code> , чтобы было очевидно, что делает селектор. Он выбирает <em>любой</em> элемент, который является первым дочерним элементом элемента <code>&lt;article&gt;</code> или первым дочерним элементом любого потомка элемента <code>&lt;article&gt;</code>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">article *:first-child {\n  font-weight: bold;\n}\n</pre></div>\n<p>Хотя оба делают одно и то же, удобочитаемость значительно улучшилась.</p></div></section><section aria-labelledby="селекторы_класса"><h2 id="селекторы_класса"><a>Селекторы класса</a></h2><div class="section-content"><p>Селектор класса начинается с символа точки (<code>.</code>). Он выберет в документе всё, к чему применён этот класс. В живом примере ниже мы создали класс с именем <code>.highlight</code>, и применили его к нескольким местам в документе. Все элементы, к которым применён класс, подсвечиваются.</p></div></section><section aria-labelledby="нацеливание_классов_на_отдельные_элементы"><h3 id="нацеливание_классов_на_отдельные_элементы"><a>Нацеливание классов на отдельные элементы</a></h3><div class="section-content"><p>Вы можете создать селектор, нацеленный на конкретные элементы, к которым применён класс. В следующем примере мы подсветим <code>&lt;span&gt;</code> с классом <code>highlight</code> иначе, чем заголовок <code>&lt;h1&gt;</code> с классом <code>highlight</code>. Мы сделаем это, используя селектор типа для элемента, на который нацелены, с классом, добавленным с помощью точки, без пробела между ними.</p>\n<p>Этот подход сужает границы правила. Правило будет применяться только к этой конкретной комбинации элемента и класса. Вам нужно будет добавить другой селектор, если вы решили, что правило должно применяться и к другим элементам.</p></div></section><section aria-labelledby="нацеливание_на_элемент_к_которому_применено_более_одного_класса"><h3 id="нацеливание_на_элемент_к_которому_применено_более_одного_класса"><a>Нацеливание на элемент, к которому применено более одного класса</a></h3><div class="section-content"><p>Вы можете применить несколько классов к элементу и нацелиться на них по отдельности, или выбрать элемент только если присутствуют все классы селектора. Это может быть полезно при создании компонентов, которые могут сочетаться на вашем сайте разными способами.</p>\n<p>В примере ниже у нас есть <code>&lt;div&gt;</code>, содержащий примечание. Серая граница применяется когда блок имеет класс <code>notebox</code>. Если у блока есть также класс <code>warning</code> или <code>danger</code>, мы меняем <a class="only-in-en-us" title="Currently only available in English (US)"><code>border-color</code> <small>(en-US)</small></a>.</p>\n<p>Мы можем указать браузеру, что мы хотим подобрать только такой элемент, к которому применены два класса, сцепив их вместе без пробелов между ними. Вы увидите, что к последнему <code>&lt;div&gt;</code> не применён ни один стиль, так как он имеет только класс <code>danger</code>; ему нужен ещё и класс <code>notebox</code>, чтобы получить какую-нибудь стилизацию.</p></div></section><section aria-labelledby="селекторы_id"><h2 id="селекторы_id"><a>Селекторы ID</a></h2><div class="section-content"><p>Селектор ID начинается с <code>#</code>, а не с точки, но используется так же, как и селектор класса. Однако ID может быть использован единожды на странице, и к элементу может быть применён только один <code>id</code>. Можно выбрать элемент, которому присвоен <code>id</code>, а также вы можете предварить ID селектором типа для нацеливания на элемент, имеющий соответствующее сочетание элемента и ID. Вы можете увидеть оба варианта использования в следующем примере:</p>\n<blockquote>\n  <p>**Предупреждение:**Может показаться, что неоднократное использование в документе одного и того же ID выполняет задачи стилизования, но не стоит этого делать. Результатом будет неверный код, который приведёт к многочисленным странностям в поведении.</p>\n</blockquote>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Как мы знаем из урока по специфичности, ID имеет высокую специфичность. Он будет брать верх над большинством других селекторов. В большинстве случаев предпочтительнее добавить элементу класс, чем ID. Однако, если использование ID это единственный способ нацелиться на элемент — возможно, потому вы не имеете доступа к разметке и, следовательно, возможности её редактировать — это будет работать.</p>\n</div></div></section><section aria-labelledby="в_следующей_статье"><h2 id="в_следующей_статье"><a>В следующей статье</a></h2><div class="section-content"><p>Мы продолжим изучение селекторов и рассмотрим <a>селекторы атрибута</a>.</p></div></section>',
					works: [],
				},
				{
					title: 'Селекторы атрибута',
					chapter: 2.12,
					content:
						'<header><h1>Селекторы атрибута</h1></header><div class="section-content">\n<p>Как вы знаете из курса о HTML, элементы могут иметь атрибуты, которые дают дополнительную информацию о размечаемом элементе. В CSS вы можете использовать селекторы атрибута для стилизации элементов с определёнными атрибутами. Этот урок покажет вам, как использовать эти очень полезные селекторы.</p>\n</div><section aria-labelledby="селекторы_наличия_и_значения"><h2 id="селекторы_наличия_и_значения"><a>Селекторы наличия и значения</a></h2><div class="section-content"><p>Эти селекторы делают возможным выбор элемента, основанный только на наличии атрибута (например, <code>href</code>) или на всевозможных разного рода сочетаниях со значением атрибута.</p>\n\n<p>В приведённом ниже примере вы можете увидеть использование этих селекторов.</p>\n<ul>\n  <li>Используя <code>li[class],</code> мы можем выбрать каждый селектор с атрибутом класса. Это соответствует всем пунктам списка, за исключением первого.</li>\n  <li><code>li[class="a"]</code> выбирает селектор с классом <code>a</code>, но не селектор с классом <code>a</code> в сочетании с другим, отделённым запятой, классом как частью значения. Он выбирает второй пункт списка.</li>\n  <li><code>li[class~="a"]</code> выберет класс <code>a</code>, а также значение, которое содержит класс <code>a</code> как часть разделённого пробелом списка. Он выберет второй и третий пункты списка.</li>\n</ul></div></section><section aria-labelledby="селекторы_вхождения_подстроки"><h2 id="селекторы_вхождения_подстроки"><a>Селекторы вхождения подстроки</a></h2><div class="section-content"><p>Эти селекторы предоставляют более широкие возможности для выявления вхождения подстроки в значение атрибута. Например, если у вас есть классы <code>box-warning</code> и <code>box-error</code> и вы хотите выбрать всё, что начинается со строки "box-", вы можете использовать <code>[class^="box-"]</code>, чтобы выбрать оба класса (или <code>[class|="box"]</code> как описано в предыдущем разделе).</p>\n\n<p>(Отступление: возможно, будет полезным заметить, что <code>^</code> и <code>$</code> давно используются как <em>якоря</em> в так называемых <em>регулярных выражениях</em> и обозначают <em>начинается с</em> и <em>заканчивается на</em>.)</p>\n<p>Следующий пример показывает, как используются эти селекторы:</p>\n<ul>\n  <li><code>li[class^="a"]</code> выбирает все значения атрибута, которые начинаются с <code>a</code>, что соответствует первым двум элементам списка.</li>\n  <li><code>li[class$="a"]</code> выбирает все значения атрибута, которые заканчиваются на <code>a</code>, что соответствует первому и третьему элементу списка.</li>\n  <li><code>li[class*="a"]</code> выбирает все значения атрибута, где появляется <code>a</code>, независимо от положения в строке, что соответствует всем элементам нашего списка.</li>\n</ul></div></section><section aria-labelledby="чувствительность_к_регистру"><h2 id="чувствительность_к_регистру"><a>Чувствительность к регистру</a></h2><div class="section-content"><p>Если вы хотите выбрать значения атрибута без учёта регистра, вы можете использовать значение <code>i</code> перед закрывающей скобкой. Этот признак говорит браузеру, что символы ASCII должны сопоставляться без учёта регистра. Без этого признака значения будут сопоставлены в соответствии с чувствительностью к регистру языка документа — в случае HTML такая чувствительность присутствует.</p>\n<p>В примере ниже первый селектор выберет значение, начинающееся с <code>a</code> — это соответствует только первому элементу списка, потому что два других элемента списка начинаются с заглавной буквы A. Второй селектор использует признак нечувствительности к регистру и поэтому выберет все элементы списка.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Существует также более новое значение <code>s</code>, которое вызывает сопоставление с учётом регистра в контекстах, где сопоставление обычно не учитывает регистр, однако это не так хорошо поддерживается в браузерах и не очень полезно в контексте HTML.</p>\n</div></div></section><section aria-labelledby="следующие_шаги"><h2 id="следующие_шаги"><a>Следующие шаги</a></h2><div class="section-content"><p>Итак, мы рассмотрели селекторы атрибута, и вы можете перейти к следующей статье, в которой рассказывается о <a>псевдоклассах и псевдоэлементах</a>.</p></div></section>',
					works: [],
				},
				{
					title: 'Псевдоклассы, псевдоэлементы',
					chapter: 2.13,
					content:
						'<header><h1>Псевдоклассы, псевдоэлементы</h1></header><div class="section-content">\n<p>Следующий набор селекторов, который мы рассмотрим, относится к псевдоклассам и псевдоэлементам. Их очень много, и они часто служат довольно специфическим целям. После того как вы узнаете порядок их использования, просмотрите список — не найдётся ли в нём что-либо, что поможет решить стоящую перед вами задачу. Кроме того, будет полезным заглянуть на соответствующую каждому селектору страницу MDN, чтобы прояснить, как его обрабатывает браузер.</p>\n</div><section aria-labelledby="что_такое_псевдокласс"><h2 id="что_такое_псевдокласс"><a>Что такое псевдокласс?</a></h2><div class="section-content"><p>Псевдокласс — это селектор, который выбирает элементы, находящиеся в специфическом состоянии, например, они являются первым элементом своего типа, или на них наведён указатель мыши. Они обычно действуют так, как если бы вы применили класс к какой-то части вашего документа, что часто помогает сократить избыточные классы в разметке и даёт более гибкий, удобный в поддержке код.</p>\n<p>Псевдоклассы — это ключевые слова, которые начинаются с двоеточия:</p>\n<pre compile="false" disable="true" language="markup">:pseudo-class-name\n</pre></div></section><section aria-labelledby="простой_пример_псевдокласса"><h3 id="простой_пример_псевдокласса"><a>Простой пример псевдокласса</a></h3><div class="section-content"><p>Давайте рассмотрим простой пример. Если бы мы хотели сделать шрифт первого абзаца статьи более крупным и жирным, мы могли бы добавить класс к этому абзацу, а затем добавить CSS к этому классу, как показано в первом примере ниже:</p>\n<p>Однако поддержка может оказаться утомительной — что если новый абзац будет добавлен в верхнюю часть документа? Тогда нам нужно будет передвинуть класс к новому абзацу. Вместо добавления класса мы могли бы использовать селектор псевдокласса <a><code>:first-child</code></a> — он всегда будет нацелен на первый дочерний элемент в статье, и нам больше не нужно будет редактировать HTML (к тому же это не всегда возможно, например, в случае если он генерируется CMS.)</p>\n<p>Все псевдоклассы ведут себя подобным образом. Они нацелены на какой-то фрагмент вашего документа, находящийся в определённом состоянии, и ведут себя так, как если бы вы добавили класс в свой HTML. Рассмотрим некоторые другие примеры в MDN:</p>\n<ul>\n  <li><a><code>:last-child</code></a></li>\n  <li><a><code>:only-child</code></a></li>\n  <li><a><code>:invalid</code></a></li>\n</ul>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Правильно писать псевдоклассы и элементы без какого бы то ни было предшествующего им селектора элемента. В примере выше вы могли бы написать <code>:first-child</code> и правило было бы применено к <em>любому</em> элементу, оказавшемуся первым дочерним для <code>&lt;article&gt;</code>, не только к первому дочернему абзацу — <code>:first-child</code> равнозначно <code>*:first-child</code>. Однако обычно вы хотите б<em>о</em>льшего контроля, поэтому вам нужен более специфичный селектор.</p>\n</div></div></section><section aria-labelledby="псевдоклассы_пользовательского_действия"><h3 id="псевдоклассы_пользовательского_действия"><a>Псевдоклассы пользовательского действия</a></h3><div class="section-content"><p>Некоторые псевдоклассы применяются только тогда, когда пользователь некоторым образом взаимодействует с документом. Эти псевдоклассы действий пользователя, иногда называемые динамическими псевдоклассами, действуют так, как если бы класс был добавлен к элементу в момент взаимодействия с ним пользователя. Примеры даны для:</p>\n<ul>\n  <li><a><code>:hover</code></a> — упоминался выше; он применяется только в том случае, если пользователь наводит указатель мыши на элемент, обычно на ссылку.</li>\n  <li><a><code>:focus</code></a> — применяется только в том случае, если пользователь фокусируется на элементе, используя управление с клавиатуры.</li>\n</ul></div></section><section aria-labelledby="что_такое_псевдоэлемент"><h2 id="что_такое_псевдоэлемент"><a>Что такое псевдоэлемент?</a></h2><div class="section-content"><p>Псевдоэлементы ведут себя сходным образом, однако они действуют так, как если бы вы добавили в разметку целый новый HTML-элемент, а не применили класс к существующим элементам. Псевдоэлементы начинаются с двойного двоеточия <code>::</code>.</p>\n<pre compile="false" disable="true" language="markup">::pseudo-element-name\n</pre>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Некоторые ранние псевдоэлементы использовали синтаксис одинарного двоеточия, которое вы можете иногда видеть в коде или примерах. Современные браузеры поддерживают ранние псевдоэлементы с одинарным или двойным двоеточием синтаксиса для обратной совместимости.</p>\n</div>\n<p>Например, если вы хотите выбрать первую строку абзаца, вы могли бы обернуть её в <code>&lt;span&gt;</code> и использовать селектор элемента; однако это может не сработать, если количество слов, которые вы обернули, будет больше или меньше ширины родительского элемента. Поскольку мы, как правило, не знаем, сколько слов поместится в строке — т.к. их количество меняется, если меняется ширина экрана или размер шрифта — то надёжного решения при помощи HTML нет.</p>\n<p>Селектор псевдоэлемента <code>::first-line</code> сделает это наверняка — если количество слов увеличивается или уменьшается, он всё равно будет выбирать только первую строку.</p>\n<p>Он действует так, как если бы <code>&lt;span&gt;</code> волшебным образом был обёрнут вокруг этой первой отформатированной строки и обновлялся бы каждый раз при изменении длины строки.</p>\n<p>Вы можете видеть, что селектор выбирает первую строку обоих абзацев.</p></div></section><section aria-labelledby="объединение_псевдоклассов_и_псевдоэлементов"><h2 id="объединение_псевдоклассов_и_псевдоэлементов"><a>Объединение псевдоклассов и псевдоэлементов</a></h2><div class="section-content"><p>Если вы хотите сделать шрифт первой строки первого абзаца жирным, вы можете связать вместе селекторы <code>:first-child</code> и <code>::first-line</code>. Попробуйте отредактировать предыдущий живой пример, чтобы использовалась следующая CSS. Мы говорим, что хотим выбрать первую строку первого элемента <code>&lt;p&gt;,</code> который находится внутри элемента <code>&lt;article&gt;</code>.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">article p:first-child::first-line {\n  font-size: 120%;\n  font-weight: bold;\n}\n</pre></div></div></section><section aria-labelledby="генерация_контента_с_помощью_before_и_after"><h2 id="генерация_контента_с_помощью_before_и_after"><a>Генерация контента с помощью ::before и ::after</a></h2><div class="section-content"><p>Существует пара специальных псевдоэлементов, которые используются вместе со свойством <a><code>content</code></a> для вставки содержимого в документ с помощью CSS.</p>\n<p>Вы можете использовать их для вставки строки текста, как в приведённом ниже живом примере. Попробуйте изменить текстовое значение свойства <a><code>content</code></a> и вы увидите, как изменится результат. Можете также изменить псевдоэлемент <code>::before</code> на <code>::after</code> и увидите, что текст вставлен в конце элемента, а не в начале.</p>\n<p>Однако вставка строк текста из CSS в реальности происходит не слишком часто, поскольку этот текст недоступен для некоторых экранных дикторов и его будет трудно найти и отредактировать в будущем.</p>\n<p>Более корректным использованием этих псевдоэлементов является вставка значка, например маленькой стрелки, добавленной в приведённом ниже примере, которая является визуальным указателем, не предназначенным для зачитывания с помощью экранного диктора:</p>\n<p>Эти псевдоэлементы также часто используются для вставки пустой строки, которая затем может быть стилизована так же, как и любой элемент на странице.</p>\n<p>В следующем примере мы добавили пустую строку, используя псевдоэлемент <code>::before.</code> Мы установили <code>display: block</code>, чтобы стилизовать его по ширине и высоте. Затем мы используем CSS, чтобы стилизовать его так же, как и любой другой элемент. Вы можете поиграть с CSS и изменить его внешний вид и поведение.</p>\n<p>Использование псевдоэлементов <code>::before</code> и <code>::after</code> вместе со свойством <code>content</code> в CSS называется "генерируемым контентом" в CSS, и вы часто будете видеть, как этот метод используется для различных задач. Отличным примером является сайт <a class="external" target="_blank">CSS Arrow Please</a>, который помогает вам генерировать стрелку с помощью CSS. Посмотрите на CSS, когда вы создадите свою стрелку, и вы увидите использование псевдо-элементов <a><code>::before</code></a> и <a><code>::after</code></a>. Всякий раз, когда вы будете видеть эти селекторы, смотрите на свойство <a><code>content</code></a>, чтобы увидеть, что добавляется в документ..</p></div></section><section aria-labelledby="справочный_раздел"><h2 id="справочный_раздел"><a>Справочный раздел</a></h2><div class="section-content"><p>Существует большое количество псевдоклассов и псевдоэлементов, и полезно иметь список, к которому можно обращаться. Ниже приведены таблицы, в которых они перечислены, со ссылками на их справочные страницы в MDN. Используйте эти таблицы как справочник, чтобы видеть массив доступных вам средств для нацеливания на элементы.</p></div></section><section aria-labelledby="псевдоклассы"><h3 id="псевдоклассы"><a>Псевдоклассы</a></h3><div class="section-content"></div></section><section aria-labelledby="псевдоэлементы"><h3 id="псевдоэлементы"><a>Псевдоэлементы</a></h3><div class="section-content"></div></section>',
					works: [],
				},
				{
					title: 'Комбинаторы',
					chapter: 2.14,
					content:
						'<header><h1>Комбинаторы</h1></header><div class="section-content">\n<p>Наконец мы рассмотрим селекторы, которые называются комбинаторами, поскольку они соединяют другие селекторы, создавая полезную связь селекторов друг с другом и расположением содержимого в документе.</p>\n</div><section aria-labelledby="комбинатор_потомка"><h2 id="комбинатор_потомка"><a>Комбинатор потомка</a></h2><div class="section-content"><p><strong>Селектор потомка</strong> — обычно представляется символом пробела (" ") — соединяет два селектора так, что элементы, соответствующие второму селектору, выбираются, если они имеют предка (родителя, родителя родителя, родителя родителя родителя и т.д.), соответствующего первому селектору. Селекторы, которые используют комбинатор потомка, называются <em>селекторами потомка.</em></p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">body article p\n</pre></div>\n<p>В приведённом ниже примере выбирается только тот элемент &lt;p&gt;, который находится внутри элемента с классом<code>.box</code>.</p></div></section><section aria-labelledby="дочерний_комбинатор"><h2 id="дочерний_комбинатор"><a>Дочерний комбинатор</a></h2><div class="section-content"><p><strong>Дочерний комбинатор</strong> (<code>&gt;</code>) помещается между двумя селекторами CSS. При этом будут выбраны только те элементы, соответствующие второму селектору, которые являются прямыми потомками элементов, соответствующих первому селектору. Все элементы-потомки на более низких уровнях иерархии будут пропущены. Например, чтобы выбрать только те элементы <code>&lt;p&gt;</code>, которые являются дочерними элементами <code>&lt;article&gt;</code>, селектор пишется так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">article &gt; p\n</pre></div>\n<p>Другой пример. Имеется неупорядоченный список, заключающий в себе другой, упорядоченный список. Дочерний комбинатор используется для того, чтобы выбрать только те элементы <code>&lt;li&gt;</code>, которые являются прямыми потомками <code>&lt;ul&gt;</code>, и присвоить им верхнюю границу красного цвета.</p>\n<p>Если вы уберёте символ <code>&gt;</code>, указывающий на то, что это селектор с дочерним комбинатором, селектор превратится в селектор всех потомков (комбинатор - пробел) и все элементы <code>&lt;li&gt;</code> получат верхнюю границу красного цвета.</p></div></section><section aria-labelledby="соседний_родственный_комбинатор"><h2 id="соседний_родственный_комбинатор"><a>Соседний родственный комбинатор</a></h2><div class="section-content"><p>Соседний родственный селектор (<code>+</code>) используется для выбора элемента, который непосредственно следует за другим элементом и находится на одном с ним уровне иерархии. Например, чтобы выбрать все элементы <code>&lt;img&gt;</code> , которые идут сразу после элементов <code>&lt;p&gt;</code> :</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p + img\n</pre></div>\n<p>Распространённый вариант использования — сделать что-то с абзацем, который следует за заголовком, как в примере ниже. Здесь мы ищем абзац, который непосредственно примыкает к <code>&lt;h1&gt;</code>, и стилизуем его.</p>\n<p>Если вы вставите какой-то другой элемент, например <code>&lt;h2&gt;</code> между <code>&lt;h1&gt;</code> и <code>&lt;p&gt;</code>, вы обнаружите, что абзац больше не соответствует селектору и поэтому не получает цвет фона и переднего плана, применяемый, когда элемент является соседним.</p></div></section><section aria-labelledby="общий_родственный_комбинатор"><h2 id="общий_родственный_комбинатор"><a>Общий родственный комбинатор</a></h2><div class="section-content"><p>Если вы хотите выбрать родственные элементы, даже если они не являются непосредственными соседями, то вы можете использовать общий родственный комбинатор (<code>~</code>). Чтобы выбрать все элементы <code>&lt;img&gt;</code>, которые находятся в <em>любом</em> месте после элементов <code>&lt;p&gt;</code>, надо указать так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p ~ img\n</pre></div>\n<p>В приведённом ниже примере мы выбираем все элементы <code>&lt;p&gt;</code>, которые идут после <code>&lt;h1&gt;</code>, и хотя в документе есть также <code>&lt;div&gt;</code>, тем не менее <code>&lt;p&gt;</code>, который идёт после него, будет выбран.</p></div></section><section aria-labelledby="использование_комбинаторов"><h2 id="использование_комбинаторов"><a>Использование комбинаторов</a></h2><div class="section-content"><p>Вы можете соединять с помощью комбинаторов любые селекторы, которые мы изучали в предыдущих уроках, чтобы выбрать часть вашего документа. Например, если мы хотим выбрать пункты списка с классом "a", которые являются прямыми потомками <code>&lt;ul&gt;</code>, можно использовать следующую комбинацию:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">ul &gt; li[class="a"] {\n}\n</pre></div>\n<p>Однако будьте осторожны при создании больших списков селекторов, которые выделяют очень конкретные части вашего документа. Будет трудно повторно использовать правила CSS, так как вы сделали селектор очень специфичным для определения местоположения этого элемента в разметке.</p>\n<p>Часто бывает лучше создать простой класс и применить его к рассматриваемому элементу. Тем не менее, ваши знания о комбинаторах будут очень полезны, если вам нужно добраться до чего-то в вашем документе и вы не можете получить доступ к HTML, возможно, из-за того, что он генерируется CMS.</p></div></section><section aria-labelledby="проверьте_ваши_навыки!"><h2 id="проверьте_ваши_навыки!"><a>Проверьте ваши навыки!</a></h2><div class="section-content"><p>Мы охватили много тем в этой статье. А вы можете вспомнить наиболее важную информацию? Можете пройти несколько дополнительных тестов для того чтобы убедиться в том, что вы усвоили эту информацию, прежде чем пойдёте дальше — смотрите <a>Проверьте ваши навыки: Селекторы</a>.</p></div></section><section aria-labelledby="двигаемся_дальше"><h2 id="двигаемся_дальше"><a>Двигаемся дальше</a></h2><div class="section-content"><p>Это последний раздел в наших уроках по селекторам. Далее мы перейдём к другой важной части CSS — <a>CSS модель коробки</a>.</p></div></section>',
					works: [],
				},
				{
					title: 'Каскад и наследование',
					chapter: 2.15,
					content:
						'<header><h1>Каскад и наследование</h1></header><div class="section-content">\n<p>Цель этого урока — углубить ваше понимание некоторых основополагающих концепций CSS — каскадов, спецификаций и наследования, — которые контролируют то, как CSS применяется к HTML и как разрешаются конфликты.</p>\n<p>Хотя изучение этого урока может показаться менее актуальным и немного более академичным, чем некоторые другие части курса, понимание этих вещей спасёт вас от головной боли в дальнейшем! Мы рекомендуем вам внимательно изучить этот раздел и убедиться, что вы понимаете концепции, перед тем, как двигаться дальше.</p>\n</div><section aria-labelledby="конфликтующие_правила"><h2 id="конфликтующие_правила"><a>Конфликтующие правила</a></h2><div class="section-content"><p>CSS (Cascading Style Sheets) означает Каскадные Таблицы Стилей и первое слово <em>"каскадные"</em> является невероятно важным для понимания: то, как ведёт себя каскад — ключевой момент в понимании CSS.</p>\n<p>В какой-то момент, работая над проектом, вы обнаружите, что CSS, который, по-вашему, должен быть применён к элементу, не работает. Обычно проблема заключается в том, что вы создали два правила, которые могут потенциально применяться к одному и тому же элементу. <strong>Каскад</strong> и тесно связанная концепция <strong>специфичности</strong> — это механизмы, которые контролируют, какое именно правило применяется, когда имеется такой конфликт. Стиль вашего элемента может определять не то правило, на которое вы рассчитывали, поэтому вам необходимо понимать, как работают эти механизмы.</p>\n<p>Также значимой является концепция <strong>наследования,</strong> которая заключается в том, что некоторые свойства CSS наследуют по умолчанию значения, установленные для родительского элемента текущего элемента, а некоторые не наследуют. Это также может стать причиной поведения, которое вы, возможно, не ожидаете.</p>\n<p>Давайте начнём с краткого обзора ключевых моментов, которых мы касаемся, далее рассмотрим каждый из них по очереди и посмотрим, как они взаимодействуют друг с другом и с вашим CSS. Это может показаться набором сложных для понимания понятий. Однако, когда вы получите больше опыта в написании CSS, для вас станет более очевидным то, как это работает.</p></div></section><section aria-labelledby="каскад"><h3 id="каскад"><a>Каскад</a></h3><div class="section-content"><p>Каскад таблицы стилей, если говорить упрощённо, означает, что порядок следования правил в CSS имеет значение; когда применимы два правила, имеющие одинаковую специфичность, используется то, которое идёт в CSS последним.</p>\n<p>В приведённом ниже примере у нас есть два правила, которые могут применяться к h1. В результате h1 окрасится синим цветом — эти правила имеют идентичный селектор и, следовательно, одинаковую специфичность, поэтому побеждает последний в порядке следования.</p></div></section><section aria-labelledby="специфичность"><h3 id="специфичность"><a>Специфичность</a></h3><div class="section-content"><p>Специфичность определяет, как браузер решает, какое именно правило применяется в случае, когда несколько правил имеют разные селекторы, но, тем не менее, могут быть применены к одному и тому же элементу. <em>Различные типы селекторов ( селекторы элементов <code>h1{...}</code>, селекторы классов, селекторы идентификаторов и т.д ) имеют разной степени влияние на элементы страницы. Чем более общее влияние оказывает селектор на элементы страницы тем меньше его специфичность, конкретность.</em> По существу, это мера того, насколько специфическим будет отбор по селектору:</p>\n<ul>\n  <li>Селектор элементов ( <em>например <code>h1</code></em> ) менее специфичен — он выберет все элементы этого типа на странице — поэтому получит меньше баллов.</li>\n  <li>Селектор класса более специфичен — он выберет только те элементы на странице, которые имеют конкретное значение атрибута <code>class</code> — поэтому получит больше баллов, <em>селектор класса применится после селектора элемента и поэтому перекроет его стили</em>.</li>\n</ul>\n<p>Например. Как указано ниже, у нас опять есть два правила, которые могут применяться к <code>h1</code>. <code>h1</code> в результате будет окрашен красным цветом — селектор класса даёт своему правилу более высокую специфичность, поэтому он будет применён, несмотря на то, что правило для селектора элемента расположено ниже в таблице стилей.</p>\n<p>Позже мы объясним, как сделать оценку специфичности, и прочие детали.</p></div></section><section aria-labelledby="наследование"><h3 id="наследование"><a>Наследование</a></h3><div class="section-content"><p>Наследование также надо понимать в этом контексте — некоторые значения свойства CSS, установленные для родительских элементов наследуются их дочерними элементами, а некоторые нет.</p>\n<p>Например, если вы установили значение <code>color</code> и <code>font-family</code> для элемента, то каждый элемент внутри него также будет иметь этот цвет и шрифт, если только вы не применили к ним напрямую стиль с другим цветом и шрифтом.</p>\n<p>Некоторые свойства не наследуются — например, если вы установили для элемента <a><code>width</code></a> равным 50%, все его дочерние элементы не получат ширину в 50% от ширины своего родительского элемента. Если бы это было так, CSS было бы чрезвычайно трудно использовать!</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> На страницах справочника CSS-свойств вы можете найти окно технической информации, обычно в конце раздела спецификации, в котором перечислены некоторые технические данные об этом свойстве, в том числе наследуется оно или нет. Например, здесь: <a class="only-in-en-us" title="Currently only available in English (US)">color property Specifications section <small>(en-US)<small></small></small></a>.</p>\n</div></div></section><section aria-labelledby="понимание_взаимодействия_этих_концепций"><h2 id="понимание_взаимодействия_этих_концепций"><a>Понимание взаимодействия этих концепций</a></h2><div class="section-content"><p>Эти три концепции вместе определяют, какая CSS применяется и к какому элементу; в следующих разделах мы увидим, как они взаимодействуют. Это может показаться сложным, но вы начнёте лучше понимать их по мере приобретения опыта работы с CSS, и вы всегда можете обратиться к справочной информации, если что-то забыли. Даже опытные разработчики не помнят всех деталей!</p>\n<p>Видео ниже показывает, как вы можете использовать Firefox DevTools для проверки каскада стилей, спецификации, и т.д. на странице:</p></div></section><section aria-labelledby="понимание_наследования"><h2 id="понимание_наследования"><a>Понимание наследования</a></h2><div class="section-content"><p>Итак, наследование. В примере ниже мы имеем <a><code>&lt;ul&gt;</code></a> с двумя уровнями неупорядоченных списков, вложенных в него. Мы установили для внешнего <code>&lt;ul&gt;</code> стиль границы, внутренние отступы и цвет шрифта.</p>\n<p>Цвет шрифта применён к прямому потомку, но также и к непрямому потомку — к прямому потомку <code>&lt;li&gt;</code> и к элементам внутри первого вложенного списка. Далее мы добавили класс <code>special</code> ко второму вложенному списку и применили к нему другой цвет шрифта. Теперь это свойство наследуется всеми его потомками.</p>\n<p>Такие свойства, как ширина (как в примере выше), внутренние и внешние отступы и стиль границы не наследуются. Если бы потомки нашего списка наследовали бы границу, то каждый отдельный список и каждая позиция в списке получили бы такую же границу — вряд ли мы хотели бы получить такой эффект!</p>\n<p>Какие свойства наследуются по умолчанию, а какие нет, чаще всего определяется здравым смыслом.</p></div></section><section aria-labelledby="контроль_наследования"><h3 id="контроль_наследования"><a>Контроль наследования</a></h3><div class="section-content"><p>CSS предоставляет четыре специальных универсальных значения свойства для контроля наследования. Каждое свойство CSS принимает эти значения.</p>\n<dl>\n  <dt id="inherit"><a><code>inherit</code></a></dt>\n  <dd>\n    <p>Устанавливает значение свойства, применённого к элементу, таким же, как у его родительского элемента. Фактически, это "включает наследование".</p>\n  </dd>\n  <dt id="initial"><a><code>initial</code></a></dt>\n  <dd>\n    <p>Устанавливает значение свойства, применённого к выбранному элементу, равным <a>initial value</a> этого свойства (<em>в соответствии с настройками браузера по умолчанию. Если в таблице стилей браузера отсутствует значение этого свойства, оно наследуется естественным образом.)</em></p>\n  </dd>\n  <dt id="unset_en-us"><a class="only-in-en-us" title="Currently only available in English (US)"><code>unset</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Возвращает свойству его естественное значение, что означает, что если свойство наследуется естественным образом, оно действует как <code>inherit</code>, иначе оно действует как <code>initial</code>.</p>\n  </dd>\n</dl>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Существует также более новое значение <a><code>revert</code></a>, которое имеет ограниченную поддержку браузерами.</p>\n</div>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Смотрите <a class="only-in-en-us" title="Currently only available in English (US)">Origin of CSS declarations <small>(en-US)<small></small></small></a> для более подробной информации о каждом из них, и о том, как они работают.</p>\n</div>\n<p>Можно посмотреть список ссылок и изучить, как работают универсальные значения. Пример, следующий ниже, позволяет вам поиграть с CSS и увидеть, что происходит, когда вы вносите изменения. Подобные эксперименты с кодом — лучший способ освоить HTML и CSS.</p>\n<p>Например:</p>\n<ol>\n  <li>Второй элемент списка имеет класс <code>my-class-1</code>. Таким образом, цвет для следующего вложенного элемента <code>a</code> устанавливается по наследству. Как изменится цвет, если это правило будет удалено?</li>\n  <li>Понятно ли, почему третий и четвёртый элементы <code>a</code> имеют именно такой цвет? Если нет, перечитайте описание значений, представленное выше.</li>\n  <li>Какая из ссылок изменит цвет, если вы зададите новый цвет для элемента <code>&lt;a&gt;</code> — например: <code>a { color: red; }</code>?</li>\n</ol></div></section><section aria-labelledby="возврат_всех_исходных_значений_свойств"><h3 id="возврат_всех_исходных_значений_свойств"><a>Возврат всех исходных значений свойств</a></h3><div class="section-content"><p>Стенографическое свойство CSS <code>all</code> можно использовать для того, чтобы присвоить одно из значений наследования к (почти) всем свойствам одновременно. Это одно из четырёх значений (<code>inherit</code>, <code>initial</code>, <code>unset</code>, или <code>revert</code>). Это удобный способ для отмены изменений, внесённых в стили, для того, чтобы вы могли вернуться к стартовой точке перед внесением новых изменений.</p>\n<p>В примере ниже имеются два блока <code>&lt;blockquote&gt;</code>. Первый имеет стиль, который применён к самому элементу <code>blockquote</code>, второй имеет класс <code>fix-this</code>, который устанавливает значение <code>all</code> в <code>unset</code>.</p>\n<p>Попробуйте установить для <code>all</code> ещё одно из доступных значений и исследуйте, в чём заключается разница.</p></div></section><section aria-labelledby="понимание_каскада"><h2 id="понимание_каскада"><a>Понимание каскада</a></h2><div class="section-content"><p>Теперь мы понимаем, почему параграф, следующий по глубине в структуре HTML документа, имеет тот же цвет, что CSS применяет к body, а вводные уроки дали понимание того, как изменить применение CSS к чему-либо в любой точке документа — или назначить CSS элементу, или создать класс. Теперь рассмотрим подробнее то, как каскад определяет выбор CSS-правил, применяемых в случае влияния на стиль элемента нескольких объектов.</p>\n<p>Вот три фактора, перечисленные в порядке возрастания важности. Следующий отменяет предыдущий.</p>\n<ol>\n  <li><strong>Порядок следования</strong></li>\n  <li><strong>Специфичность</strong></li>\n  <li><strong>Важность</strong></li>\n</ol>\n<p>Мы внимательно изучим их, чтобы увидеть, как именно браузеры определяют, какой CSS следует применить.</p></div></section><section aria-labelledby="порядок_следования"><h3 id="порядок_следования"><a>Порядок следования</a></h3><div class="section-content"><p>Мы уже видели, какое значение для каскада имеет порядок следования. Если у вас несколько правил, которые имеют одинаковую важность, то побеждает правило, которое идёт последним в CSS. Другими словами, правила, более близкие к самому элементу, переписывают более ранние, пока последнее не победит, оно и стилизует элемент.</p></div></section><section aria-labelledby="специфичность_2"><h3 id="специфичность_2"><a>Специфичность</a></h3><div class="section-content"><p>Понимая, что порядок следования правил имеет значение, в какой-то момент вы окажетесь в ситуации, когда вы знаете, что правило появляется позже в таблице стилей, но применяется более раннее, конфликтующее правило. Это связано с тем, что более раннее правило имеет более <strong>высокую специфичность</strong> — оно более специфично и поэтому выбирается браузером как правило, которое должно стилизовать элемент.</p>\n<p>Как мы видели ранее в этом уроке, селектор класса имеет больший вес, чем селектор элемента, поэтому свойства, определённые в классе, будут переопределять свойства, применённые непосредственно к элементу.</p>\n<p>Здесь следует отметить, что, хотя мы думаем о селекторах и правилах, применяемых к объекту, который они выбирают, переписывается не всё правило, а только свойства, которые являются одинаковыми.</p>\n<p>Такое поведение помогает избежать повторения в вашем CSS. Обычной практикой является определение общих стилей для базовых элементов, а затем создание классов для тех, которые отличаются. Например, в таблице стилей ниже мы определяем общие стили для заголовков второго уровня, а затем создаём несколько классов, которые изменяют только некоторые свойства и значения. Определённые вначале значения применяются ко всем заголовкам, затем к заголовкам с классами применяются более конкретные значения.</p>\n<p>Давайте теперь посмотрим, как браузер будет вычислять специфичность. Мы уже знаем, что селектор элемента имеет низкую специфичность и может быть перезаписан классом. По существу, значение в баллах присуждается различным типам селекторов, и их сложение даёт вам вес этого конкретного селектора, который затем может быть оценён в сравнении с другими потенциальными соперниками.</p>\n<p>Степень специфичности, которой обладает селектор, измеряется с использованием четырёх различных значений (или компонентов), которые можно представить как тысячи, сотни, десятки и единицы — четыре однозначные цифры в четырёх столбцах:</p>\n<ol>\n  <li><strong>Тысячи</strong>: поставьте единицу в эту колонку, если объявление стиля находится внутри атрибута <a><code>style</code></a> (встроенные стили). Такие объявления не имеют селекторов, поэтому их специфичность всегда просто 1000.</li>\n  <li><strong>Сотни</strong>: поставьте единицу в эту колонку за каждый селектор ID, содержащийся в общем селекторе.</li>\n  <li><strong>Десятки</strong>: поставьте единицу в эту колонку за каждый селектор класса, селектор атрибута или псевдокласс, содержащийся в общем селекторе.</li>\n  <li><strong>Единицы</strong>: поставьте общее число единиц в эту колонку за каждый селектор элемента или псевдоэлемент, содержащийся в общем селекторе.</li>\n</ol>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> Универсальный селектор (*), комбинаторы (+, &gt;, ~, \'\') и псевдокласс отрицания (:not) не влияют на специфичность.</p>\n</div>\n<p>Следующая таблица показывает несколько несвязанных примеров, которые помогут вам разобраться. Посмотрите их все и убедитесь, что вы понимаете, почему они обладают той специфичностью, которую мы им дали. Мы ещё не рассмотрели селекторы детально, но вы можете найти подробную информацию о каждом селекторе в <a>справочнике селекторов</a> MDN.</p>\n\n<p>Прежде чем мы продолжим, давайте посмотрим на пример в действии.</p>\n<p>Так что здесь происходит? Прежде всего, нас интересуют только первые семь правил этого примера, и, как вы заметите, мы включили их значения специфичности в комментарий перед каждым правилом.</p>\n<ul>\n  <li>Первые два правила конкурируют за стилизацию цвета фона ссылки — второе выигрывает и делает фоновый цвет синим, потому что у него есть дополнительный селектор ID в цепочке: его специфичность 201 против 101.</li>\n  <li>Третье и четвёртое правило конкурируют за стилизацию цвета текста ссылки — второе выигрывает и делает текст белым, потому что, хотя у него на один селектор элемента меньше, отсутствующий селектор заменяется на селектор класса, который оценивается в десять вместо единицы. Таким образом, приоритетная специфичность составляет 113 против 104.</li>\n  <li>Правила 5–7 соревнуются за определение стиля границы ссылки при наведении курсора. Шестой селектор со специфичностью 23 явно проигрывает пятому со специфичностью 24 — у него в цепочке на один селектор элемента меньше. Седьмой селектор, однако, превосходит как пятый, так и шестой — он имеет то же количество подселекторов в цепочке, что и пятый, но один элемент заменён селектором класса. Таким образом, приоритетная специфичность 33 против 23 и 24.</li>\n</ul>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> Это был условный пример для более простого усвоения. В действительности, каждый тип селектора имеет собственный уровень специфичности, который не может быть замещён селекторами с более низким уровнем специфичности. Например, <em>миллион</em> соединённых селекторов <strong>класса</strong> не способны переписать правила <em>одного</em> селектора <strong>id</strong>.</p>\n  <p>Более правильный способ вычисления специфичности состоит в индивидуальной оценке уровней специфичности, начиная с наивысшего и продвигаясь к самому нижнему, когда это необходимо. Только когда оценки уровня специфичности совпадают, следует вычислять следующий нижний уровень; в противном случае, вы можете пренебречь селекторами с меньшим уровнем специфичности, поскольку они никогда не смогут преодолеть уровни более высокой специфичности.</p>\n</div></div></section><section aria-labelledby="!important"><h3 id="!important"><a>!important</a></h3><div class="section-content"><p>Существует специальный элемент CSS, который вы можете использовать для отмены всех вышеперечисленных вычислений, однако вы должны быть очень осторожны с его использованием — <code>!important</code>. Он используется, чтобы сделать конкретное свойство и значение самыми специфичными, таким образом переопределяя нормальные правила каскада.</p>\n<p>Взгляните на этот пример, где у нас есть два абзаца, один из которых имеет ID.</p>\n<p>Давайте пройдёмся по этому примеру, чтобы увидеть, что происходит — попробуйте удалить некоторые свойства, чтобы увидеть, что получится, если вам трудно понять:</p>\n<ol>\n  <li>Вы увидите, что применены значения <a class="only-in-en-us" title="Currently only available in English (US)"><code>color</code> <small>(en-US)</small></a> и <a><code>padding</code></a> третьего правила, но <a><code>background-color</code></a> — нет. Почему? Действительно, все три безусловно должны применяться, потому что правила, более поздние в порядке следования, обычно переопределяют более ранние правила.</li>\n  <li>Однако вышеприведённые правила выигрывают, потому что селекторы классов имеют более высокую специфичность, чем селекторы элементов.</li>\n  <li>Оба элемента имеют <a><code>class</code></a> с названием <code>better</code>, но у второго также есть <a><code>id</code></a> с названием <code>winning</code>. Поскольку ID имеют <em>ещё более высокую</em> специфичность, чем классы (у вас может быть только один элемент с каждым уникальным ID на странице, но много элементов с одним и тем же классом — селекторы ID <em>очень специфичны</em>, на что они и нацелены), красный цвет фона и однопиксельная чёрная граница должны быть применены ко 2-му элементу, причём первый элемент получает серый фоновый цвет и отсутствие границы, как определено классом.</li>\n  <li>2-й элемент получил красный цвет фона и отсутствие границы. Почему? Из-за объявления <code>!important</code> во втором правиле — размещение которого после <code>border: none</code> означает, что это объявление перевесит значение границы в предыдущем правиле, даже если ID имеет более высокую специфичность.</li>\n</ol>\n<div class="notecard note" id="sect6">\n  <p><strong>Примечание:</strong> Единственный способ переопределить объявление <code>!important</code> – это включить другое объявление <code>!important</code> в правило <em>с такой же специфичностью</em> позже или в правило с более высокой специфичностью.</p>\n</div>\n<p>Полезно знать о существовании <code>!important</code>, чтобы вы понимали, что это такое, когда встретите в чужом коде. <strong>Тем не менее, мы настоятельно рекомендуем вам никогда не использовать его, если в этом нет острой необходимости.</strong> <code>!important</code> меняет обычный порядок работы каскада, поэтому он может серьёзно затруднить отладку проблем CSS, особенно в большой таблице стилей.</p>\n<p>Одна из ситуаций, в которой вам, возможно, придётся это использовать, — это когда вы работаете с CMS, где вы не можете редактировать модули CSS ядра, и вы действительно хотите переопределить стиль, который нельзя переопределить другим способом. Но, вообще говоря, не стоит использовать этот элемент, если можно этого избежать.</p></div></section><section aria-labelledby="влияние_расположения_css"><h2 id="влияние_расположения_css"><a>Влияние расположения CSS</a></h2><div class="section-content"><p>Наконец, также полезно отметить, что важность объявления CSS зависит от того, в какой таблице стилей оно указано — у пользователя есть возможность установить индивидуальные таблицы стилей для переопределения стилей разработчика, например, пользователь может иметь проблемы со зрением и захочет установить размер шрифта на всех посещаемых им веб-страницах в два раза больше нормального размера, чтобы облегчить чтение.</p></div></section><section aria-labelledby="подведение_итогов"><h2 id="подведение_итогов"><a>Подведение итогов</a></h2><div class="section-content"><p>Конфликтующие объявления будут применяться в следующем порядке, с учётом замены более ранних более поздними:</p>\n<ol>\n  <li>Объявления в таблицах стилей клиентского приложения (например, стили браузера по умолчанию, используемые, когда не заданы другие стили).</li>\n  <li>Обычные объявления в пользовательских таблицах стилей (индивидуальные стили устанавливаются пользователем).</li>\n  <li>Обычные объявления в авторских таблицах стилей (это стили, установленные нами, веб-разработчиками).</li>\n  <li>Важные объявления в авторских таблицах стилей.</li>\n  <li>Важные объявления в пользовательских таблицах стилей.</li>\n</ol>\n<p>Для таблиц стилей веб-разработчиков имеет смысл переопределить пользовательские таблицы стилей так, чтобы можно было сохранить запланированный дизайн, но иногда у пользователей есть веские причины для переопределения стилей веб-разработчика, как упомянуто выше — это может быть достигнуто с помощью использования <code>!important</code> в их правилах.</p></div></section><section aria-labelledby="проверьте_ваши_навыки"><h2 id="проверьте_ваши_навыки"><a>Проверьте ваши навыки</a></h2><div class="section-content"><p>Мы охватили много тем в этой статье. А вы смогли запомнить наиболее важную информацию? Можете пройти несколько дополнительных тестов для того чтобы убедиться в том, что вы усвоили эту информацию, прежде чем пойдёте дальше — смотрите <a>Test your skills: the Cascade</a>.</p></div></section><section aria-labelledby="что_дальше"><h2 id="что_дальше"><a>Что дальше?</a></h2><div class="section-content"><p>Если вы поняли большую часть этой статьи, отлично — вы начали знакомиться с фундаментальными механизмами CSS. Далее мы рассмотрим селекторы подробно.</p>\n<p>Если вы не до конца поняли каскад, специфичность и наследование, не волнуйтесь! Это, безусловно, самая сложная вещь из тех, что мы до сих пор изучали в курсе, и даже профессиональные веб-разработчики иногда считают её коварной. Мы советуем вам вернуться к этой статье несколько раз в ходе изучения курса и продолжать обдумывать эту тему.</p>\n<p>Обратитесь сюда, если вы столкнётесь со странными проблемами, когда стили применяются не так, как вы ожидаете. Это может быть проблемой специфичности.</p></div></section>',
					works: [],
				},
				{
					title: 'Блочная модель',
					chapter: 2.16,
					content:
						'<header><h1>Блочная модель</h1></header><div class="section-content"><p></p>Каждый элемент в CSS заключён в блок, и понимание поведения этих блоков — это ключ к умению задавать раскладку с помощью CSS, то есть выстраивать одни элементы относительно других элементов. В этом уроке мы надлежащим образом рассмотрим <em>блочную модель</em> CSS, чтобы вы могли создавать более сложные раскладки, понимая принцип ее работы и терминологию, которая к ней относится.<p></p>\n</div><section aria-labelledby="блочные_и_строчные_элементы"><h2 id="блочные_и_строчные_элементы"><a>Блочные и строчные элементы</a></h2><div class="section-content"><p>В CSS мы, говоря упрощённо, имеем два типа элементов — <strong>блочные</strong> и <strong>строчные</strong>. Эти характеристики относятся к поведению блоков в контексте потока страницы и относительно других блоков на странице.</p>\n<p>Если элемент определён как блочный, то он будет вести себя следующим образом:</p>\n<ul>\n  <li>Начнётся с новой строки.</li>\n  <li>Будет расширяться вдоль строки таким образом, чтобы заполнить всё пространство, доступное в её контейнере. В большинстве случаев это означает, что блок станет такой же ширины, как и его контейнер, заполняя 100% доступного пространства.</li>\n  <li>Будут применяться свойства <a><code>width</code></a> и <a><code>height</code></a>.</li>\n  <li>Внешние и внутренние отступы, рамка будут отодвигать от него другие элементы.</li>\n</ul>\n<p>Если не изменить намеренно тип отображения на строчный, то такие элементы, как заголовки (например, <code>&lt;h1&gt;</code>) и <code>&lt;p&gt;</code>, все используют <code>block</code> как свой внешний тип отображения по умолчанию.</p>\n<p>Если элемент имеет тип отображения <code>inline</code> (строчный), то:</p>\n<ul>\n  <li>Он не будет начинаться с новой строки.</li>\n  <li>Свойства <a><code>width</code></a> и <a><code>height</code></a> не будут применяться.</li>\n  <li>Вертикальные внешние и внутренние отступы, рамки будут применяться, но не будут отодвигать другие строчные элементы.</li>\n  <li>Горизонтальные внешние и внутренние отступы, рамки будут применяться и будут отодвигать другие строчные элементы.</li>\n</ul>\n<p>Элемент <code>&lt;a&gt;</code>, используемый для ссылок, <code>&lt;span&gt;</code>, <code>&lt;em&gt;</code> и <code>&lt;strong&gt;</code> — всё это примеры по умолчанию строчных элементов.</p>\n<p>Тип отображения, применяемый к элементу, определяется значениями свойства <a><code>display</code></a>, такими как <code>block</code> и <code>inline</code>, и относится к <strong>внешнему</strong> значению <code>display</code>.</p></div></section><section aria-labelledby="экскурс_внутренний_и_внешний_типы_отображения"><h2 id="экскурс_внутренний_и_внешний_типы_отображения"><a>Экскурс: внутренний и внешний типы отображения</a></h2><div class="section-content"><p>Здесь следует объяснить, что такое <strong>внутренние</strong> и <strong>внешние</strong> типы отображения. Как уже говорилось выше, каждый блок в CSS имеет <em>внешний</em> тип отображения, который определяет, блочный он или строчный.</p>\n<p>Элементы также имеют <em>внутренний</em> тип отображения, который определяет расположение элементов внутри них. По умолчанию элементы внутри блока располагаются в <strong><a>нормальном потоке</a></strong>: они ведут себя так же, как и любые другие блочные или строчные элементы (как описано выше).</p>\n<p>Однако мы можем изменить внутренний тип отображения, используя такие значения <code>display</code> как <code>flex</code>. Если мы установим <code>display: flex;</code> для элемента, внешний тип отображения примет значение <code>block</code>, но внутренний тип изменится на <code>flex</code>. Любые прямые дочерние элементы этого блока станут <em>flex</em>-объектами и будут размещены в соответствии с правилами, изложенными в спецификации <a>Flexbox</a>, о которой вы узнаете позже.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Чтобы узнать больше о значениях display, и о том, как работают элементы при блочном или строчном расположении, посмотрите руководство MDN <a class="only-in-en-us" title="Currently only available in English (US)">Блочное и строчное расположение <small>(en-US)<small></small></small></a>.</p>\n</div>\n<p>Когда вы перейдёте к более подробному изучению CSS вёрстки, вы встретите <code>flex</code> и другие внутренние значения, которые могут быть у ваших элементов, например <a><code>grid</code></a>.</p>\n<p>Тем не менее, блочное и строчное расположение — это поведение web-элементов по умолчанию. Как было сказано выше, это иногда называют <em>нормальным потоком (normal flow)</em>, потому что при отсутствии какой-либо другой инструкции элементы имеют блочное или строчное расположение.</p></div></section><section aria-labelledby="примеры_разных_типов_отображения"><h2 id="примеры_разных_типов_отображения"><a>Примеры разных типов отображения</a></h2><div class="section-content"><p>Давайте продолжим и рассмотрим некоторые примеры. Ниже мы имеем три разных элемента HTML с внешним типом отображения <code>block</code>. Первый — это абзац, который имеет обрамление, указанное в CSS. Браузер отображает его как блочный элемент, поэтому абзац начинается с новой строки и расширяется на всю доступную ему ширину.</p>\n<p>Второй — это список, который свёрстан с использованием <code>display: flex</code>. Это устанавливает flex-расположение для элементов внутри контейнера, однако сам список — блочный элемент и — как и абзац — расширяется на всю ширину контейнера и начинается с новой строки.</p>\n<p>Ниже у нас есть абзац блочного типа, внутри которого есть два элемента <code>&lt;span&gt;</code>. Эти элементы по умолчанию имеют тип <code>inline</code>, однако у одного из них задан класс block, для которого мы установили <code>display: block</code>.</p>\n<p>Мы можем видеть, как строчные элементы (<code>inline</code>) ведут себя в следующем примере. Элементы <code>&lt;span&gt;</code> в первом абзаце строчные по умолчанию и поэтому не приводят к переносу строки.</p>\n<p>У нас также есть элемент <code>&lt;ul&gt;</code>, для которого установлено <code>display: inline-flex</code>, что создаёт строчный элемент вокруг нескольких flex-объектов.</p>\n<p>Наконец, у нас есть два абзаца, для которых установлено <code>display: inline</code>. И строчный flex-контейнер, и абзацы располагаются вместе на одной строке, а не начинаются каждый с новой строки, как они отображались бы, будучи блочными элементами.</p>\n<p><strong>В примере вы можете заменить <code>display: inline</code> на <code>display: block</code> или <code>display: inline-flex</code> на <code>display: flex</code> для переключения между этими двумя режимами отображения.</strong></p>\n<p>Позже в этих уроках вы встретите такое понятие как flex-раскладка; главное, что нужно запомнить сейчас, это то, что изменение значения свойства <code>display</code> может изменить внешний тип отображения элемента на блочный или строчный, что меняет способ его отображения относительно других элементов в раскладке страницы.</p>\n<p>В оставшейся части урока мы сосредоточимся на внешнем типе отображения.</p></div></section><section aria-labelledby="что_такое_блочная_модель_css"><h2 id="что_такое_блочная_модель_css"><a>Что такое блочная модель CSS?</a></h2><div class="section-content"><p>Полностью блочная модель в CSS применяется к блочным элементам, строчные элементы используют не все свойства, определённые блочной моделью. Модель определяет, как разные части элемента — поля, рамки, отступы и содержимое — работают вместе, чтобы создать объект, который вы можете увидеть на странице. Дополнительная сложность заключается в том, что существуют стандартная и альтернативная блочные модели.</p></div></section><section aria-labelledby="составляющие_элемента"><h3 id="составляющие_элемента"><a>Составляющие элемента</a></h3><div class="section-content"><p>Составляя блочный элемент в CSS мы имеем:</p>\n<ul>\n  <li><strong>Содержимое</strong>: область, где отображается ваш контент, размер которой можно изменить с помощью таких свойств, как <a><code>width</code></a> и <a><code>height</code></a>.</li>\n  <li><strong>Внутренний отступ</strong>: отступы располагаются вокруг содержимого в виде пустого пространства; их размер контролируется с помощью <a><code>padding</code></a> и связанных свойств.</li>\n  <li><strong>Рамка</strong>: рамка оборачивает содержимое и внутренние отступы. Её размер и стиль можно контролировать с помощью <a><code>border</code></a> и связанных свойств.</li>\n  <li><strong>Внешний отступ</strong>: внешний слой, заключающий в себе содержимое, внутренний отступ и рамки, представляет собой пространство между текущим и другими элементами. Его размер контролируется с помощью <a><code>margin</code></a> и связанных свойств.</li>\n</ul>\n<p>Рисунок ниже показывает эти слои:</p>\n<p>\n  \n</p></div></section><section aria-labelledby="стандартная_блочная_модель_css"><h3 id="стандартная_блочная_модель_css"><a>Стандартная блочная модель CSS</a></h3><div class="section-content"><p>В стандартной блочной модели, если указать элементу атрибуты <code>width</code> и <code>height</code>, это определит ширину и высоту <em>содержимого</em>. Любые отступы и рамки затем добавляются к этой ширине и высоте для получения общего размера элемента. Это показано на изображении ниже.</p>\n<p>Предположим, что в элементе есть следующий CSS определяющий <code>width</code>, <code>height</code>, <code>margin</code>, <code>border</code>, и <code>padding</code>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.box {\n  width: 350px;\n  height: 150px;\n  margin: 10px;\n  padding: 25px;\n  border: 5px solid black;\n}\n</pre></div>\n<p>Пространство, занимаемое нашим объектом с использованием стандартной блочной модели, на самом деле будет равно 410px в ширину (350 + 25 + 25 + 5 + 5) и 210px в высоту (150 + 25 + 25 + 5 + 5), поскольку отступы и рамки добавляются к размерам поля содержимого.</p>\n<p>\n  \n</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Внешний отступ не считается в фактическом размере объекта. Конечно, он влияет на общее пространство, занимаемое объектом на странице, но только на внешнюю часть. Область элемента заканчивается на рамке — она не распространяется за нее.</p>\n</div></div></section><section aria-labelledby="альтернативная_блочная_модель_css"><h3 id="альтернативная_блочная_модель_css"><a>Альтернативная блочная модель CSS</a></h3><div class="section-content"><p>Вы можете подумать, что довольно неудобно добавлять рамки и отступы, чтобы получить реальный размер элемента, и окажетесь правы! По этой причине, спустя некоторое время после стандартной блочной модели, в CSS была введена альтернативная блочная модель. При использовании альтернативной модели любая ширина — это ширина видимой части элемента на странице, поэтому ширина области содержимого будет равна общей ширине минус ширина рамки и внутреннего отступа. Тот же CSS, который использовался выше, даст следующий результат (ширина = 350px, высота = 150px).</p>\n<p>\n  \n</p>\n<p>По умолчанию браузеры используют стандартную блочную модель. Если вы хотите использовать альтернативную блочную модель для элемента, установите для него свойство <code>box-sizing: border-box</code>. С помощью этого вы говорите браузеру о том, что рамка элемента определяется любыми размерами, которые вы устанавливаете.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.box {\n  box-sizing: border-box;\n}\n</pre></div>\n<p>Если вы хотите, чтобы все ваши элементы использовали альтернативную блочную модель, что является распространённым выбором среди разработчиков, установите свойство <code>box-sizing</code> для элемента <code>&lt;html&gt;</code>, затем задайте всем элементам наследование этого значения (inherit), как показано в примере ниже. Если вы хотите понять ход мыслей, стоящий за этим решением, читайте статью <a class="external" target="_blank">the CSS Tricks article on box-sizing</a>.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">html {\n  box-sizing: border-box;\n}\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n</pre></div>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Интересный факт — Internet Explorer по умолчанию использовал альтернативную блочную модель без доступного механизма для переключения.</p>\n</div></div></section><section aria-labelledby="играем_с_блочными_моделями"><h2 id="играем_с_блочными_моделями"><a>Играем с блочными моделями</a></h2><div class="section-content"><p>В примере ниже, вы можете видеть 2 объекта. Оба имеют класс <code>.box</code>, который даёт им одинаковые параметры <code>width</code>, <code>height</code>, <code>margin</code>, <code>border</code>, и <code>padding</code>. Единственное различие в том, что второй объект объявлен по альтернативной блочной модели.</p>\n<p><strong>Можете ли вы изменить размер второго объекта (добавляя CSS в класс <code>.alternate)</code> чтобы ширина и высота совпали с первым блоком?</strong></p>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> вы можете найти решение этой задачи <a class="external" target="_blank">здесь</a>.</p>\n</div></div></section><section aria-labelledby="использование_инструментов_разработчика_в_браузере_для_просмотра_блочных_моделей"><h3 id="использование_инструментов_разработчика_в_браузере_для_просмотра_блочных_моделей"><a>Использование инструментов разработчика в браузере для просмотра блочных моделей</a></h3><div class="section-content"><p><a>Инструменты разработчика</a> вашего браузера могут значительно облегчить понимание блочной модели. Если вы проверите элемент в инструментах разработчика Firefox, вы можете увидеть его размер, а также внешний и внутренний отступы и рамку. Проверка элемента таким способом — отличный способ выяснить, действительно ли размер вашего блока такой, какой вы думаете!</p>\n<p>\n  \n</p></div></section><section aria-labelledby="внешние_внутренние_отступы_и_рамки"><h2 id="внешние_внутренние_отступы_и_рамки"><a>Внешние, внутренние отступы и рамки</a></h2><div class="section-content"><p>Вы уже видели свойства <a><code>margin</code></a>, <a><code>padding</code></a> и <a><code>border</code></a> в работе в приведённом выше примере. Используемые в этом примере свойства — <strong>сокращённые</strong> и позволяют нам устанавливать все четыре стороны блока одновременно. У них также есть эквивалентные полные свойства, которые позволяют индивидуально управлять разными сторонами блока.</p>\n<p>Давайте рассмотрим эти свойства более подробно.</p></div></section><section aria-labelledby="внешний_отступ_margin"><h3 id="внешний_отступ_margin"><a>Внешний отступ (margin)</a></h3><div class="section-content"><p>Внешний отступ — это невидимое пространство вокруг вашего элемента. Оно отталкивает другие элементы от него. Внешний отступ может быть как положительным, так и отрицательным. Негативное значение может привести к перекрытию некоторых элементов страницы. Независимо от того, используете ли вы стандартную или альтернативную блочную модель, внешний отступ всегда добавляется после расчёта размера видимого блока.</p>\n<p>Мы можем контролировать все поля элемента сразу, используя свойство <a><code>margin</code></a>, или каждую сторону индивидуально, используя эквивалентные полные свойства:</p>\n<ul>\n  <li><a><code>margin-top</code></a></li>\n  <li><a><code>margin-right</code></a></li>\n  <li><a><code>margin-bottom</code></a></li>\n  <li><a><code>margin-left</code></a></li>\n</ul>\n<p><strong>В примере ниже, попробуйте изменить значение margin чтобы увидеть как блок смещается, создавая или удаляя пространство (если вводить отрицательные значения margin) между этим элементом и элементом его содержащим.</strong></p>\n<h4 id="схлопывание_внешних_отступов">Схлопывание внешних отступов</h4>\n<p>Ключевой момент, который нужно понимать в отношении внешних отступов (margin), это концепция схлопывания. Если у вас есть два элемента, внешние отступы которых соприкасаются, и оба значения margin положительные, то эти значения будут объединены в одно, равное большему из двух значений. А если одно или оба значения отрицательны, то сумма отрицательных значений будет вычтена из общей суммы.</p>\n<p>В примере ниже есть два абзаца. Первому абзацу задан <code>margin-bottom</code> 50 пикселей. У второго абзаца <code>margin-top</code> 30 пикселей. Отступы схлопываются так, что в результате margin между двумя блоками составляет 50 пикселей, а не сумму отдельных значений margin.</p>\n<p><strong>Вы можете проверить это, установив второму абзацу <code>margin-top</code> равный 0. Видимое расстояние между двумя абзацами не изменится — отступ остаётся равен 50 пикселям, заданным в <code>margin-bottom</code> первого абзаца. Если вы установите значение -10px, то увидите, что margin становится 40px — происходит вычитание из положительного значения 50px у первого абзаца.</strong></p>\n<p>Существует ряд правил, которые определяют, когда внешние отступы схлопываются, а когда нет. Для получения подробной информации см. <a>margin collapsing</a>. Главное, что нужно сейчас помнить, — это то, что схлопывание отступов существует. Если вы создаёте пространство с внешними отступами и не получаете ожидаемого результата, вероятно, именно это и происходит.</p></div></section><section aria-labelledby="рамка"><h3 id="рамка"><a>Рамка</a></h3><div class="section-content"><p>Рамка располагается между margin и padding блочного элемента. Если вы используете стандартную блочную модель, размер рамки прибавляется к значениям <code>width</code> и <code>height</code> элемента. Если вы используете альтернативную блочную модель, то размер рамки уменьшает поле контента своего блока, так как значения рамки входят в заданные ему <code>width</code> и <code>height</code>.</p>\n<p>Для стилизации рамок существует большое количество различных свойств: четыре рамки, и каждая из них имеет свой стиль, ширину и цвет, которыми мы можем манипулировать.</p>\n<p>Вы можете установить ширину, стиль или цвет всех четырёх рамок сразу, используя свойство <a><code>border</code></a>.</p>\n<p>Чтобы установить индивидуальные свойства для каждой из четырёх сторон, вы можете использовать:</p>\n<ul>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>border-top</code> <small>(en-US)</small></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>border-right</code> <small>(en-US)</small></a></li>\n  <li><a><code>border-bottom</code></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>border-left</code> <small>(en-US)</small></a></li>\n</ul>\n<p>Для установки ширины, стиля или цвета всех рамок используйте:</p>\n<ul>\n  <li><a><code>border-width</code></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>border-style</code> <small>(en-US)</small></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>border-color</code> <small>(en-US)</small></a></li>\n</ul>\n<p>Чтобы установить ширину, стиль или цвет для каждой рамки индивидуально, вы можете использовать следующие свойства:</p>\n<ul>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>border-top-width</code> <small>(en-US)</small></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>border-top-style</code> <small>(en-US)</small></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>border-top-color</code> <small>(en-US)</small></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>border-right-width</code> <small>(en-US)</small></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>border-right-style</code> <small>(en-US)</small></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>border-right-color</code> <small>(en-US)</small></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>border-bottom-width</code> <small>(en-US)</small></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>border-bottom-style</code> <small>(en-US)</small></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>border-bottom-color</code> <small>(en-US)</small></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>border-left-width</code> <small>(en-US)</small></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>border-left-style</code> <small>(en-US)</small></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>border-left-color</code> <small>(en-US)</small></a></li>\n</ul>\n<p><strong>В примере ниже мы использовали различные сокращённые и полные способы создания рамок. Поиграйте с различными свойствами, чтобы проверить, как вы поняли принципы их работы. Информацию о различных стилях, которые вы можете использовать, можно найти на страницах MDN о свойствах рамок.</strong></p></div></section><section aria-labelledby="внутренний_отступ_padding"><h3 id="внутренний_отступ_padding"><a>Внутренний отступ (padding)</a></h3><div class="section-content"><p>Внутренний отступ расположен между рамкой и областью контента блока. В отличии от внешних отступов (margin), вы не можете использовать отрицательные значения для padding: они должны быть положительными или равными 0. Любой применённый к вашим элементам фон будет отображаться под областью padding, поэтому внутренний отступ обычно используется, чтобы отодвинуть контент от рамок.</p>\n<p>Вы можете контролировать значение padding для всех сторон элемента, используя свойство <a><code>padding</code></a>, или для каждой стороны индивидуально, используя следующие полные свойства:</p>\n<ul>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>padding-top</code> <small>(en-US)</small></a></li>\n  <li><a><code>padding-right</code></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>padding-bottom</code> <small>(en-US)</small></a></li>\n  <li><a><code>padding-left</code></a></li>\n</ul>\n<p><strong>Если вы измените значения padding для класса <code>.box</code> в примере ниже, то увидите, что это изменяет положение текста внутри элемента.</strong></p>\n<p><strong>Вы также можете изменить padding для класса <code>.container</code>, который задаёт отступ между контейнером и блоком. Внутренний отступ может быть изменён для любого элемента и создаст пространство между его рамкой и содержимым.</strong></p></div></section><section aria-labelledby="блочная_модель_и_строчные_элементы"><h2 id="блочная_модель_и_строчные_элементы"><a>Блочная модель и строчные элементы</a></h2><div class="section-content"><p>Всё, сказанное ранее, полностью применимо к блочным элементам. Некоторые из свойств могут быть также применены и к строчным (inline) элементам, например к <code>&lt;span&gt;</code>.</p>\n<p>В приведённом ниже примере у нас есть <code>&lt;span&gt;</code> внутри абзаца, и мы применили к нему <code>width</code>, <code>height</code>, <code>margin</code>, <code>border</code> и <code>padding</code>. Вы можете видеть, что ширина и высота игнорируются. Вертикальные внешние и внутренние отступы и рамки применены, но они не изменяют положение других элементов относительно нашего строчного элемента, и поэтому отступы и рамка перекрывают другие слова в абзаце. Горизонтальные внешние и внутренние отступы и рамки применены и заставляют другие элементы отодвинуться от нашего.</p></div></section><section aria-labelledby="использование_display_inline-block"><h2 id="использование_display_inline-block"><a>Использование display: inline-block</a></h2><div class="section-content"><p>Существует особое значение <code>display</code>, которое представляет собой золотую середину между <code>inline</code> и <code>block</code>. Это полезно в ситуациях, когда вы не хотите, чтобы элемент переносился на новую строку, но нужно, чтобы он применял <code>width</code> и <code>height</code> и избегал перекрытия, показанного выше.</p>\n<p>Элемент с <code>display: inline-block</code> применяет ряд свойств блочного элемента, о которых мы уже знаем:</p>\n<ul>\n  <li>Применяются свойства <code>width</code> и <code>height</code>.</li>\n  <li>Использование <code>padding</code>, <code>margin</code> и <code>border</code> приведёт к тому, что другие элементы будут отодвинуты от нашего элемента.</li>\n</ul>\n<p>Он не перенесётся на новую строку и станет больше, чем его содержимое, только если вы явно зададите свойства <code>width</code> и <code>height</code>.</p>\n<p><strong>В следующем примере мы добавили <code>display: inline-block</code> к нашему элементу <code>&lt;span&gt;</code>. Попробуйте изменить значение свойства на <code>display: block</code> или полностью удалить строку, чтобы увидеть разницу.</strong></p>\n<p>Это может быть полезно, когда вы хотите создать ссылку с большой областью попадания, добавив <code>padding</code>. <code>&lt;a&gt;</code> — это строчный элемент, такой же как <code>&lt;span&gt;</code>; вы можете использовать <code>display: inline-block</code>, чтобы разрешить применение отступов, что упростит пользователю переход по ссылке.</p>\n<p>Довольно часто это можно увидеть в панелях навигации. Приведённая ниже навигация отображается в виде строки с использованием flexbox, и мы добавили отступы к элементу <code>&lt;a&gt;</code>, потому что хотим, чтобы <code>background-color</code> изменялся при наведении курсора на <code>&lt;a&gt;</code>. Отступы перекрывают рамку элемента <code>&lt;ul&gt;</code>. Это происходит потому, что <code>&lt;a&gt;</code> — строчный элемент.</p>\n<p><strong>Добавьте в правило <code>display: inline-block</code> с помощью селектора <code>.links-list a</code>, и вы увидите, как он решает эту проблему, заставляя другие элементы соблюдать отступы.</strong></p></div></section><section aria-labelledby="проверьте_свои_навыки!"><h2 id="проверьте_свои_навыки!"><a>Проверьте свои навыки!</a></h2><div class="section-content"><p>В этой статье мы многое рассмотрели, но получится ли у вас вспомнить самую важную информацию? Вы можете пройти дополнительные тесты, чтобы убедиться, что вы всё усвоили, прежде чем двигаться дальше — см. <a class="only-in-en-us" title="Currently only available in English (US)">Проверка своих навыков: блочная модель <small>(en-US)<small></small></small></a>.</p></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Это большая часть того, что вам нужно знать о блочной модели. Возможно, вы захотите вернуться к этому уроку в будущем, если когда-нибудь обнаружите, что не понимаете, насколько велики блоки в вашей раскладке на странице.</p>\n<p>В следующем уроке мы рассмотрим, как можно использовать <a>фон и рамки</a>, чтобы сделать ваши простые блоки более интересными.</p></div></section>',
					works: [],
				},
				{
					title: 'Фон и границы',
					chapter: 2.17,
					content:
						'<header><h1>Фон и границы</h1></header><div class="section-content">\n<p>В этом уроке мы рассмотрим некоторые интересные возможности, которые вы можете сделать с помощью CSS-свойств фона и границ . Благодаря добавлению градиентов, фоновых изображений и закруглённых углов свойства фона и границ ответят на многие вопросы стилизации в CSS.</p>\n</div><section aria-labelledby="стилизация_фона_в_css"><h2 id="стилизация_фона_в_css"><a>Стилизация фона в CSS</a></h2><div class="section-content"><p>CSS-свойство <a><code>background</code></a> является сокращением для ряда полных свойств фона, с которыми мы познакомимся в этом уроке. Если вы обнаружите сложное свойство <code>background</code> в таблице стилей, это может показаться трудным для понимания, так как одновременно может быть передано так много значений.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.box {\n  background:\n    linear-gradient(\n        105deg,\n        rgba(255, 255, 255, 0.2) 39%,\n        rgba(51, 56, 57, 1) 96%\n      ) center center / 400px 200px no-repeat,\n    url(big-star.png) center no-repeat,\n    rebeccapurple;\n}\n</pre></div>\n<p>Мы вернёмся к тому, как работает сокращение позже, а пока давайте взглянем на различные вещи, которые вы можете делать с фоном в CSS, посмотрев на отдельные свойства <code>background</code>.</p></div></section><section aria-labelledby="фоновый_цвет"><h3 id="фоновый_цвет"><a>Фоновый цвет</a></h3><div class="section-content"><p>Свойство <a><code>background-color</code></a> определяет цвет фона для любого элемента в CSS. Свойство принимает любой допустимый цвет <a><code>&lt;color&gt;</code></a>. <code>background-color</code> распространяется на сам контент и отступы от него (padding).</p>\n<p>В приведённом ниже примере мы использовали различные значения цвета, чтобы добавить цвет фона к блоку, заголовку и элементу <a><code>&lt;span&gt;</code></a>.</p>\n<p><strong>Поиграйте с ними, используя любое доступное значение</strong> <strong><a>&lt;color&gt;</a>.</strong></p></div></section><section aria-labelledby="фоновое_изображение"><h3 id="фоновое_изображение"><a>Фоновое изображение</a></h3><div class="section-content"><p>Свойство <a><code>background-image</code></a> позволяет отображать изображение в качестве фона элемента. В приведённом ниже примере у нас есть два блока — в одном фоновое изображение больше, чем размеры блока, а в другом - маленькое изображение звезды.</p>\n<p>Этот пример демонстрирует две особенности фоновых изображений. По умолчанию большое изображение не масштабируется до размера блока, поэтому мы видим только его небольшой угол, в то время как маленькое изображение повторяется, чтобы заполнить весь блок. В нашем случае фактически было использовано изображение одной маленькой звезды.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> <strong>Если кроме фонового изображения вы добавили фоновый цвет, то изображение будет отображаться над цветом.</strong> Попробуйте добавить свойство <code>background-color</code> в приведённый выше пример, чтобы увидеть это в действии.</p>\n</div>\n<h4 id="свойство_background-repeat">Свойство background-repeat</h4>\n<p>Свойство <a><code>background-repeat</code></a> используется для управления повторениями фонового изображения. Доступные значения:</p>\n<ul>\n  <li><code>no-repeat</code> — останавливает повторение фонового изображения во всех направлениях.</li>\n  <li><code>repeat-x</code> — повторение фонового изображения по горизонтали.</li>\n  <li><code>repeat-y</code> — повторение фонового изображения по вертикали.</li>\n  <li><code>repeat</code> — повторение фонового изображения в обоих направлениях. Установлено по умолчанию.</li>\n</ul>\n<p><strong>Попробуйте эти значения в примере ниже. Мы установили значение <code>no-repeat</code>, поэтому вы видите только одну звезду. Попробуйте разные значения -</strong> <strong><code>repeat-x</code></strong> <strong>и</strong> <strong><code>repeat-y</code></strong> <strong>—</strong> <strong>чтобы увидеть, какие эффекты они оказывают.</strong></p>\n<h4 id="изменение_размеров_фонового_изображения">Изменение размеров фонового изображения</h4>\n<p>В приведённом выше примере у нас есть большое изображение, которое в конечном итоге было обрезано, так как оно больше, чем элемент, фоном которого оно является. В этом случае мы могли бы использовать свойство <a><code>background-size</code></a>, которое может принимать значения <a>длины</a> или в <a>процентах</a>, чтобы размер изображения соответствовал размеру фона.</p>\n<p>Вы также можете использовать ключевые слова:</p>\n<ul>\n  <li><code>cover</code> — браузер сделает изображение достаточно большим, чтобы оно полностью заполнило блок, сохраняя при этом соотношение сторон. В этом случае часть изображения, скорее всего, окажется за пределами блока.</li>\n  <li><code>contain</code> — браузер сделает изображение нужного размера, чтобы поместиться в блоке. В этом случае могут появиться пробелы с обеих сторон или сверху и снизу изображения, если соотношение сторон изображения отличается от соотношения сторон блока.</li>\n</ul>\n<p>Ниже я применил значения длины к размерам изображения. Глядите, как это исказило изображение.</p>\n<p>В приведённом ниже примере я использовал большое изображение из ранее рассмотренного примера и указал значения длины, чтобы определить его размер внутри блока. Вы можете посмотреть, как это исказило изображение.</p>\n<p>Попробуйте следующее.</p>\n<ul>\n  <li>Измените значения длины, используемые для изменения размера фона.</li>\n  <li>Измените значение длины на <code>background-size: cover</code> или <code>background-size: contain</code>.</li>\n  <li>Если ваше изображение меньше размеров блока, вы можете изменить значение свойства <code>background-repeat</code>, чтобы повторить изображение.</li>\n</ul>\n<h4 id="позиционирование_фонового_изображения">Позиционирование фонового изображения</h4>\n<p>Свойство <a><code>background-position</code></a> позволяет вам изменять позицию, в которой фоновое изображение появляется в блоке. При этом используется система координат, в которой <em>левый верхний угол</em> блока равен <code>(0,0)</code>, а сам блок располагается вдоль горизонтальной (<code>x</code>) и вертикальной (<code>y</code>) осей.</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> По умолчанию значение <code>background-position</code> равно <code>(0,0)</code>.</p>\n</div>\n<p>Обычно свойство <code>background-position</code> задают в виде двух последовательных значений — значение по горизонтали, за которым следует значение по вертикали.</p>\n<p>Вы можете использовать такие ключевые слова, как <code>top</code> и <code>right</code> (с остальными можете ознакомиться на странице <a><code>background-position</code></a>):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.box {\n  background-image: url(star.png);\n  background-repeat: no-repeat;\n  background-position: top center;\n}\n</pre></div>\n<p>Допустимы значения <a>длины</a> и <a>процентные</a>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.box {\n  background-image: url(star.png);\n  background-repeat: no-repeat;\n  background-position: 20px 10%;\n}\n</pre></div>\n<p>Вы также можете смешивать значения ключевых слов с длинами или процентами, например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.box {\n  background-image: url(star.png);\n  background-repeat: no-repeat;\n  background-position: top 20px;\n}\n</pre></div>\n<p>И наконец, вы также можете использовать синтаксис с четырьмя значениями, чтобы указать расстояние от определённых краёв блока - единица длины в данном случае представляет собой смещение от значения ключевого слова. Итак, в CSS ниже мы сместили фон на 20 пикселей сверху и на 10 пикселей справа:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.box {\n  background-image: url(star.png);\n  background-repeat: no-repeat;\n  background-position: top 20px right 10px;\n}\n</pre></div>\n<p><strong>Используйте приведённый ниже пример, чтобы поэкспериментировать с этими значениями и переместить звезду внутри блока.</strong></p>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> <code>background-position</code> — это сокращение для <a><code>background-position-x</code></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>background-position-y</code> <small>(en-US)</small></a>, которые позволяют вам устанавливать различные значения положения по оси индивидуально.</p>\n</div></div></section><section aria-labelledby="градиент_в_качестве_фона"><h3 id="градиент_в_качестве_фона"><a>Градиент в качестве фона</a></h3><div class="section-content"><p>Градиент - при использовании для фона - действует так же, как изображение, и поэтому задаётся свойством <a><code>background-image</code></a>.</p>\n<p>Вы можете прочитать больше о различных типах градиентов и о том, что вы можете с ними делать на странице MDN для типа данных <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;gradient&gt;</code> <small>(en-US)<small></small></small></a>. Поиграть с градиентами вы можете используя один из многих генераторов градиентов CSS, доступных в Интернете, например <a class="external" target="_blank">этот</a>. Вы можете создать градиент, а затем скопировать и вставить его в свой код.</p>\n<p>Попробуйте использовать разные градиенты в примере ниже. В двух блоках соответственно у нас есть линейный градиент, растянутый на весь блок, и радиальный градиент с заданным размером, который поэтому повторяется.</p></div></section><section aria-labelledby="несколько_фоновых_изображений"><h3 id="несколько_фоновых_изображений"><a>Несколько фоновых изображений</a></h3><div class="section-content"><p>Также возможно создавать несколько фоновых изображений — просто разделив значения свойства <code>background-image</code> запятыми.</p>\n<p>Когда вы сделаете это, произойдёт наложение фоновых изображений друг на друга. Фоновые изображения будут наложены слоями, где каждое новое фоновое изображение, перечисленное в коде, будет накладываться поверх ранее указанного изображения.</p>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> Градиенты можно легко смешивать с обычными фоновыми изображениями.</p>\n</div>\n<p>Другие свойства <code>background- *</code> также могут иметь значения, разделённые запятыми, как и <code>background-image</code>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">background-image: url(image1.png), url(image2.png), url(image3.png),\n  url(image1.png);\nbackground-repeat: no-repeat, repeat-x, repeat;\nbackground-position:\n  10px 20px,\n  top right;\n</pre></div>\n<p>Каждое значение различных свойств будет соответствовать значениям в той же позиции в других свойствах. Выше, например, значение <code>background-repeat</code> для <code>image1</code> будет <code>no-repeat</code>. Однако, что происходит, когда разные свойства имеют разное количество значений? Ответ заключается в том, что меньшее количество значений будет циклически повторяться - в приведённом выше примере есть четыре фоновых изображения, и только два значения <code>background-position</code>. Первые два значения позиции будут применены к первым двум изображениям, затем они снова будут циклически повторяться - <code>image3</code> будет присвоено первое значение позиции, а <code>image4</code> будет присвоено второе значение позиции.</p>\n<p><strong>Поиграем? В приведённом ниже примере я добавил два изображения. Чтобы продемонстрировать порядок наложения, попробуйте поменять порядок фоновых изображений в списке. Или поиграйте с другими свойствами, чтобы изменить положение, размер или повторяемость значений.</strong></p></div></section><section aria-labelledby="закрепление_фона"><h3 id="закрепление_фона"><a>Закрепление фона</a></h3><div class="section-content"><p>Другая опция, которую можно применить к фону, - это указать, как он будет прокручиваться при прокрутке содержимого. Это контролируется с помощью свойства <a><code>background-attachment</code></a>, которое может принимать следующие значения:</p>\n<ul>\n  <li><code>scroll</code>: Заставляет элементы фона прокручиваться при прокрутке страницы. Если содержимое элемента прокручивается, фон не перемещается. Фактически, фон фиксируется в той же позиции на странице, поэтому он прокручивается по мере прокрутки страницы.</li>\n  <li><code>fixed</code>: Фиксирует элементы фона в области просмотра, чтобы он не прокручивался при прокрутке страницы или содержимого элемента. Фон всегда будет оставаться на одном и том же месте на экране.</li>\n  <li><code>local</code>: Это значение было добавлено позже (оно поддерживается только в Internet Explorer 9+, тогда как другие поддерживаются в IE4+), потому что значение <code>scroll</code> довольно запутанно и во многих случаях действительно не делает то, что вы хотите. Значение <code>local</code> фиксирует фон для элемента, к которому он применён, поэтому, когда вы прокручиваете элемент, фон прокручивается вместе с ним.</li>\n</ul>\n<p>Свойство <a><code>background-attachment</code></a> действует только тогда, когда есть контент для прокрутки, поэтому мы сделали пример, чтобы продемонстрировать различия между тремя значениями - взгляните на <a class="external" target="_blank">background-attachment.html</a> (также смотри <a class="external" target="_blank">исходный код</a> здесь).</p></div></section><section aria-labelledby="использование_сокращённого_свойства_background"><h3 id="использование_сокращённого_свойства_background"><a>Использование сокращённого свойства background</a></h3><div class="section-content"><p>Как я упоминал в начале этого урока, вы часто будете видеть фон, заданный с помощью свойства <a><code>background</code></a>. Это сокращение позволяет вам одновременно устанавливать все различные свойства.</p>\n<p>При использовании нескольких фонов необходимо указать все свойства для первого фона, а затем добавить следующий фон после запятой. В приведённом ниже примере у нас есть градиент с размером и положением, затем фоновое изображение со значением <code>no-repeat</code> и положением, затем цвет.</p>\n<p>При записи сокращённых значений фонового изображения необходимо соблюдать несколько правил, например:</p>\n<ul>\n  <li><code>background-color</code> можно указывать только после последней запятой.</li>\n  <li>Значения <code>background-size</code> могут быть включены только сразу после <code>background-position</code>, разделённые символом \'/\', например: <code>center/80%</code>.</li>\n</ul>\n<p>Посетите страницу MDN свойства <a><code>background</code></a>, чтобы увидеть полное описание.</p></div></section><section aria-labelledby="доступность_просмотра"><h3 id="доступность_просмотра"><a>Доступность просмотра</a></h3><div class="section-content"><p>Помещая текст поверх фонового изображения или цвета, вы должны позаботиться о том, чтобы у вас было достаточно контраста, чтобы текст был читаемым для посетителей вашего сайта. Если указывается изображение, и текст будет помещён поверх этого изображения, вы также должны указать <code>background-color</code>, который позволит тексту быть разборчивым, если изображение не загружается.</p>\n<p>Программы чтения с экрана не могут анализировать фоновые изображения, поэтому они должны быть чисто декоративными; любой важный контент должен быть частью HTML-страницы, а не находиться в фоне.</p></div></section><section aria-labelledby="границы"><h2 id="границы"><a>Границы</a></h2><div class="section-content"><p>Изучая Блочную модель, мы обнаружили, как границы влияют на размер нашего блока. В этом уроке мы рассмотрим, как творчески использовать границы. Обычно, когда мы добавляем границы к элементу с помощью CSS, мы используем сокращённое свойство, которое устанавливает цвет, ширину и стиль границы в одной строке CSS.</p>\n<p>Мы можем установить границу для всех четырёх сторон блока с помощью <a><code>border</code></a>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.box {\n  border: 1px solid black;\n}\n</pre></div>\n<p>Или мы можем нацеливаться на один край блока, например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.box {\n  border-top: 1px solid black;\n}\n</pre></div>\n<p>Индивидуальные свойства этих сокращений будут следующими:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.box {\n  border-width: 1px;\n  border-style: solid;\n  border-color: black;\n}\n</pre></div>\n<p>И более детально:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.box {\n  border-top-width: 1px;\n  border-top-style: solid;\n  border-top-color: black;\n}\n</pre></div>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> Свойства границ top, right, bottom, и left также имеют сопоставленные <em>логические</em> свойства, которые относятся к режиму написания документа (например, текст слева направо, справа налево или сверху вниз). Мы рассмотрим их в следующем уроке, который касается <a class="page-not-created" title="This is a link to an unwritten page">работы с разными направлениями текста</a>.</p>\n</div>\n<p><strong>Есть множество стилей, которые вы можете использовать для границ. В приведённом ниже примере мы использовали разные стили границ для четырёх сторон моего блока. Поиграйте со стилем, шириной и цветом границы, чтобы увидеть, как они работают.</strong></p></div></section><section aria-labelledby="закруглённые_углы"><h3 id="закруглённые_углы"><a>Закруглённые углы</a></h3><div class="section-content"><p>Закругление углов блока достигается с помощью свойства <a><code>border-radius</code></a> и связанных свойств, которые относятся к каждому углу блока. В качестве значения могут использоваться два значения длины или процента: первое значение определяет горизонтальный радиус, а второе - вертикальный радиус. Чаще задают только одно значение, которое используется для обоих.</p>\n<p>Например, чтобы сделать все четыре угла блока радиусом 10px:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.box {\n  border-radius: 10px;\n}\n</pre></div>\n<p>Или, чтобы верхний правый угол имел горизонтальный радиус 1em и вертикальный радиус 10%:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.box {\n  border-top-right-radius: 1em 10%;\n}\n</pre></div>\n<p>В примере ниже мы установили все четыре угла, а затем изменили значения для верхнего правого угла, чтобы сделать его другим. Вы можете поиграть со значениями, чтобы изменить углы. Взгляните на страницу свойств для <a><code>border-radius</code></a> чтобы увидеть доступные варианты синтаксиса.</p></div></section><section aria-labelledby="упражнение_с_границами_и_фоном"><h2 id="упражнение_с_границами_и_фоном"><a>Упражнение с границами и фоном</a></h2><div class="section-content"><p>Чтобы проверить свои новые знания, попробуйте создать следующее, используя фон и границы, используя приведённый ниже пример в качестве отправной точки:</p>\n<ol>\n  <li>Задайте рамку равную 5px black solid, с закруглёнными углами 10px.</li>\n  <li>Добавить фоновое изображение (используйте URL <code>balloons.jpg</code>) и установите размер таким образом, чтобы он покрыл весь блок.</li>\n  <li>Задайте для <code>&lt;h2&gt;</code> полупрозрачный чёрный цвет фона и сделайте текст белым.</li>\n</ol>\n<div class="notecard note" id="sect6">\n  <p><strong>Примечание:</strong> вы можете посмотреть <a class="external" target="_blank">решение</a> здесь — но сначала попробуйте сделать это сами!</p>\n</div></div></section><section aria-labelledby="итоги"><h2 id="итоги"><a>Итоги</a></h2><div class="section-content"><p>В этой теме мы рассмотрели довольно много, но как вы можете увидеть, возможностей по стилизации фона или границ блока намного больше. Изучите различные страницы свойств, если хотите узнать больше о каких-либо функциях, которые мы обсуждали. На каждой странице MDN есть много примеров использования свойств, с которыми вы можете поиграть и расширить свои знания.</p>\n<p>В следующем уроке мы узнаем, как Режим написания вашего документа взаимодействует с вашим CSS. Что происходит, если текст не перетекает слева направо?</p></div></section>',
					works: [],
				},
				{
					title: 'Изменение направления текста',
					chapter: 2.18,
					content:
						'<header><h1>Изменение направления текста</h1></header><div class="section-content">\n<p>Многие свойства и значения, с которыми мы столкнулись до сих пор при изучении CSS, были привязаны к физическим размерам нашего экрана. Мы создаём границы, например, сверху, справа, снизу и слева от коробки.Эти физические размеры очень точно соответствуют контенту, который просматривается по горизонтали, и по умолчанию Интернет имеет тенденцию поддерживать языки с письмом слева направо (например, английский или французский) лучше, чем языки с письмом справа налево (например, арабский).</p>\n<p>Однако в последние годы CSS развивался чтобы лучше поддерживать разную направленность контента, включая контент с направлением справа налево, а также контент сверху вниз (например, в японском языке) - эти разные направления называются режимами письма. По мере того, как вы продвигаетесь в обучении и начинаете работать с макетом, понимание режимов письма будет вам очень полезно, поэтому мы сейчас и познакомимся с ними.</p>\n</div><section aria-labelledby="какие_бывают_режимы_письма"><h2 id="какие_бывают_режимы_письма"><a>Какие бывают режимы письма?</a></h2><div class="section-content"><p>Режим письма в CSS определяет, идёт ли текст по горизонтали или по вертикали. Свойство <a><code>writing-mode</code></a> позволяет нам переключаться из одного режима письма в другой. Для этого вам не обязательно работать на языке, который использует режим вертикального письма - вы также можете изменить режим письма частей вашего макета для творческих целей.</p>\n<p>В приведённом ниже примере заголовок отображается с использованием <code>writing-mode: vertical-rl</code>. Теперь текст идёт вертикально. Вертикальный текст часто используется в графическом дизайне и может быть способом добавить более интересный вид вашему веб-дизайну.</p>\n<p>Три возможных значения свойства <a><code>writing-mode</code></a>:</p>\n<ul>\n  <li><code>horizontal-tb</code>: Направление потока блока сверху вниз. Предложения идут горизонтально.</li>\n  <li><code>vertical-rl</code>: Направление потока блоков справа налево. Предложения идут вертикально.</li>\n  <li><code>vertical-lr</code>: Направление потока блока слева направо. Предложения идут вертикально.</li>\n</ul>\n<p>Таким образом, свойство <code>writing-mode</code> на самом деле устанавливает направление, в котором элементы уровня блока отображаются на странице - сверху вниз, справа налево или слева направо. Это затем определяет направление движения текста в предложениях.</p></div></section><section aria-labelledby="writing_modes_and_block_and_inline_layout"><h2 id="writing_modes_and_block_and_inline_layout"><a>Writing modes and block and inline layout</a></h2><div class="section-content"><p>We have already discussed <a>block and inline layout</a>, and the fact that some things display as block elements and others as inline elements. As we have seen described above, block and inline is tied to the writing mode of the document, and not the physical screen. Blocks are only displayed from the top to the bottom of the page if you are using a writing mode that displays text horizontally, such as English.</p>\n<p>If we look at an example this will become clearer. In this next example I have two boxes that contain a heading and a paragraph. The first uses <code>writing-mode: horizontal-tb</code>, a writing mode that is written horizontally and from the top of the page to the bottom. The second uses <code>writing-mode: vertical-rl</code>; this is a writing mode that is written vertically and from right to left.</p>\n<p>When we switch the writing mode, we are changing which direction is block and which is inline. In a <code>horizontal-tb</code> writing mode the block direction runs from top to bottom; in a <code>vertical-rl</code> writing mode the block direction runs right-to-left horizontally. So the <strong>block dimension</strong> is always the direction blocks are displayed on the page in the writing mode in use. The <strong>inline dimension</strong> is always the direction a sentence flows.</p>\n<p>This figure shows the two dimensions when in a horizontal writing mode.\n  \n</p>\n<p>This figure shows the two dimensions in a vertical writing mode.</p>\n<p>\n  \n</p>\n<p>Once you start to look at CSS layout, and in particular the newer layout methods, this idea of block and inline becomes very important. We will revisit it later on.</p></div></section><section aria-labelledby="direction"><h3 id="direction"><a>Direction</a></h3><div class="section-content"><p>In addition to writing mode we also have text direction. As mentioned above, some languages such as Arabic are written horizontally, but right-to-left. This is not something you are likely to use in a creative sense — if you simply want to line something up on the right there are other ways to do so — however it is important to understand this as part of the nature of CSS. The web is not just for languages that are displayed left-to-right!</p>\n<p>Due to the fact that writing mode and direction of text can change, newer CSS layout methods do not refer to left and right, and top and bottom. Instead they will talk about <em>start</em> and <em>end</em> along with this idea of inline and block. Don\'t worry too much about that right now, but keep these ideas in mind as you start to look at layout; you will find it really helpful in your understanding of CSS.</p></div></section><section aria-labelledby="logical_properties_and_values"><h2 id="logical_properties_and_values"><a>Logical properties and values</a></h2><div class="section-content"><p>The reason to talk about writing modes and direction at this point in your learning however, is because of the fact we have already looked at a lot of properties which are tied to the physical dimensions of the screen, and make most sense when in a horizontal writing mode.</p>\n<p>Let\'s take a look at our two boxes again — one with a <code>horizontal-tb</code> writing mode and one with <code>vertical-rl</code>. I have given both of these boxes a <a><code>width</code></a>. You can see that when the box is in the vertical writing mode, it still has a width, and this is causing the text to overflow.</p>\n<p>What we really want in this scenario, is to essentially swap height and width along with the writing mode. When we\'re in a vertical writing mode we want the box to expand in the block dimension just like it does in the horizontal mode.</p>\n<p>To make this easier, CSS has recently developed a set of mapped properties. These essentially replace physical properties — things like <code>width</code> and <code>height</code> — with <strong>logical</strong>, or <strong>flow relative</strong> versions.</p>\n<p>The property mapped to <code>width</code> when in a horizontal writing mode is called <a><code>inline-size</code></a> — it refers to the size in the inline dimension. The property for <code>height</code> is named <a><code>block-size</code></a> and is the size in the block dimension. You can see how this works in the example below where we have replaced <code>width</code> with <code>inline-size</code>.</p></div></section><section aria-labelledby="logical_margin_border_and_padding_properties"><h3 id="logical_margin_border_and_padding_properties"><a>Logical margin, border, and padding properties</a></h3><div class="section-content"><p>In the last two lessons we have learned about the CSS box model, and CSS borders. In the margin, border, and padding properties you will find many instances of physical properties, for example <a><code>margin-top</code></a>, <a><code>padding-left</code></a>, and <a><code>border-bottom</code></a>. In the same way that we have mappings for width and height there are mappings for these properties.</p>\n<p>The <code>margin-top</code> property is mapped to <a class="only-in-en-us" title="Currently only available in English (US)"><code>margin-block-start</code> <small>(en-US)</small></a> — this will always refer to the margin at the start of the block dimension.</p>\n<p>The <a><code>padding-left</code></a> property maps to <a class="only-in-en-us" title="Currently only available in English (US)"><code>padding-inline-start</code> <small>(en-US)</small></a>, the padding that is applied to the start of the inline direction. This will be where sentences start in that writing mode. The <a><code>border-bottom</code></a> property maps to <a class="only-in-en-us" title="Currently only available in English (US)"><code>border-block-end</code> <small>(en-US)</small></a>, which is the border at the end of the block dimension.</p>\n<p>You can see a comparison between physical and logical properties below.</p>\n<p><strong>If you change the writing mode of the boxes by switching the <code>writing-mode</code> property on <code>.box</code> to <code>vertical-rl</code>, you will see how the physical properties stay tied to their physical direction, whereas the logical properties switch with the writing mode.</strong></p>\n<p><strong>You can also see that the <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h2&gt;</code> <small>(en-US)</small></a> has a black <code>border-bottom</code>. Can you work out how to make that bottom border always go below the text in both writing modes?</strong></p>\n<p>There are a huge number of properties when you consider all of the individual border longhands, and you can see all of the mapped properties on the MDN page for <a class="only-in-en-us" title="Currently only available in English (US)">Logical Properties and Values <small>(en-US)<small></small></small></a>.</p></div></section><section aria-labelledby="logical_values"><h3 id="logical_values"><a>Logical values</a></h3><div class="section-content"><p>We have so far looked at logical property names. There are also some properties that take physical values of <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code>. These values also have mappings, to logical values — <code>block-start</code>, <code>inline-end</code>, <code>block-end</code>, and <code>inline-start</code>.</p>\n<p>For example, you can float an image left to cause text to wrap round the image. You could replace <code>left</code> with <code>inline-start</code> as shown in the example below.</p>\n<p><strong>Change the writing mode on this example to <code>vertical-rl</code> to see what happens to the image. Change <code>inline-start</code> to <code>inline-end</code> to change the float.</strong></p>\n<p>Here we are also using logical margin values to ensure the margin is in the correct place no matter what the writing mode is.</p></div></section><section aria-labelledby="should_you_use_physical_or_logical_properties"><h3 id="should_you_use_physical_or_logical_properties"><a>Should you use physical or logical properties?</a></h3><div class="section-content"><p>The logical properties and values are newer than their physical equivalents, and therefore have only recently been implemented in browsers. You can check any property page on MDN to see how far back the browser support goes. If you are not using multiple writing modes then for now you might prefer to use the physical versions. However, ultimately we expect that people will transition to the logical versions for most things, as they make a lot of sense once you start also dealing with layout methods such as flexbox and grid.</p></div></section><section aria-labelledby="summary"><h2 id="summary"><a>Summary</a></h2><div class="section-content"><p>The concepts explained in this lesson are becoming increasingly important in CSS. An understanding of the block and inline direction — and how text flow changes with a change in writing mode — will be very useful going forward. It will help you in understanding CSS even if you never use a writing mode other than a horizontal one.</p>\n<p>In the next module we will take a good look at overflow in CSS.</p></div></section><section aria-labelledby="in_this_module"><h2 id="in_this_module"><a>In this module</a></h2><div class="section-content"><ol>\n  <li><a>Cascade and inheritance</a></li>\n  <li><a>CSS selectors</a>\n    <ul>\n      <li><a>Type, class, and ID selectors</a></li>\n      <li><a>Attribute selectors</a></li>\n      <li><a>Pseudo-classes and pseudo-elements</a></li>\n      <li><a>Combinators</a></li>\n    </ul>\n  </li>\n  <li><a>The box model</a></li>\n  <li><a>Backgrounds and borders</a></li>\n  <li><a aria-current="page">Handling different text directions</a></li>\n  <li><a>Overflowing content</a></li>\n  <li><a>Values and units</a></li>\n  <li><a>Sizing items in CSS</a></li>\n  <li><a>Images, media, and form elements</a></li>\n  <li><a>Styling tables</a></li>\n  <li><a>Debugging CSS</a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)">Organizing your CSS <small>(en-US)<small></small></small></a></li>\n</ol></div></section>',
					works: [],
				},
				{
					title: 'Переполнение содержимого',
					chapter: 2.19,
					content:
						'<header><h1>Переполнение содержимого</h1></header><div class="section-content">\n<p>В этом уроке мы рассмотрим другую важную концепцию в CSS — <strong>переполнение</strong>. Переполнение это то, что случается когда слишком много контента содержится внутри блока. В этом гайде вы изучите что это и как этим управлять.</p>\n</div><section aria-labelledby="что_такое_переполнение"><h2 id="что_такое_переполнение"><a>Что такое переполнение?</a></h2><div class="section-content"><p>Мы уже знаем, что всё в CSS — блоки, и что мы можем ограничивать размер этих блоков, присваивая им определённое значение посредством <a><code>width</code></a> и <a><code>height</code></a> (или <a><code>inline-size</code></a> и <a><code>block-size</code></a>). Переполнение — это то, что случается, когда у вас слишком много контента в блоке, так что он не помещается в данный ограниченный размер. CSS даёт нам различные инструменты для управления переполнением, и это также полезная концепция для понимания на этой ранней стадии. Вы будете встречаться с переполнением достаточно часто, когда пишите CSS, особенно когда глубже погрузитесь в CSS раскладку.</p></div></section><section aria-labelledby="css_пытается_избежать_потери_данных"><h2 id="css_пытается_избежать_потери_данных"><a>CSS пытается избежать "потери данных"</a></h2><div class="section-content"><p>Рассмотрим два примера, демонстрирующих поведение CSS по умолчанию при возникновении переполнения.</p>\n<p>Первый пример — это блок, который был ограничен установленным параметром <code>height</code>. Затем мы добавили контент, превышающий выделенное пространство. Контент вышел за пределы поля и попал в абзац ниже.</p>\n<p>Второй пример — слово в блоке. Блок оказался слишком маленьким для этого слова, и поэтому оно выходит за его пределы.</p>\n<p>Вы можете задаться вопросом, почему CSS работает так неаккуратно, отображая контент за пределами предназначенного для него блока. Почему бы не скрывать выходящий за пределы контент? Почему бы не масштабировать размер блока, чтобы он соответствовал размеру содержимого?</p>\n<p>По возможности, CSS не скрывает контент, потому что это может привести к потере данных. Проблема состоит в том, что вы можете не заметить исчезновение данных. Посетители сайта тоже могут не заметить этого. Если кнопка отправки формы исчезнет и никто не может заполнить форму, это может стать большой проблемой! Поэтому, вместо того, чтобы скрывать выходящий за границы блока контент, CSS явно его отображает. Так вы с большей вероятностью увидите проблему при разработке. В худшем случае это заметит посетитель сайта и сообщит вам об этом.</p>\n<p>Если вы ограничиваете поле с помощью параметров <code>width</code> или <code>height</code>, CSS доверяет вам и считает, что вы знаете, что делаете. CSS предполагает, что вы управляете ситуацией и предусматриваете возможность возникновения переполнения. В общем случае, ограничение размера блока проблематично, если он содержит текст. В этом месте может быть больше текста, чем вы ожидали или его размер может быть больше (например, если пользователь увеличил размер шрифта).</p>\n<p>В следующих двух уроках объясняются различные подходы управления размерами, которые позволяют уменьшить вероятность возникновения переполнения. Однако, если вам нужен фиксированный размер блока, вы также можете контролировать поведение переполнения.</p></div></section><section aria-labelledby="свойство_overflow"><h2 id="свойство_overflow"><a>Свойство overflow</a></h2><div class="section-content"><p>Свойство <a><code>overflow</code></a> позволяет взять под контроль переполнение элемента и подсказать браузеру, как он должен себя вести. Значение overflow по умолчанию – <code>visible</code>, что означает - «показывать контент, когда он выходит за границы блока».</p>\n<p>Чтобы обрезать контент выходящий за пределы блока, вы можете установить <code>overflow: hidden</code>. Это свойство делает именно то, о чём говорит: скрывает выходящий за пределы контент. Помните, что это может сделать часть содержимого невидимым. Используйте данное значение только в том случае, если скрытие содержимого не вызовет проблем.</p>\n<p>Возможно, что при возникновении переполнения вместо скрытия вы захотите отобразить полосы прокрутки. При использовании <code>overflow: scroll</code> браузеры с видимыми полосами прокрутки всегда будут отображать их, даже если содержимого недостаточно для возникновения перекрытия. Это позволяет сохранить целостность раскладки, так как полосы прокрутки не будут появляться и пропадать в зависимости от количества содержимого в контейнере.</p>\n<p><strong>Удалите часть содержимого из поля ниже. Обратите внимание, что полосы прокрутки остаются, даже если прокрутка не требуется.</strong></p>\n<p>В приведённом выше примере нам нужно прокручивать содержимое только по оси <code>y</code>, однако мы получаем полосы прокрутки по обеим осям. Вы можете использовать свойство <a class="only-in-en-us" title="Currently only available in English (US)"><code>overflow-y</code> <small>(en-US)</small></a>, которое позволяет прокручивать содержимое только по оси <code>y</code>.</p>\n<p>Вы также можете установить прокрутку по оси x с помощью <a class="only-in-en-us" title="Currently only available in English (US)"><code>overflow-x</code> <small>(en-US)</small></a>, но это не рекомендуемый способ отображения длинных слов! Если у вас есть длинное слово в маленьком поле, вы можете использовать свойства <a><code>word-break</code></a> или <a><code>overflow-wrap</code></a>. Кроме того, некоторые методы, описанные в разделе <a>Изменение размеров в CSS</a>, могут помочь вам создавать блоки, которые лучше масштабируются с различным объемом содержимого.</p>\n<p>Как и в случае со <code>scroll</code>, вы получаете полосу прокрутки независимо от того, достаточно ли содержимого для её появления.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> вы можете точно задать прокрутку по осям x и y, используя свойство <code>overflow</code>, передав два значения. Первое значение будет относиться к <code>overflow-x</code>, а второе — к <code>overflow-y</code>. Если передать одно значение, то <code>overflow-x</code> и <code>overflow-y</code> получат одинаковые значения. Например, <code>overflow: scroll hidden</code> устанавливает <code>overflow-x</code> в <code>scroll</code> и <code>overflow-y</code> в <code>hidden</code>.</p>\n</div>\n<p>Если вы хотите, чтобы полосы прокрутки отображались только тогда, когда содержимого больше, чем может поместиться в поле, используйте <code>overflow: auto</code>. Это позволяет браузеру автоматически определять, следует ли отображать полосы прокрутки.</p>\n<p><strong>В приведённом ниже примере уменьшите количество содержимого так, чтобы оно поместилось в поле. Вы должны увидеть, что полосы прокрутки исчезнут.</strong></p></div></section><section aria-labelledby="overflow_устанавливает_контекст_форматирования_блока"><h2 id="overflow_устанавливает_контекст_форматирования_блока"><a>Overflow устанавливает контекст форматирования блока</a></h2><div class="section-content"><p>Когда вы используете значение overflow, такое как <code>scroll</code> или <code>auto</code>, вы создаете <strong>контекст форматирования блока</strong> (BFC). Содержимое блока, для которого вы установили параметр <code>overflow</code> приобретает автономную раскладку. Контент вне блока не может проникнуть в блок, и ничто не может вылезти из этого блока в окружающее его пространство. Это дает возможность прокручивать содержимое, так чтобы оно не выходило за пределы блока.</p></div></section><section aria-labelledby="нежелательное_переполнение_в_веб-разработке"><h2 id="нежелательное_переполнение_в_веб-разработке"><a>Нежелательное переполнение в веб-разработке</a></h2><div class="section-content"><p>Современные методы раскладки (описанные в разделе <a>CSS раскладка</a>) справляются с переполнением очень хорошо вне зависимости от того, сколько контента будет на веб-странице.</p>\n<p>Это не всегда было нормой. В прошлом некоторые сайты были построены с блоками фиксированной высоты для выравнивания нижних границ блоков. Тем не менее эти блоки могли не иметь ничего общего между собой. Это была хрупкая конструкция. В устаревших приложениях вы можете встретить блок, в котором содержимое перекрывает другое содержимое на странице. Теперь вы понимаете, что это происходит из-за переполнения. В идеале вы должны провести рефакторинг разметки, чтобы не полагаться на блоки с фиксированной высотой.</p>\n<p>При разработке сайта всегда помните о переполнении. Тестируйте дизайны как с большим, так и с малым количеством контента. Проверяйте различные размеры шрифта текстов. Убедитесь, что ваш CSS работает надёжно. Изменение значения overflow для скрытия содержимого или добавления полос прокрутки, должно использоваться только при необходимости (например там, где вы хотите использовать прокручиваемый блок).</p></div></section><section aria-labelledby="проверьте_свои_навыки!"><h2 id="проверьте_свои_навыки!"><a>Проверьте свои навыки!</a></h2><div class="section-content"><p>В этой статье мы рассмотрели многое, но можете ли вы вспомнить самую важную информацию? Вы можете найти дополнительные тесты, чтобы убедиться, что вы усвоили эту информацию, прежде чем двигаться дальше – см. <a class="only-in-en-us" title="Currently only available in English (US)">Проверь свои навыки: переполнение <small>(en-US)<small></small></small></a>.</p></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>В этом уроке была представлена концепция переполнения. Важно понимать, что CSS по умолчанию старается избежать обрезания выходящего за границы блока содержимого. Мы изучили, как можно справиться с возникшим переполнением, а также рассмотрели важность тестирования поведения веб-страниц как с малым количеством контента, так и с большим.</p></div></section><section aria-labelledby="in_this_module"><h2 id="in_this_module"><a>In this module</a></h2><div class="section-content"><ol>\n  <li><a>Каскад и наследование</a></li>\n  <li><a>Селекторы CSS</a>\n    <ul>\n      <li><a>Селекторы типа, класса и ID</a></li>\n      <li><a>Селекторы атрибута</a></li>\n      <li><a>Псевдоклассы и псевдоэлементы</a></li>\n      <li><a>Комбинаторы</a></li>\n    </ul>\n  </li>\n  <li><a>Блочная модель(The box model)</a></li>\n  <li><a>Фон и границы</a></li>\n  <li><a>Обработка разных направлений текста</a></li>\n  <li><a aria-current="page">Переполнение содержимого</a></li>\n  <li><a>Значения и единицы измерения</a></li>\n  <li><a>Размеры в CSS</a></li>\n  <li><a>Элементы изображений, форм и медиа-элементы</a></li>\n  <li><a>Стилизация таблиц</a></li>\n  <li><a>Отладка CSS</a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)">Организация вашей CSS <small>(en-US)<small></small></small></a></li>\n</ol></div></section>',
					works: [],
				},
				{
					title: 'Значения свойств CSS',
					chapter: 2.2,
					content:
						'<header><h1>Значения свойств CSS</h1></header><div class="section-content">\n<p>Каждое свойство используемое в CSS имеет значение или набор значений которые допустимы для этого свойства, и изучение страниц MDN со свойствами поможет вам понять какие значения валидны для того или иного свойства. В этом уроке мы рассмотрим некоторые наиболее общие значения и единицы в использовании.</p>\n</div><section aria-labelledby="что_такое_значение_css"><h2 id="что_такое_значение_css"><a>Что такое значение CSS?</a></h2><div class="section-content"><p>В спецификациях CSS и на страницах свойств здесь в MDN вы сможете определять (узнавать) значения, потому как они будут заключены в угловые скобки, например <a><code>&lt;color&gt;</code></a> или <a><code>&lt;length&gt;</code></a>. Если вы видите значение <code>&lt;color&gt;</code> как действительное для определённого свойства это значит что вы можете использовать любой валидный цвет в качестве значение для этого свойства, как перечислено на странице <a><code>&lt;color&gt;</code></a><a>.</a></p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> You\'ll also see CSS values referred to as <em>data types</em>. The terms are basically interchangeable — when you see something in CSS referred to as a data type, it is really just a fancy way of saying value.</p>\n</div>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Yes, CSS values tend to be denoted using angle brackets, to differentiate them from CSS properties (e.g. the <a class="only-in-en-us" title="Currently only available in English (US)"><code>color</code> <small>(en-US)</small></a> property, versus the <a>&lt;color&gt;</a> data type). You might get confused between CSS data types and HTML elements too, as they both use angle brackets, but this is unlikely — they are used in very different contexts.</p>\n</div>\n<p>В следующем примере мы установили цвет нашего заголовка используя ключевое слово и фон используя функцию <code>rgb()</code>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">h1 {\n  color: black;\n  background-color: rgb(197, 93, 161);\n}\n</pre></div>\n<p>Значение в CSS это путь определения коллекции допустимых под-значений. То есть если вы видите <code>&lt;color&gt;</code> как применённый, то вам не надо озадачиваться какой из разных типов значения цвета может быть использован — ключевое слово, hex значение, функция <code>rgb()</code> и т.д. Вы можете воспользоваться <em>любым</em> доступным значением <code>&lt;color&gt;</code> при условии, что они поддерживаются вашим браузером. Страницы для всех значений на MDN дадут вам информацию о поддержке браузеров. Например, если вы посмотрите на страницу <a><code>&lt;color&gt;</code></a> то вы увидите раздел совместимости браузеров в котором перечислены различные типы значений цвета и их поддержка.</p>\n<p>Давайте посмотрим на некоторые типы значений и единиц с примерами чтобы вы могли опробовать различные возможные значения, с которыми вы можете часто сталкиваться.</p></div></section><section aria-labelledby="числа_длины_и_проценты"><h2 id="числа_длины_и_проценты"><a>Числа, длины и проценты</a></h2><div class="section-content"><p>Существуют различные типы числовых данных, которые вы можете использовать в CSS. Следующие типы классифицируются как числовые:</p>\n</div></section><section aria-labelledby="длины"><h3 id="длины"><a>Длины</a></h3><div class="section-content"><p>Числовой тип, с которым вы будете сталкиваться чаще всего это <code>&lt;length&gt;</code> (длина), например <code>10px</code> (пиксели) или <code>30em</code>. Существует два типа длин используемых в CSS — относительные и абсолютные. Важно знать разницу для того, чтобы понимать, насколько большими станут вещи.</p>\n<h4 id="абсолютные_единицы_длины">Абсолютные единицы длины</h4>\n<p>Ниже приведены все единицы абсолютной длины — они не являются относительными к чему-либо и обычно считаются всегда одинакового размера.</p>\n\n<p>Большинство из этих значений больше полезны при использовании печати, чем для вывода на экран. Например, мы обычно не используем <code>cm</code> (сантиметры) на экране. Единственное значение которое вы в основном будете использовать это <code>px</code> (пиксели).</p>\n<h4 id="единицы_относительной_длины">Единицы относительной длины</h4>\n<p>Относительные единицы длин являются относительными к чему-то ещё, возможно к размеру родительского шрифта или к размеру окна просмотра. Преимущество использования относительных единиц состоит в том, что при тщательном планировании вы можете сделать так, чтобы размер текста или других элементов масштабировался относительно всего остального на странице. Некоторые наиболее используемые единицы веб-разработки перечислены в таблице ниже.</p>\n\n<h4 id="изучение_на_примере">Изучение на примере</h4>\n<p>В примере ниже вы можете увидеть, как некоторые относительные и абсолютные единицы длин ведут себя. Первый блок имеет <a><code>width</code></a> (ширину) установленную в пикселях. Как абсолютная единица эта ширина будет оставаться такой же неважно что ещё измениться.</p>\n<p>Второй блок имеет ширину, установленную в единицах <code>vw</code> (ширина окна просмотра). Это значение относительно к ширине окна просмотра и таким образом 10vw это 10 процентов от ширины окна просмотра. Если вы измените ширину окна вашего браузера, размер блока должен измениться, однако этот пример встроен в страницу с использованием <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;iframe&gt;</code> <small>(en-US)<small></small></small></a>, поэтому это не сработает. Для того чтобы увидеть это в действии вы должны <a class="external" target="_blank">открыть этот пример в отдельной вкладке браузера</a>.</p>\n<p>Третий блок использует единицы <code>em</code>. Они относительны к размеру шрифта. Я установил размер шрифта <code>1em</code> для содержимого <a><code>&lt;div&gt;</code></a>, который имеет класс <code>.wrapper</code>. Измените это значение на <code>1.5em</code> и вы увидите что, размер шрифта всех этих элементов увеличится, но только последний объект станет шире, поскольку его ширина относительна к тому размера шрифта.</p>\n<p>После выполнения инструкция выше, попробуйте поиграть со значениями и посмотрите, что у вас получится.</p>\n<h4 id="em_и_rem">em и rem</h4>\n<p><code>em</code> и <code>rem</code> — две относительные длины, с которыми вы вероятное всего сталкиваетесь чаще при разметке чего-либо от блоков до текста. Стоит понимать как они работают, понимать различия между ними, особенно когда вы начинаете переходить к более сложным темам как <a>стилизация текста</a> или <a>разметка CSS</a>. Приведённый ниже пример показывает это.</p>\n<p>HTML это набор вложенных списков — у нас имеется три списка в общей сложности и оба примера имеют одинаковый HTML. Единственное различие в том, что первый имеет класс <em>ems,</em> а второй класс <em>rems</em>.</p>\n<p>Чтобы начать, мы установили 16px для размера шрифта элемента <code>&lt;html&gt;</code>.</p>\n<p><strong>Повторим, единица em означает "размер шрифта родительского элемента"</strong>. Элементы <a><code>&lt;li&gt;</code></a> внутри <a><code>&lt;ul&gt;</code></a> с классом <code>ems</code> получают свои размеры от своего родителя. Так, каждый последующий уровень вложения становится прогрессивно больше, так как каждый имеет свой размер шрифта установленный на <code>1.3em</code> — 1.3 раза от размера шрифта родителя.</p>\n<p><strong>Повторим, единица rem означает "размер шрифта корневого элемента"</strong> (rem значит "root em". (root - корень)). Элементы <a><code>&lt;li&gt;</code></a> внутри <a><code>&lt;ul&gt;</code></a> с классом <code>rems</code> получают свои размеры от корневого элемента (<code>&lt;html&gt;</code>). Это значит, что каждый последующий уровень вложения не продолжает увеличиваться.</p>\n<p>Однако, если вы измените <code>font-size</code> (размер шрифта) <code>&lt;html&gt;</code> в CSS, вы увидите что все остальное изменится относительно ему — и <code>rem</code>- и <code>em</code>-размеры текста</p></div></section><section aria-labelledby="проценты"><h3 id="проценты"><a>Проценты</a></h3><div class="section-content"><p>Во многих случаях проценты обрабатываются таким же образом, как и длина. С процентами фишка в том, что они всегда устанавливаются относительно некоторого другого значения. Например, если вы установите <code>font-size</code> элемента как проценты, то это будет процент от <code>font-size</code> родительского элемента. Если вы используете процент для значения <code>width</code> (ширина), то это будет процент от <code>width</code> родителя.</p>\n<p>В примере ниже два блока с размерами в процентах и два с размерами в пикселях имеющих одинаковые имена классов. Оба набора имеют ширину 200px и 40% соответственно.</p>\n<p>Различие в том, что второй набор блоков находится внутри обёртки которая имеет ширину 400 пикселей. Второй блок шириной в 200px имеет ту же ширину что и первый, но второй 40 процентный блок теперь имеет 40% от 400px — намного уже чем первый.</p>\n<p><strong>Попробуйте изменить ширину обёртки (.wrapper) или процентное значение чтобы увидеть, как это работает.</strong></p>\n<p>В следующем примере размер шрифта установлен в процентах. Каждый <code>&lt;li&gt;</code> имеет <code>font-size</code> 80%, поэтому элементы вложенного списка становятся прогрессивно меньше так как они наследуют свои размеры от родителя.</p>\n<p>Обратите внимание, в то время как многие значения принимают как длину, так и проценты, существуют те, которые принимают только длину. Вы можете посмотреть какие значения допустимы на справочной странице свойств MDN. Если допустимые значения включают <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;length-percentage&gt;</code> <small>(en-US)<small></small></small></a>, тогда вы можете использовать и длину, и проценты. Если же допустимые значения включают только <code>&lt;length&gt;</code>, то использование процентов невозможно.</p></div></section><section aria-labelledby="числа"><h3 id="числа"><a>Числа</a></h3><div class="section-content"><p>Некоторые значения принимают числа без каких-либо единиц измерения. Примером свойства принимающего числа без единиц измерения может служить свойство <code>opacity</code>, которое контролирует мутность элемента (настолько он прозрачен). Это свойство принимает числа между <code>0</code> (полностью прозрачное) и <code>1</code> (полностью мутное).</p>\n<p><strong>В примере ниже, попробуйте изменить значение</strong> <strong><code>opacity</code></strong> <strong>на различные десятичные значения между</strong> <strong><code>0</code></strong> <strong>и</strong> <strong><code>1</code></strong> <strong>и посмотрите, как блок и его содержимое становится более и/или менее мутными.</strong></p>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Когда вы используете числа в CSS в качестве значений, они не должны быть заключены в кавычки.</p>\n</div></div></section><section aria-labelledby="цвет"><h2 id="цвет"><a>Цвет</a></h2><div class="section-content"><p>Существует много способов определения цвета в CSS, некоторые из которых реализованы довольно-таки недавно по сравнению с другими. Одинаковые значения цвета могут использоваться везде в CSS, определяете ли вы при этом цвет текста, цвет фона или цвет чего-либо ещё.</p>\n<p>Стандартная система цветов доступная в современных компьютерах — это 24-битная система, которая позволяет отображать около 16.7 миллионов отдельных цветов через комбинацию различных красных, зелёных и синих каналов с 256 различными значениями каждого канала (256 x 256 x 256 = 16,777,216). Давайте взглянем на некоторые способы, с помощью которых мы можем определять цвет в CSS.</p>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> В этом руководстве мы рассмотрим общие методы определения цвета, которые имеют хорошую поддержку браузерами; существуют и другие методы, но они не имеют столь же хорошей поддержки и являются менее общими.</p>\n</div></div></section><section aria-labelledby="ключевые_слова_цвета"><h3 id="ключевые_слова_цвета"><a>Ключевые слова цвета</a></h3><div class="section-content"><p>Довольно часто в примерах как здесь, так и на других страницах в MDN вы будете видеть использование ключевых слов цвета, поскольку это простой и понятный способ определения цвета. Существует определённое количество этих ключевых слов и некоторые их них имеют довольно занимательные имена! Полный список вы можете посмотреть на странице значений <a><code>&lt;color&gt;</code></a> .</p>\n<p><strong>Попробуйте поиграть с разными значениями цвета на живом примере ниже, чтобы понять больше об идее как они работают.</strong></p></div></section><section aria-labelledby="шестнадцатеричные_rgb_значения"><h3 id="шестнадцатеричные_rgb_значения"><a>Шестнадцатеричные RGB значения</a></h3><div class="section-content"><p>Следующий тип значения цвета, с которым вы сталкиваетесь вероятнее всего — это шестнадцатеричные коды. Каждое hex-значение состоит из символа решётки (#) за которым следуют 6 шестнадцатеричных чисел, каждое из которых может принимать одно из 16 значений от 0 до f (представляющая 15) — то есть <code>0123456789abcdef</code>. Каждая пара значений представляет один из каналов — красного, зелёного или синего цветов — и позволяет нам определять любой из 256 доступных значений для каждого (16 x 16 = 256).</p>\n<p>Эти значения являются немного более сложными и менее простыми для понимания, но они намного более универсальны чем ключевые слова — вы можете использовать hex-значения чтобы отобразить любой цвет, который вы хотите использовать в своей цветовой схеме.</p>\n<p><strong>И снова, попробуйте изменить значения, чтобы посмотреть, как варьируют цвета.</strong></p></div></section><section aria-labelledby="rgb_и_rgba_значения"><h3 id="rgb_и_rgba_значения"><a>RGB и RGBA значения</a></h3><div class="section-content"><p>Третья схема, о которой мы здесь поговорим это RGB. Значения RGB это функция — <code>rgb()</code> — которой даётся три параметра представляющих каналы красного, зелёного и синего значений цветов, во многом так же, как hex-значения. Отличие с RGB является то, что каждый канал представлен не двумя hex-цифрами, а десятичным числом между 0 и 255 — что отчасти проще в понимании.</p>\n<p>Давайте перепишем наш последний пример используя RGB цвета:</p>\n<p>А также вы можете использовать цвета RGBA — что работает в точности, как и цвета RGB и то есть вы можете использовать любое значение RGB, однако существует четвёртое значение, которое представляет альфа канал цвета, которое контролирует мутность. Если вы установите это значение на <code>0</code>, то это сделает цвет полностью прозрачным, тогда как <code>1</code> сделает его полностью мутным. Значения между дают вам разные уровни прозрачности.</p>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> Настройка альфа канала в цвете имеет одно ключевое различие в использовании свойства <a><code>opacity</code></a> которое мы рассматривали ранее. когда вы используете мутность вы делаете элемент и все внутри него мутным, тогда как при использовании цвета RGBA вы делаете мутным только тот цвет который вы специфицируете.</p>\n</div>\n<p>In the example below I have added a background image to the containing block of our colored boxes. I have then set the boxes to have different opacity values — notice how the background shows through more when the alpha channel value is smaller.</p>\n<p><strong>In this example, try changing the alpha channel values to see how it affects the color output.</strong></p>\n<div class="notecard note" id="sect6">\n  <p><strong>Примечание:</strong> At some point modern browsers were updated so that <code>rgba()</code> and <code>rgb()</code>, and <code>hsl()</code> and <code>hsla()</code> (see below), became pure aliases of each other and started to behave exactly the same. So for example both <code>rgba()</code> and <code>rgb()</code> accept colors with and without alpha channel values. Try changing the above example\'s <code>rgba()</code> functions to <code>rgb()</code> and see if the colors still work! Which style you use is up to you, but separating out non-transparent and transparent color definitions to use the different functions gives (very) slightly better browser support and can act as a visual indicator of where transparent colors are being defined in your code.</p>\n</div></div></section><section aria-labelledby="hsl_and_hsla_values"><h3 id="hsl_and_hsla_values"><a>HSL and HSLA values</a></h3><div class="section-content"><p>Slightly less well-supported than RGB is the HSL color model (not supported on old versions of IE), which was implemented after much interest from designers. Instead of red, green, and blue values, the <code>hsl()</code> function accepts hue, saturation, and lightness values, which are used to distinguish between the 16.7 million colors, but in a different way:</p>\n<ul>\n  <li><strong>Hue</strong>: The base shade of the color. This takes a value between 0 and 360, representing the angles round a color wheel.</li>\n  <li><strong>Saturation</strong>: How saturated is the color? This takes a value from 0–100%, where 0 is no color (it will appear as a shade of grey), and 100% is full color saturation</li>\n  <li><strong>Lightness</strong>: How light or bright is the color? This takes a value from 0–100%, where 0 is no light (it will appear completely black) and 100% is full light (it will appear completely white)</li>\n</ul>\n<p>We can update the RGB example to use HSL colors like this:</p>\n<p>Just as RGB has RGBA, HSL has an HSLA equivalent, which gives you the same ability to specify the alpha channel. I\'ve demonstrated this below by changing my RGBA example to use HSLA colors.</p>\n<p>You can use any of these color values in your projects. It is likely that for most projects you will decide on a color palette and then use those colors — and your chosen method of specifying color — throughout the whole project. You can mix and match color models, however for consistency it is usually best if your entire project uses the same one!</p></div></section><section aria-labelledby="images"><h2 id="images"><a>Images</a></h2><div class="section-content"><p>The <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;image&gt;</code> <small>(en-US)<small></small></small></a> data type is used wherever an image is a valid value. This can be an actual image file pointed to via a <code>url()</code> function, or a gradient.</p>\n<p>In the example below we have demonstrated an image and a gradient in use as a value for the CSS <code>background-image</code> property.</p>\n<div class="notecard note" id="sect7">\n  <p><strong>Примечание:</strong> there are some other possible values for <code>&lt;image&gt;</code>, however these are newer and currently have poor browser support. Check out the page on MDN for the <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;image&gt;</code> <small>(en-US)<small></small></small></a> data type if you want to read about them.</p>\n</div></div></section><section aria-labelledby="position"><h2 id="position"><a>Position</a></h2><div class="section-content"><p>The <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;position&gt;</code> <small>(en-US)<small></small></small></a> data type represents a set of 2D coordinates, used to position an item such as a background image (via <a><code>background-position</code></a>). It can take keywords such as <code>top</code>, <code>left</code>, <code>bottom</code>, <code>right</code>, and <code>center</code> to align items with specific bounds of a 2D box, along with lengths, which represent offsets from the top and left-hand edges of the box.</p>\n<p>A typical position value consists of two values — the first sets the position horizontally, the second vertically. If you only specify values for one axis the other will default to <code>center</code>.</p>\n<p>In the following example we have positioned a background image 40px from the top and to the right of the container using a keyword.</p>\n<p><strong>Play around with these values to see how you can push the image around.</strong></p></div></section><section aria-labelledby="strings_and_identifiers"><h2 id="strings_and_identifiers"><a>Strings and identifiers</a></h2><div class="section-content"><p>Throughout the examples above, we\'ve seen places where keywords are used as a value (for example <code>&lt;color&gt;</code> keywords like <code>red</code>, <code>black</code>, <code>rebeccapurple</code>, and <code>goldenrod</code>). These keywords are more accurately described as <em>identifiers</em>, a special value that CSS understands. As such they are not quoted — they are not treated as strings.</p>\n<p>There are places where you use strings in CSS, for example <a>when specifying generated content</a>. In this case the value is quoted to demonstrate that it is a string. In the below example we use unquoted color keywords along with a quoted generated content string.</p></div></section><section aria-labelledby="functions"><h2 id="functions"><a>Functions</a></h2><div class="section-content"><p>The final type of value we will take a look at is the group of values known as functions. In programming, a function is a reusable section of code that can be run multiple times to complete a repetitive task with minimum effort on the part of both the developer and the computer. Functions are usually associated with languages like JavaScript, Python, or C++, but they do exist in CSS too, as property values. We\'ve already seen functions in action in the Colors section — <code>rgb()</code>, <code>hsl()</code>, etc. The value used to return an image from a file — <code>url()</code> — is also a function.</p>\n<p>A value that behaves more like something you might find in a traditional programming language is the <code>calc()</code> CSS function. This function gives you the ability to do simple calculations inside your CSS. It\'s particularly useful if you want to work out values that you can\'t define when writing the CSS for your project, and need the browser to work out for you at runtime.</p>\n<p>For example, below we are using <code>calc()</code> to make the box <code>20% + 100px</code> wide. The 20% is calculated from the width of the parent container <code>.wrapper</code> and so will change if that width changes. We can\'t do this calculation beforehand because we don\'t know what 20% of the parent will be, so we use <code>calc()</code> to tell the browser to do it for us.</p></div></section><section aria-labelledby="summary"><h2 id="summary"><a>Summary</a></h2><div class="section-content"><p>This has been a quick run through of the most common types of values and units you might encounter. You can have a look at all of the different types on the <a class="only-in-en-us" title="Currently only available in English (US)">CSS Values and units <small>(en-US)<small></small></small></a> reference page; you will encounter many of these in use as you work through these lessons.</p>\n<p>The key thing to remember is that each property has a defined list of allowed values, and each value has a definition explaining what the sub-values are. You can then look up the specifics here on MDN.</p>\n<p>For example, understanding that <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;image&gt;</code> <small>(en-US)<small></small></small></a> also allows you to create a color gradient is useful but perhaps non-obvious knowledge to have!</p></div></section><section aria-labelledby="in_this_module"><h2 id="in_this_module"><a>In this module</a></h2><div class="section-content"><ol>\n  <li><a>Cascade and inheritance</a></li>\n  <li><a>CSS selectors</a>\n    <ul>\n      <li><a>Type, class, and ID selectors</a></li>\n      <li><a>Attribute selectors</a></li>\n      <li><a>Pseudo-classes and pseudo-elements</a></li>\n      <li><a>Combinators</a></li>\n    </ul>\n  </li>\n  <li><a>The box model</a></li>\n  <li><a>Backgrounds and borders</a></li>\n  <li><a>Handling different text directions</a></li>\n  <li><a>Overflowing content</a></li>\n  <li><a aria-current="page">Values and units</a></li>\n  <li><a>Sizing items in CSS</a></li>\n  <li><a>Images, media, and form elements</a></li>\n  <li><a>Styling tables</a></li>\n  <li><a>Debugging CSS</a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)">Organizing your CSS <small>(en-US)<small></small></small></a></li>\n</ol></div></section>',
					works: [],
				},
				{
					title: 'Изменение размеров в CSS',
					chapter: 2.21,
					content:
						'<header><h1>Изменение размеров в CSS</h1></header><div class="section-content">\n<p>В предыдущих уроках вы познакомились с некоторыми способами изменения размеров элементов на веб-странице с помощью CSS. Понимание того, насколько велики будут различные элементы в вашем дизайне — важно, и в этом уроке мы подведем итог по различным способам задания размеров элементов с помощью CSS и расскажем о некоторых терминах, связанных с размерами, которые помогут вам в будущем.</p>\n</div><section aria-labelledby="размер_по_умолчанию_или_внутренний_размер"><h2 id="размер_по_умолчанию_или_внутренний_размер"><a>Размер по умолчанию или внутренний размер</a></h2><div class="section-content"><p>Элементы HTML имеют размеры по умолчанию, заданные до того, как на них повлияет какое-либо правило CSS. Простой пример — изображение. Изображение имеет ширину и высоту, определенные в файле изображения. Этот размер называется — <strong>внутренний размер</strong>, он исходит из самого изображения.</p>\n<p>Если вы разместите изображение на странице и не измените его высоту и ширину, используя атрибуты тега <code>&lt;img&gt;</code> или CSS, оно будет отображаться с использованием этого внутреннего размера. В примере ниже, мы установили для изображения рамку, чтобы вы могли видеть размер файла.</p>\n<p>С другой стороны, пустой <a><code>&lt;div&gt;</code></a> не имеет собственного размера. Если вы добавите <a><code>&lt;div&gt;</code></a> в свой HTML-код без содержимого, а затем установите для него рамку, как мы это делали с изображением, вы увидите линию на странице. Это схлопнувшиеся границы элемента — содержимое, которое могло бы удерживать ее в открытом состоянии, отсутствует. В нашем примере ниже эта граница растягивается на всю ширину контейнера, потому что это элемент блочный, поведение которого должно быть вам знакомо. У него нет высоты, потому что нет содержимого.</p>\n<p>В приведенном выше примере попробуйте добавить текст внутри пустого элемента. Этот текст теперь становится охваченным границами, потому что высота элемента определяется содержимым. Следовательно, размер этого <code>&lt;div&gt;</code> устанавливается размером содержимого. Как и в предыдущем примере, этот размер является внутренним размером — размер элемента определяется размером его содержимого.</p></div></section><section aria-labelledby="присваивание_определенного_размера"><h2 id="присваивание_определенного_размера"><a>Присваивание определенного размера</a></h2><div class="section-content"><p>Конечно, мы можем задать элементам нашей страницы определенный размер. Размер, который присваивается элементу (содержимое, которого затем должно соответствовать этому размеру), называется <strong>внешним размером</strong>. Возьмите наш <code>&lt;div&gt;</code> из примера выше и установите ему специальные значения <a><code>width</code></a> и <a><code>height</code></a> и теперь он будет иметь эти размеры, независимо от того, какого размера содержимое в него помещается. Как мы узнали в <a>нашем предыдущем уроке о переполнении</a>, заданная высота блока может вызвать переполнение содержимого, если размер содержимого больше, чем внутреннее пространство элемента.</p>\n<p>Из-за этой проблемы перекрытия, жестко задавать высоту элементов с помощью длины или процентного соотношения — это то, что нужно делать с большой осторожностью.</p></div></section><section aria-labelledby="использование_процентного_соотношения"><h3 id="использование_процентного_соотношения"><a>Использование процентного соотношения</a></h3><div class="section-content"><p>Во многих отношениях проценты действуют как единицы длины, и, как мы <a>обсуждали в уроке, посвященном значениям и единицам</a>, они часто могут использоваться как взаимозаменяемые с длиной. При использовании процентов вы должны знать, <em>от чего этот процент рассчитывается</em>. В случае блока внутри другого блока, если вы зададите дочернему блоку процентную ширину, это будет процент от ширины родительского контейнера.</p>\n<p>Это потому, что проценты рассчитываются в зависимости от размера содержащего элемент блока. Если процентное соотношение не применяется, наш <code>&lt;div&gt;</code> будет занимать 100% доступного пространства, так как это элемент блочного типа. Если мы зададим ему ширину в процентах, он займет процент от пространства, которое он обычно заполняет.</p></div></section><section aria-labelledby="margins_и_paddings_в_процентах"><h3 id="margins_и_paddings_в_процентах"><a>Margins и paddings в процентах</a></h3><div class="section-content"><p>Если вы установите <code>margins</code> и <code>padding</code> в процентах, вы можете заметить странное поведение. В приведенном ниже примере у нас есть блок. Мы присвоили внутреннему блоку <a><code>margin</code></a> 10% и <a><code>padding</code></a> 10%. Padding и margin сверху и снизу имеют тот же размер, что и margins слева и справа.</p>\n<p>Например, вы можете ожидать, что процентное значение верхнего и нижнего margins будет в процентах от высоты элемента, а процентное левое и правое margins — в процентах от ширины элемента. Тем не менее, это не так!</p>\n<p>При использовании margins и padding, заданных в процентах, значение рассчитывается на основе <strong>inline размера</strong> блока — следовательно, ширины при работе с горизонтальным языком. В нашем примере все поля и отступы составляют 10% width. Это означает, что вы будете иметь margins и padding одинакового размера по всему полю. Этот факт стоит запомнить, если вы действительно пользуетесь процентами.</p></div></section><section aria-labelledby="минимальные_и_максимальные_размеры"><h2 id="минимальные_и_максимальные_размеры"><a>Минимальные и максимальные размеры</a></h2><div class="section-content"><p>Помимо возможности установить фиксированный размер, мы можем использовать CSS чтобы задать элементу минимальный или максимальный размер. Если у вас есть блок, который может содержать разное количество содержимого, и вы хотите, чтобы он всегда был определенной минимальной высоты, вы можете установить для него свойство <a><code>min-height</code></a>. Блок всегда будет минимальной заданной высоты, пока содержимого не станет больше, чем места в блоке.</p>\n<p>В приведенном ниже примере вы можете увидеть два блока, обоим задали минимальную высоту в 150 пикселей. Блок слева имеет высоту 150 пикселей несмотря на то что в нем нет текста. В блоке справа есть контент, которому нужно больше места, чем минимальная заданная высота, поэтому он увеличился.</p>\n<p>Это очень полезно при работе с переменным объемом контента, избегая при этом переполнения.</p>\n<p>Часто <a><code>max-width</code></a> применяют для уменьшения масштаба изображений, если недостаточно места для их отображения.</p>\n<p>Например, если бы вы установили <code>width: 100%</code> для изображения, а его внутренняя ширина была меньше, чем его контейнер, изображение было бы вынуждено растягиваться и становиться больше, в результате чего оно выглядело бы пикселизированным.</p>\n<p>Если бы вы вместо этого применили <code>max-width: 100%</code>, и внутренняя ширина изображения была бы меньше, чем его контейнер, изображение не будет принудительно растягиваться и становиться больше, что предотвращает пикселизацию.</p>\n<p>В приведенном ниже примере мы использовали одно и то же изображение трижды. Первому изображению было задано <code>width: 100%</code> и оно находится в контейнере, который больше его ширины, поэтому он растягивается до ширины контейнера. Второму изображению задано <code>max-width: 100%</code>, изображение достигло 100% своей ширины не растягивается, чтобы заполнить контейнер. Третье поле снова содержит то же изображение, также с <code>max-width: 100%</code> в этом случае вы можете увидеть, как он уменьшилось, чтобы поместиться в контейнер.</p>\n<p>Этот метод используется для создания <em>отзывчивых</em> изображений, чтобы при просмотре на меньшем устройстве они соответствующим образом уменьшались. Однако вам не следует использовать эту технику для загрузки действительно больших изображений с последующим их уменьшением в браузере. Изображения должны иметь соответствующий размер, чтобы быть не больше, чем они должны быть для самого большого размера, отображаемого в дизайне. Загрузка слишком больших изображений замедлит работу вашего сайта и может стоить пользователям больше денег, если они используют лимитированное соединение.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Узнайте больше о <a>методах создания адаптивных изображений</a>.</p>\n</div></div></section><section aria-labelledby="единицы_вьюпорта"><h2 id="единицы_вьюпорта"><a>Единицы вьюпорта</a></h2><div class="section-content"><p>Вьюпо́рт — это видимая область вашей страницы в браузере, который вы используете для просмотра сайта. В CSS у нас есть единицы измерения, которые относятся к размеру вьюпорта — <code>vw</code> единицы ширины вьюпорта и <code>vh</code> высоты вьюпорта. Используя эти единицы измерения, вы можете изменять размер чего-либо относительно вьюпорта пользователя.</p>\n<p><code>1vh</code> равен 1% от высоты вьюпорта и <code>1vw</code> равен 1% ширины вьюпорта. Вы можете использовать эти единицы измерения для размеров блоков, а также текста. В приведенном ниже примере у нас есть блок размером 20vh и 20vw. В блоке есть буква <code>A</code>, которой присвоено значение <a><code>font-size</code></a> 10vh.</p>\n<p><strong>Если вы измените величину <code>vh</code> и <code>vw</code> — это изменит размер блока или шрифт; изменение размера вьюпорта также изменит их размеры, поскольку они имеют размер заданный относительно вьюпорта. Чтобы увидеть изменение примера при изменении размера вьюпорта, вам нужно будет загрузить пример в новое окно браузера, размер которого можно изменить (поскольку встроенное приложение <code>&lt;iframe&gt;</code>, содержащее показанный выше пример, является его окном просмотра). <a class="external" target="_blank">Откройте пример</a>, измените размер окна браузера и посмотрите, что происходит с размером поля и текста.</strong></p>\n<p>Размеры объектов задаваемые в соответствии с вьюпортом могут быть полезны в ваших проектах. Например, если вы хотите, чтобы основная секция отображалась перед остальным контентом, установите для этой части страницы высоту 100vh, это приведет к выталкиванию остального контента ниже видимой области, что означает, что он появится только после того, как страницу прокрутят вниз.</p></div></section><section aria-labelledby="проверьте_свои_навыки!"><h2 id="проверьте_свои_навыки!"><a>Проверьте свои навыки!</a></h2><div class="section-content"><p>В этой статье мы рассмотрели многое, но можете ли вы вспомнить самую важную информацию? Вы можете найти дополнительные тесты, чтобы убедиться, что вы сохранили эту информацию, прежде чем двигаться дальше - см. <a class="only-in-en-us" title="Currently only available in English (US)">Проверка своих навыков: задание размеров <small>(en-US)<small></small></small></a>.</p></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Этот урок дал вам краткое изложение некоторых ключевых проблем, с которыми вы можете столкнуться при определении размеров объектов в Интернете. Когда вы перейдете к <a>CSS раскладке</a>, изменение размеров станет очень важным для освоения различных методов раскладки, поэтому перед тем, как двигаться дальше, стоит разобраться в концепциях.</p></div></section>',
					works: [],
				},
				{
					title: 'Элементы изображений, медиа и форм',
					chapter: 2.22,
					content:
						'<header><h1>Элементы изображений, медиа и форм</h1></header><div class="section-content">\n<p>В этом уроке мы рассмотрим, как обрабатываются определённые специальные элементы в CSS. Элементы изображений, других медиа и форм ведут себя иначе при их стилизации в CSS чем обычные блоки. Понимание того, что возможно, а что нет спасут вас от лишних разочарований и этот урок прольёт свет на некоторые из этих основных вещей, которые вам нужно знать.</p>\n</div><section aria-labelledby="замещаемые_элементы"><h2 id="замещаемые_элементы"><a>Замещаемые элементы</a></h2><div class="section-content"><p>Изображения и видео описываются как <strong><a>Замещаемые элементы</a></strong>. Это значит, что CSS не может влиять на внутреннюю планировку этих элементов — только на их позицию на странице среди других элементов. Однако, как мы увидим, существуют различные вещи, которые CSS может сделать с изображением.</p>\n<p>Конкретные замещаемые элементы, такие как изображения и видео, можно также описать, как элементы имеющие <strong>соотношение сторон</strong>. Это значит, что такой элемент имеет размер как по горизонтали (x) так и по вертикали (y) и будет отображаться используя "родные" размеры файла по умолчанию.</p></div></section><section aria-labelledby="размер_изображений_калибровка"><h2 id="размер_изображений_калибровка"><a>Размер изображений (калибровка)</a></h2><div class="section-content"><p>Как вы уже знаете из этих уроков, всё в CSS генерирует блоки. Если вы поместите файл изображения внутрь блока, который больше или меньше исходного размера файла изображения в обоих направлениях, то он отобразиться либо в меньшем размере чем блок, либо перекроет его. Вам нужно принять решение с тем, что произойдёт с перекрытием.</p>\n<p>В примере ниже у нас два блока, оба имеют размер по 200px:</p>\n<ul>\n  <li>Один содержит изображение, которое 200px — оно меньше, чем блок и не растягивается что бы заполнить его.</li>\n  <li>Второй больше 200px и перекрывает блок.</li>\n</ul>\n<p>Так что же мы можем сделать с проблемой перекрывания?</p>\n<p>Как мы учили в <a>нашем предыдущем уроке</a>, распространённая техника — это сделать <a><code>max-width</code></a> изображения - 100%. Это позволит уменьшить размер изображения по отношению к блоку, но не увеличит его. Такой метод будет работать и с другими замещаемыми элементами такими как <a><code>&lt;video&gt;</code></a> или <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;iframe&gt;</code> <small>(en-US)<small></small></small></a>.</p>\n<p><strong>Попробуйте добавить <code>max-width: 100%</code> к элементу <code>&lt;img&gt;</code> в примере выше. Вы увидите, что меньшее изображение останется неизмененным, а большее изображение станет меньше, чтобы заполнить блок.</strong></p>\n<p>Вы можете сделать другие варианты изображений внутри контейнеров. Например, вы можете захотеть дать изображению такие размеры, чтоб оно полностью покрывало блок.</p>\n<p>Здесь вам может помочь свойство <a><code>object-fit</code></a>. Используя <code>object-fit</code>, можно определять размеры замещаемого элемента для заполнения блока различными способами.</p>\n<p>Ниже мы использовали значение <code>cover</code>, которое уменьшает изображение, сохраняя соотношение сторон так, что он аккуратно заполняет блок. Поскольку соотношения сторон сохраняются, некоторые части изображения будут обрезаны блоком.</p>\n<p>Если мы используем <code>contain</code> в качестве значения, изображение будет уменьшаться до тех пор, пока не станет достаточно маленьким чтобы заполнить блок. Это приведёт к "почтовой упаковке", если оно не будет иметь такого же соотношения сторон, как блок.</p>\n<p>Вы также можете попробовать значение <code>fill</code>, которое будет заполнять блок, но при этом не сохранять соотношение сторон.</p></div></section><section aria-labelledby="замещаемые_элементы_в_вёрстке"><h2 id="замещаемые_элементы_в_вёрстке"><a>Замещаемые элементы в вёрстке</a></h2><div class="section-content"><p>При использовании различных методов вёрстки CSS на замещаемых элементах, вы можете обнаружить, что они ведут себя немного иначе, чем другие элементы. Например, во flex или grid layout элементы растягиваются по умолчанию чтобы заполнить всю площадь. Изображения растягиваться не будут, вместо этого они будут выравнены на начало площади flex- или grig-контейнера.</p>\n<p>Вы можете увидеть, как это происходит в примере ниже, где мы имеем grid-контейнер из двух столбцов и двух строк, который содержит 4 объекта. Все <code>&lt;div&gt;</code> элементы имеют цвет фона и растягиваются чтобы заполнить строки и столбцы. Однако, изображение не растягивается.</p>\n<p>Если вы изучаете эти уроки по порядку, тогда вы, возможно, ещё не рассматривали layout. Просто держите в уме, что замещаемые элементы, становясь частью grid- или flex-разметки, ведут себя иначе по умолчанию, главным образом, чтобы избежать их странного растяжения по разметке.</p>\n<p>Для того чтобы заставить изображение растянуться чтобы заполнить grid-ячейку, вы должны сделать что-то наподобие следующего:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">img {\n  width: 100%;\n  height: 100%;\n}\n</pre></div>\n<p>Это, однако, растянет изображение, и скорее всего это не то чего бы вам хотелось делать.</p></div></section><section aria-labelledby="элементы_форм"><h2 id="элементы_форм"><a>Элементы форм</a></h2><div class="section-content"><p>Элементы форм могут быть сложной проблемой когда дело касается их стилизации в CSS, и <a>Web Forms module</a> содержит детальные руководства по хитрым аспектам стилизации элементов форм, которые я не буду представлять здесь в полном объёме. В этом разделе статьи стоит выделить несколько ключевых моментов.</p>\n<p>Многие элементы управления форм добавляются на вашу страницу с помощью элемента <a><code>&lt;input&gt;</code></a> — он определяет простые поля формы, такие как ввод текста, и более сложные поля, добавленные в HTML5, такие как средства выбора цвета и даты. Существуют некоторые дополнительные элементы, такие как <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;textarea&gt;</code> <small>(en-US)<small></small></small></a> для ввода многострочного текста, а также элементы которые содержали части маркировки форм, такие как <a><code>&lt;fieldset&gt;</code></a> и <a><code>&lt;legend&gt;</code></a>.</p>\n<p>HTML5 также содержит атрибуты, которые позволяют веб-разработчикам указывать какие поля являются обязательными и даже тип контента, который необходимо вводить. Если пользователь вводит неожидаемые данные или оставляет обязательные поля пустыми, браузер может выдать сообщение об ошибке. Разные браузеры несовместимы в том, сколько стилей и настроек они допускают для таких элементов.</p></div></section><section aria-labelledby="стилизация_элементов_ввода_текста"><h3 id="стилизация_элементов_ввода_текста"><a>Стилизация элементов ввода текста</a></h3><div class="section-content"><p>Элементы, позволяющие вводить текст, такие как <code>&lt;input type="text"&gt;</code>, конкретные типы вроде <code>&lt;input type="email"&gt;</code>, и элемент <code>&lt;textarea&gt;</code>, являются довольно простыми в стилизации и как правило ведут себя также, как и другие блоки на вашей странице. Однако, стилизация по умолчанию таких элементов будет отличаться в зависимости от операционной системы и браузера которые использует пользователь, посещая сайт.</p>\n<p>В примере ниже мы стилизовали несколько вводов текста используя CSS — вы можете увидеть, что такие вещи как borders, margins и padding, все применяются так как вы бы ожидали. Мы используем селекторы атрибутов для выборов различных типов ввода. Попробуйте изменить то, как эти формы выглядят, регулируя границы, добавляя цвет фона полям и изменяя шрифты padding.</p>\n<div class="notecard warning" id="sect1">\n  <p><strong>Предупреждение:</strong> <strong>Важно:</strong> При изменении стиля элементов формы следует соблюдать осторожность, чтобы убедиться, что для пользователя все ещё очевидно, что они являются элементами форм. Вы можете создать форму ввода без границ и фона, которая практически неотличима от окружающего контента и это может сделать очень сложно распознаваемой, чтобы заполнить её.</p>\n</div>\n<p>Как объяснено в уроке <a>стилизация форм</a> в части HTML этого курса, многие из более сложных типов ввода определяются операционной системой и не доступны для стилизации. Поэтому вы всегда должны предполагать, что формы будут выглядеть по-разному для разных пользователей и тестировать сложные формы во многих браузерах.</p></div></section><section aria-labelledby="наследование_и_элементы_форм"><h3 id="наследование_и_элементы_форм"><a>Наследование и элементы форм</a></h3><div class="section-content"><p>В некоторых браузерах, элементы форм не наследуют стиль шрифтов по умолчанию. Поэтому если вы хотите быть уверенными что ваши поля форм используют шрифт определённый в body или родительском элементе, вы должны добавить это правило в ваш CSS.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">button,\ninput,\nselect,\ntextarea {\n  font-family: inherit;\n  font-size: 100%;\n}\n</pre></div></div></section><section aria-labelledby="элементы_форм_и_box-sizing"><h3 id="элементы_форм_и_box-sizing"><a>Элементы форм и box-sizing</a></h3><div class="section-content"><p>В разных браузерах элементы формы используют разные правила определения размеров блоков для разных виджетов. вы изучали свойство <code>box-sizing</code> в <a>нашем уроке Блоки в CSS</a> и можете использовать эти знания при стилизации форм для обеспечения единообразия при настройке ширины и высоты элементов форм.</p>\n<p>Для единообразия рекомендуется устанавливать margin и padding на <code>0</code> для всех элементов, а затем добавлять их (margin и padding) при стилизации отдельных элементов.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">button,\ninput,\nselect,\ntextarea {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n</pre></div></div></section><section aria-labelledby="другие_полезные_настройки"><h3 id="другие_полезные_настройки"><a>Другие полезные настройки</a></h3><div class="section-content"><p>В дополнение к правилам отмеченных выше, вы должны также установить <code>overflow: auto</code> для <code>&lt;textarea&gt;</code> чтобы IE не отображал полосу прокрутки, когда в этом нет необходимости:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">textarea {\n  overflow: auto;\n}\n</pre></div></div></section><section aria-labelledby="собираем_все_вместе_в_перезагрузку"><h3 id="собираем_все_вместе_в_перезагрузку"><a>Собираем все вместе в "перезагрузку"</a></h3><div class="section-content"><p>В качестве последнего шага, мы можем обернуть различные свойства, обсуждаемые выше, в следующую «форму перезагрузки», чтобы обеспечить согласованную основу для работы. Это включает все элементы упомянутые в последних трёх разделах:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">button,\ninput,\nselect,\ntextarea {\n  font-family: inherit;\n  font-size: 100%;\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\ntextarea {\n  overflow: auto;\n}\n</pre></div>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Normalizing stylesheets are used by many developers to create a set of baseline styles to use on all projects. Typically these do similar things to those described above, making sure that anything different across browsers is set to a consistent default before you do your own work on the CSS. They are not as important as they once were, as browsers are typically more consistent than in the past. However if you want to take a look at one example, check out <a class="external" target="_blank">Normalize.css</a>, which is a very popular stylesheet used as a base by many projects.</p>\n</div>\n<p>Для дополнительной информации по стилизации форм, посмотрите две статьи в разделе HTML этого руководства.</p>\n<ul>\n  <li><a>Styling web forms</a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)">Advanced form styling <small>(en-US)<small></small></small></a></li>\n</ul></div></section><section aria-labelledby="summary"><h2 id="summary"><a>Summary</a></h2><div class="section-content"><p>This lesson has highlighted some of the differences you will encounter when working with images, media, and other unusual elements in CSS. In the next article we\'ll look over a few tips you\'ll find useful when you have to style HTML tables.</p></div></section><section aria-labelledby="in_this_module"><h2 id="in_this_module"><a>In this module</a></h2><div class="section-content"><ol>\n  <li><a>Cascade and inheritance</a></li>\n  <li><a>CSS selectors</a>\n    <ul>\n      <li><a>Type, class, and ID selectors</a></li>\n      <li><a>Attribute selectors</a></li>\n      <li><a>Pseudo-classes and pseudo-elements</a></li>\n      <li><a>Combinators</a></li>\n    </ul>\n  </li>\n  <li><a>The box model</a></li>\n  <li><a>Backgrounds and borders</a></li>\n  <li><a>Handling different text directions</a></li>\n  <li><a>Overflowing content</a></li>\n  <li><a>Values and units</a></li>\n  <li><a>Sizing items in CSS</a></li>\n  <li><a aria-current="page">Images, media, and form elements</a></li>\n  <li><a>Styling tables</a></li>\n  <li><a>Debugging CSS</a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)">Organizing your CSS <small>(en-US)<small></small></small></a></li>\n</ol></div></section>',
					works: [],
				},
				{
					title: 'Стилизация таблиц',
					chapter: 2.23,
					content:
						'<header><h1>Стилизация таблиц</h1></header><div class="section-content">\n<p>Стилизация HTML таблиц это не самая гламурная работа в мире, но иногда нам нужно это делать. Эта статья руководство как сделать, чтобы ваши HTML таблицы выглядели хорошо, с некоторыми свойствами подробно рассмотренными в предыдущих статьях.</p>\n</div><section aria-labelledby="типичная_html_таблица"><h2 id="типичная_html_таблица"><a>Типичная HTML таблица</a></h2><div class="section-content"><p>Давайте начнём с рассмотрения типичной HTML таблицы. Когда мы говорим о примерах типичных HTML таблиц обычно речь идёт о обуви, погоде или сотрудниках; мы решили сделать это более интересным создав таблицу о знаменитых панк группах Великобритании. Разметка выглядит следующим образом:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><table>\n  <caption>\n    A summary of the UK\'s most famous punk bands\n  </caption>\n  <thead>\n    <tr>\n      <th scope="col">Band</th>\n      <th scope="col">Year formed</th>\n      <th scope="col">No. of Albums</th>\n      <th scope="col">Most famous song</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope="row">Buzzcocks</th>\n      <td>1976</td>\n      <td>9</td>\n      <td>Ever fallen in love (with someone you shouldn\'t\'ve)</td>\n    </tr>\n    <tr>\n      <th scope="row">The Clash</th>\n      <td>1976</td>\n      <td>6</td>\n      <td>London Calling</td>\n    </tr><tr>\n      <th scope="row">The Stranglers</th>\n      <td>1974</td>\n      <td>17</td>\n      <td>No More Heroes</td>\n    </tr>\n  </tbody>\n  <tfoot>\n    <tr>\n      <th scope="row" colspan="2">Total albums</th>\n      <td colspan="2">77</td>\n    </tr>\n  </tfoot>\n</table>\n\n    ... some rows removed for brevity\n\n    \n</pre></div>\n<p>Таблица размечена, немного стилизована и понятна, благодаря использованию таких свойств как <a class="only-in-en-us" title="Currently only available in English (US)"><code>scope</code> <small>(en-US)<small></small></small></a>, <a><code>&lt;caption&gt;</code></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;thead&gt;</code> <small>(en-US)</small></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;tbody&gt;</code> <small>(en-US)</small></a> и т.д. К сожалению при просмотре в браузере она не очень хорошо выглядит (посмотреть можно здесь <a class="external" target="_blank">punk-bands-unstyled.html</a>):</p>\n<p>\n  \n</p>\n<p>Это выглядит достаточно грубо, трудно читаемо и скучно. Нам нужно использовать немного CSS чтобы все исправить.</p></div></section><section aria-labelledby="активное_обучение_стилизация_таблицы"><h2 id="активное_обучение_стилизация_таблицы"><a>Активное обучение: Стилизация таблицы</a></h2><div class="section-content"><p>В этой части обучения мы будем работать над тем чтобы стилизовать наш пример таблицы.</p>\n<ol>\n  <li>В начале необходимо сделать копию <a class="external" target="_blank">sample markup</a>, загрузить оба изображения (<a class="external" target="_blank">noise</a> и <a class="external" target="_blank">leopardskin</a>), и вставить эти файлы в отдельную папку на вашем компьютере.</li>\n  <li>Следующее, это создать новый файл <code>style.css</code> и сохранить его в той же папке вместе с другими файлами.</li>\n  <li>Подключить CSS в HTML для этого разместить следующую строку в HTML внутри <a><code>&lt;head&gt;</code></a>:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><link href="style.css" rel="stylesheet" type="text/css">\n</pre></div>\n  </li>\n</ol></div></section><section aria-labelledby="отступы_и_разметка"><h3 id="отступы_и_разметка"><a>Отступы и разметка</a></h3><div class="section-content"><p>Первое что нам нужно это разобраться с отступами/разметкой, так как по умолчанию стилизация таблцы выглядит неразборчиво! Сделаем это, добавив CSS в ваш <code>style.css</code> файл:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">/* Отступы */\n\ntable {\n  table-layout: fixed;\n  width: 100%;\n  border-collapse: collapse;\n  border: 3px solid purple;\n}\n\nthead th:nth-child(1) {\n  width: 30%;\n}\n\nthead th:nth-child(2) {\n  width: 20%;\n}\n\nthead th:nth-child(3) {\n  width: 15%;\n}\n\nthead th:nth-child(4) {\n  width: 35%;\n}\n\nth,\ntd {\n  padding: 20px;\n}\n</pre></div>\n<p>Наиболее важные части следующие:</p>\n<ul>\n  <li>\n    Свойство <a class="only-in-en-us" title="Currently only available in English (US)"><code>table-layout</code> <small>(en-US)</small></a> со значением <code>fixed</code> как правило полезно использовать для вашей таблицы, это делает поведение таблицы немного более предсказуемым, чем значение по умолчанию. Обычно столбцы таблицы имеют размер в зависимости от того сколько в них контента, что приводит иногда к некоторым странным результатам. Когда <code>table-layout: fixed</code>, размер ваших столбцов определяется шириной их заголовков и делает их контент соответствующего размера. Вот почему вы выбрали четыре разных заголовка с помощью селектора <code>thead th:nth-child(n)</code> (<a><code>:nth-child</code></a>) ("Выберите <em>n-ый</em> дочерний элемент <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;th&gt;</code> <small>(en-US)</small></a> в последовательности, внутри элемента <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;thead&gt;</code> <small>(en-US)</small></a>") и задать им заданную в процентах ширину. Ширина колонки соответствует ширине её заголовка, это правильное решение при определении размеров колонок таблицы. Крис Койер (Chris Coyier) более подробно рассматривает эту технику в статье <a class="external" target="_blank">Fixed Table Layouts</a>.\n    Мы также использовали <a><code>width</code></a> 100%, что означает, что таблица заполнит любой контейнер и будет отзывчивой (хотя для этого потребуется ещё некоторая работа для правильного отображения на экранах небольших размеров).\n  </li>\n  <li>Свойство <a class="only-in-en-us" title="Currently only available in English (US)"><code>border-collapse</code> <small>(en-US)</small></a> со значением <code>collapse</code> это стандартная практика при стилизации любой таблицы. По умолчанию, когда вы задали рамки для элементов таблицы, все они будут иметь пробелы между собой, как показано на рисунке ниже: \n    Это не очень хорошо выглядит (хотя может это то что вам нужно, кто знает?). Если установить <code>border-collapse: collapse;</code> рамки схлопываются в одну и так выглядит намного лучше: \n    \n  </li>\n  <li>Мы установили <a><code>border</code></a> вокруг всей таблицы, это понадобится когда чуть позже мы будет устанавливать рамки вокруг header и footer таблицы — когда по периметру всей таблицы нет рамки и граница заканчивается просто отступом, таблица выглядит странно и разрозненно.</li>\n  <li>Мы установили <a><code>padding</code></a> на элементах <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;th&gt;</code> <small>(en-US)</small></a> и <a><code>&lt;td&gt;</code></a> — это создаёт в талице воздух, который позволяет ей дышать, делая её более понятной.</li>\n</ul>\n<p>На этом этапе наша таблица выглядит уже гораздо лучше:</p>\n<p>\n  \n</p></div></section><section aria-labelledby="немного_простой_типографики"><h3 id="немного_простой_типографики"><a>Немного простой типографики</a></h3><div class="section-content"><p>Теперь мы ещё кое-что изменим.</p>\n<p>Во-первых, мы пойдём и найдём на <a class="external" target="_blank">Google Fonts</a> шрифт который подходит в нашей ситуации с таблицей о панк группах. Вы можете можете выбрать для себя другой шрифт если захотят, тогда вам понадобится заменить представленный <a><code>&lt;link&gt;</code></a> элемент и изменить объявление <a><code>font-family</code></a> на выбранный вами Google Fonts шрифт.</p>\n<p>Добавьте элемент <a><code>&lt;link&gt;</code></a> в блок head вашего HTML, на строчку выше существующего элемента <code>&lt;link&gt;</code>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><link href="https://fonts.googleapis.com/css?family=Rock+Salt" rel="stylesheet" type="text/css">\n</pre></div>\n<p>Затем добавьте следующий CSS в ваш <code>style.css</code> файл, ниже предыдущего кода:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">/* Типографика */\n\nhtml {\n  font-family: "helvetica neue", helvetica, arial, sans-serif;\n}\n\nthead th,\ntfoot th {\n  font-family: "Rock Salt", cursive;\n}\n\nth {\n  letter-spacing: 2px;\n}\n\ntd {\n  letter-spacing: 1px;\n}\n\ntbody td {\n  text-align: center;\n}\n\ntfoot th {\n  text-align: right;\n}\n</pre></div>\n<p>Здесь нет ничего специально для таблиц, мы просто настраиваем стилизацию шрифтов, чтобы упростить чтение:</p>\n<ul>\n  <li>Мы установили доступный глобально шрифт sans-serif; это вполне стандартный стилистический выбор. Мы установили выбранный нами шрифт для заголовков внутри элементов <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;thead&gt;</code> <small>(en-US)</small></a> и <a><code>&lt;tfoot&gt;</code></a>, который подходит нам по тематике панков.</li>\n  <li>Мы добавили немного <a><code>letter-spacing</code></a> в заголовках и ячейках которым необходимо добавить читаемости. Опять же это основной стилистический приём.</li>\n  <li>Мы выравниваем по центру текст ячейках внутри <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;tbody&gt;</code> <small>(en-US)</small></a> чтобы они совпадали с заголовками. По умолчанию у ячеек свойство <a><code>text-align</code></a> имеет значение <code>left</code>, а заголовки значение <code>center</code>, но обычно выглядит лучше если они выравниваются в одном стиле. По умолчанию, чтобы внешний вид заголовков отличался у них задан жирный шрифт.</li>\n  <li>Мы выровняли заголовок справа внутри <a><code>&lt;tfoot&gt;</code></a> так чтобы он визуально ассоциировался с соответствующими ему данными.</li>\n</ul>\n<p>В результате таблица выглядит немного аккуратнее:</p>\n<p>\n  \n</p></div></section><section aria-labelledby="графика_и_цвета"><h3 id="графика_и_цвета"><a>Графика и цвета</a></h3><div class="section-content"><p>И наконец-то графика и цвета! Наша таблица заполнена тем что имеет отношение к панкам, поэтому нам нужно придать ей яркий впечатляющий вид. Не беспокойтесь, вам не обязательно делать таблицу слишком кричащей — вы можете выбрать что-то более утончённое и со вкусом.</p>\n<p>Начнём с добавления в конец файла <code>style.css</code> следующего CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">/* Графика и цвета */\n\nthead,\ntfoot {\n  background: url(leopardskin.jpg);\n  color: white;\n  text-shadow: 1px 1px 1px black;\n}\n\nthead th,\ntfoot th,\ntfoot td {\n  background: linear-gradient(to bottom, rgb(0 0 0 / 10%), rgb(0 0 0 / 50%));\n  border: 3px solid purple;\n}\n</pre></div>\n<p>Опять же здесь нет ничего конкретно для таблиц, но стоит отметить несколько вещей.</p>\n<p>Мы добавили <a><code>background-image</code></a> в <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;thead&gt;</code> <small>(en-US)</small></a>, <a><code>&lt;tfoot&gt;</code></a> и изменили <a class="only-in-en-us" title="Currently only available in English (US)"><code>color</code> <small>(en-US)</small></a> для всего текста внутри header и footer на белый (и ещё <a><code>text-shadow</code></a>) для лучшей читаемости. Вы должны всегда быть уверены что ваш текст хорошо контрастирует с фоном, для обеспечения читаемости.</p>\n<p>Также мы добавили линейный градиент для <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;th&gt;</code> <small>(en-US)</small></a> и <a><code>&lt;td&gt;</code></a> элементов внутри header и footer для придания лёгкой приятной текстуры, а также установили этим элементам яркие пурпурные границы. Полезно иметь несколько вложенных элементов, это позволяет накладывать несколько стилей друг на друга. Да, мы могли бы установить и фоновое изображение, и линейный градиент на <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;thead&gt;</code> <small>(en-US)</small></a> и <a><code>&lt;tfoot&gt;</code></a> элементы используя множественные фоновые изображения, но мы решили сделать это отдельно для старых браузеров, которые не поддерживают <a>несколько фоновых изображений</a> и <a class="only-in-en-us" title="Currently only available in English (US)">линейные градиенты <small>(en-US)<small></small></small></a>.</p>\n<h4 id="полосатая_зебра">Полосатая зебра</h4>\n<p>Мы хотели бы посвятить целый раздел, чтобы показать вам как реализовать <strong>полосы зебры</strong> — чередующиеся цветные строки которые упрощают чтение разных строк в вашей таблице. Добавим следующий CSS в ваш <code>style.css</code> файл:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">/* Полосатая зебра */\n\ntbody tr:nth-child(odd) {\n  background-color: #ff33cc;\n}\n\ntbody tr:nth-child(even) {\n  background-color: #e495e4;\n}\n\ntbody tr {\n  background-image: url(noise.png);\n}\n\ntable {\n  background-color: #ff33cc;\n}\n</pre></div>\n<ul>\n  <li>Ранее вы видели как <a><code>:nth-child</code></a> селектор использовался для выбора специфичных дочерних элементов. В качестве параметра также может быть передана формула, тогда он будет выбирать последовательность элементов. Так формула <code>2n-1</code> выберет все нечётные дочерние элементы (1, 3, 5 и т.д.), а формула <code>2n</code> выберет все чётные (2, 4, 6 и т.д.). Мы использовали в нашем коде ключевые слова <code>odd</code> и <code>even</code>, которые делают тоже самое что и формулы выше. В данном случае мы устанавливаем чётным и нечётным строкам разные (яркие) цвета.</li>\n  <li>Ещё мы добавили повторяющийся плиткой фон ко всем строкам тела таблицы, который добавляет немного шума (полупрозрачный <code>.png</code> с небольшим количеством визуальных искажений на нем), чтобы получилась некоторая текстура.</li>\n  <li>И наконец мы установили для таблицы сплошной цвет фона, который обеспечит фон строкам таблицы в том случае если браузер не поддерживает селектор <code>:nth-child</code>.</li>\n</ul>\n<p>Этот взрыв цвета выглядит следующим образом:</p>\n<p>\n  \n</p>\n<p>То что получилось может быть не в вашем вкусе, но основная идея была в том, что мы попытались сделать таблицу которая не будет скучной и академической.</p></div></section><section aria-labelledby="стилизация_заголовка"><h3 id="стилизация_заголовка"><a>Стилизация заголовка</a></h3><div class="section-content"><p>Последнее что мы сделаем с нашей таблицей это стилизация заголовка. Для этого добавим следующие строки в наш файл <code>style.css</code>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">/* Заголовок */\n\ncaption {\n  font-family: "Rock Salt", cursive;\n  padding: 20px;\n  font-style: italic;\n  caption-side: bottom;\n  color: #666;\n  text-align: right;\n  letter-spacing: 1px;\n}\n</pre></div>\n<p>Здесь нет ничего особенного, кроме свойства <a class="only-in-en-us" title="Currently only available in English (US)"><code>caption-side</code> <small>(en-US)</small></a>, которое имеет значение <code>bottom</code>. В этом случае заголовок будет размещён внизу таблицы и это вместе со всем остальным обеспечивает нашей таблице окончательный вид (можно посмотреть по ссылке <a class="external" target="_blank">punk-bands-complete.html</a>):</p>\n<p>\n  \n</p></div></section><section aria-labelledby="активное_обучение_стилизация_вашей_собственной_таблицы"><h2 id="активное_обучение_стилизация_вашей_собственной_таблицы"><a>Активное обучение: Стилизация вашей собственной таблицы</a></h2><div class="section-content"><p>Теперь мы хотим, чтобы вы взяли наш пример таблицы (или использовали собственный!) и сделали что-то значительно более стильное и менее безвкусное чем наша таблица.</p></div></section><section aria-labelledby="стилизация_таблицы_быстрые_советы"><h2 id="стилизация_таблицы_быстрые_советы"><a>Стилизация таблицы быстрые советы</a></h2><div class="section-content"><p>Короткий список наиболее полезных вещей рассмотренных выше:</p>\n<ul>\n  <li>Сделайте свою разметку простой и гибкой, например, используя для этого проценты, что сделает дизайн более отзывчивым.</li>\n  <li>Используйте <a class="only-in-en-us" title="Currently only available in English (US)"><code>table-layout</code> <small>(en-US)</small></a><code>: fixed</code> для более понятного поведения разметки, при этом легко установить ширину столбцов, установив ширину <a><code>width</code></a> для заголовков таблицы (<a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;th&gt;</code> <small>(en-US)</small></a>).</li>\n  <li>Используйте <a class="only-in-en-us" title="Currently only available in English (US)"><code>border-collapse</code> <small>(en-US)</small></a><code>: collapse</code>, которое схлопнет границы элементов таблицы, что обеспечит аккуратный внешний вид.</li>\n  <li>Используйте <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;thead&gt;</code> <small>(en-US)</small></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;tbody&gt;</code> <small>(en-US)</small></a> и <a><code>&lt;tfoot&gt;</code></a> чтобы разбить вашу таблицу на логические фрагменты и предоставив таким образом дополнительные точки для применения CSS, это даёт возможность накладывать стили друг на друга, если это необходимо.</li>\n  <li>Используйте полоски зебры, чтобы облегчить чтение между строк.</li>\n  <li>Используйте <a><code>text-align</code></a> чтобы выровнять текст в <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;th&gt;</code> <small>(en-US)</small></a> и <a><code>&lt;td&gt;</code></a> для более аккуратного и удобного оформления.</li>\n</ul></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Несмотря на головокружительные успехи достигнутые в стилизации таблиц, у нас есть ещё кое-что чем мы можем занять наше время. В следующей главе мы рассмотрим некоторые продвинутые эффекты, уже устоявшиеся (например, тени box shadows) и те которые только недавно появились в браузерах, такие как режимы наложения blend-mode и фильтры.</p></div></section><section aria-labelledby="в_этом_блоке"><h2 id="в_этом_блоке"><a>В этом блоке</a></h2><div class="section-content"><ul>\n  <li><a>Box model recap</a></li>\n  <li><a>Backgrounds</a></li>\n  <li><a>Borders</a></li>\n  <li><a aria-current="page">Стилизация таблиц</a></li>\n  <li><a>Advanced box effects</a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)">Creating fancy letterheaded paper <small>(en-US)<small></small></small></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)">A cool looking box <small>(en-US)<small></small></small></a></li>\n</ul></div></section>',
					works: [],
				},
				{
					title: 'Отладка CSS',
					chapter: 2.24,
					content:
						'<header><h1>Отладка CSS</h1></header><div class="section-content">\n<p>Порой, при написании CSS, вы будете сталкиваться с проблемой, при которой будет казаться, что CSS не делает того, чего вы ожидаете от него. Возможно, вы считаете, что определённый селектор должен соответствовать элементу, но ничего не происходит, или поле имеет размер, отличный от ожидаемого. Эта статья поможет вам с тем, как отладить CSS проблемы и покажет вам как DevTools (инструменты разработчика), включённые во все современные браузеры, могут помочь разобраться с тем, что происходит.</p>\n</div><section aria-labelledby="как_получить_доступ_к_devtools_браузера"><h2 id="как_получить_доступ_к_devtools_браузера"><a>Как получить доступ к DevTools браузера</a></h2><div class="section-content"><p>Статья <a>What are browser developer tools</a> это обновлённое руководство объясняющее как получить доступ к инструментам разных браузеров и платформ. Хотя вы можете выбрать в основном разрабатывать в конкретном браузере и поэтому инструменты, включённые в этот браузер, будут вам знакомы больше всего, стоит знать, как получать доступ к инструментам и в других браузерах. Это поможет вам если вы наблюдаете разное отображение среди разных браузеров.</p>\n<p>Вы также обнаружите, что браузеры фокусировались на различных областях при создании своих DevTools. Например в Firefox существует несколько замечательных инструментов для визуальной работы с CSS Layout (разметкой), позволяющих вам проводить инспекцию и править <a class="only-in-en-us external" title="Currently only available in English (US)" target="_blank">Grid Layouts <small>(en-US)<small></small></small></a>, <a class="only-in-en-us external" title="Currently only available in English (US)" target="_blank">Flexbox <small>(en-US)<small></small></small></a>, и <a class="external" target="_blank">Shapes</a>. Тем не менее, все другие браузеры имеют схожие фундаментальные инструменты, например для инспекции свойств и значений применённых к элементам на вашей странице и для выполнения изменений к ним в редакторе.</p>\n<p>В этом уроке мы рассмотрим некоторые полезные функции Firefox DevTools для работы с CSS. Для того чтобы сделать это я буду использовать <a class="external" target="_blank">файл примера</a>. Загрузите его в новой вкладке если хотите следовать и откройте ваш DevTools как описано в статье, ссылка на которую дана выше.</p></div></section><section aria-labelledby="dom_vs_view_source"><h2 id="dom_vs_view_source"><a>DOM vs View Source</a></h2><div class="section-content"><p>То, что может сбить с толку новичков в DevTools, — это разница между тем, что вы видите когда <a class="only-in-en-us external" title="Currently only available in English (US)" target="_blank">просматриваете источник <small>(en-US)<small></small></small></a> веб-страницы или смотрите на HTML файл который поместили на сервер и то что вы видите на <a class="external" target="_blank">HTML панели</a> DevTools. Хотя это выглядит примерно так же, как то, что вы видите через View Source, существуют некоторые отличия.</p>\n<p>В визуализированном DOM браузер мог скорректировать некоторый плохо-написанный HTML за вас. Если вы неправильно закрыли элемент, например открывали <code>&lt;h2&gt;</code>, но закрыли <code>&lt;/h3&gt;</code>, браузер поймёт, что вы хотели сделать и HTML в DOM будет правильно закрывать <code>&lt;h2&gt;</code> с <code>&lt;/h2&gt;</code>. Браузер также нормализует весь HTML,а DOM также покажет любые изменения сделанные через JavaScript.</p>\n<p>View Source же для сравнения — это просто исходный код HTML, хранящийся на сервере. <a class="external" target="_blank">HTML дерево</a> в вашем DevTools показывает, что именно браузер отображает в любой момент времени, что даёт вам представление от том, что действительно происходит.</p></div></section><section aria-labelledby="инспекция_применённого_css"><h2 id="инспекция_применённого_css"><a>Инспекция применённого CSS</a></h2><div class="section-content"><p>Выбирать элемент на вашей странице можно либо правым/ctrl-кликом по нему и выбрав <em>Inspect</em>, либо выбрав его из дерева HTML в левой панели DevTools. Попробуйте выбрать элемент с классом <code>box1</code>; это первый элемент на странице с блоком, ограниченным рамками вокруг него.</p>\n<p>\n  \n</p>\n<p>Если вы посмотрите на <a class="external" target="_blank">Rules view</a> справа от вашего HTML, вы должны увидеть свойства и значения CSS применённые к элементу. Вы увидите правила, напрямую применённые к классу <code>box1</code> и также CSS который наследуется блоком от предков, в этом случае от <code>&lt;body&gt;</code>. Это полезно в случае, если вы видите, что применяется какой-либо CSS, который вы не ожидали. Вполне возможно, что он наследуется от родительского элемента и вам необходимо добавить правило, чтобы переписать его в контексте этого элемента.</p>\n<p>Также полезна возможность расширения (развёртывания) свойств коротких записей. В нашем примере используется короткая запись <code>margin</code>.</p>\n<p><strong>Кликните по маленькой стрелке для того, чтобы развернуть вид, показывающий полную запись различных свойств и значений.</strong></p>\n<p><strong>Вы можете переключать значения в Rules view в положение включено или выключено если эта панель активна — если навести на неё курсор мыши, появятся флажки. Снимите флажок правила, например, border-radius, и CSS перестанет применяться.</strong></p>\n<p>Вы можете использовать это чтобы делать сравнения по типу A/B, принимая решение если что-то выглядит лучше с применённым правилом или нет, а также это помогает в отладке — например если layout не в порядке и вы пытаетесь разобраться какое свойство является причиной проблемы.</p></div></section><section aria-labelledby="редактирование_значений"><h2 id="редактирование_значений"><a>Редактирование значений</a></h2><div class="section-content"><p>В дополнение к включению и выключению свойств, вы можете редактировать их значения. Возможно, вам захочется посмотреть будет ли другой цвет выглядеть лучше или захотите настроить размер чего-либо. DevTools поможет вам сэкономить кучу времени редактируя таблицу стиля и перезагружая страницу.</p>\n<p><strong>Выбрав <code>box1</code>, кликните на образчик (маленький цветной круг) который показывает цвет, применённый к границе. Откроется панель выбора цвета и сможете попробовать некоторые другие цвета; это действие обновится на странице в режиме реального времени.</strong> <strong>Аналогичным образом вы можете изменить ширину или стиль границ.</strong></p>\n<p>\n  \n</p></div></section><section aria-labelledby="добавление_нового_свойства"><h2 id="добавление_нового_свойства"><a>Добавление нового свойства</a></h2><div class="section-content"><p>Используя DevTools вы можете добавлять новые свойства. Возможно, вы осознали, что не хотите, чтобы ваш блок наследовал размер шрифта элементов <code>&lt;body&gt;</code>, а хотите установить его собственный конкретный размер. Вы можете попробовать это в DevTools до того, как внесёте изменения в ваше CSS файл.</p>\n<p><strong>Вы можете кликнуть по закрывающей фигурной скобке в правиле чтобы начать вводить новое объявление в нем, с этого момента вы можете начинать вводить новое свойство и DevTools покажет список автозаполнения подходящих свойств. Выбрав <code>font-size</code>, вводите значение, которое хотите попробовать. Вы также можете кликнуть на кнопку + чтобы добавить дополнительное правило с тем же селектором и добавить ваши новые правила туда.</strong></p>\n<p>\n  \n</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Также существуют другие полезные функции в Rules view, например объявления с не валидными значениями зачёркнуты. Вы можете узнать больше в <a class="external" target="_blank">Examine and edit CSS</a>.</p>\n</div></div></section><section aria-labelledby="понимание_модели_блоков"><h2 id="понимание_модели_блоков"><a>Понимание модели блоков</a></h2><div class="section-content"><p>В предыдущем уроке мы обсудили <a>модель блоков</a> и тот факт, что у нас есть альтернативная модель блоков, которая изменяет способ расчёта размера элементов основываясь на размере который вы им задаёте, плюс padding и границы. DevTools может действительно помочь вам понять, как вычисляется размер элемента.</p>\n<p><a class="external" target="_blank">Layout view</a> показывает вам диаграмму блочной модели выбранного элемента, вместе с описанием свойств и значений, которые изменяют способ расположения элемента. Это включает описание свойств, которые вы могли и не использовать напрямую к элементу, но которые имеют набор начальных значений.</p>\n<p>В этой панели одним из детальных свойств является свойство <code>box-sizing</code>, которое контролирует какую блочную модель использует элемент.</p>\n<p><strong>Сравните два блока с классами <code>box1</code> и <code>box2</code>. Они оба имеют одинаковую ширину (400px) применённую к ним, однако <code>box1</code> визуально шире. В layout panel вы можете увидеть, что он использует <code>content-box</code>. Это значение, которое принимает размер, который вы даёте элементу и затем добавляет padding</strong> <strong>и ширину границ.</strong></p>\n<p>Элемент с классом <code>box2</code> использует <code>border-box</code>, поэтому здесь padding и граница вычтены из размера, который вы дали элементу. Это означает, что пространство, занимаемое на странице блоком, соответствует указанному вами размеру — в нашем случае <code>width: 400px</code>.</p>\n<p>\n  \n</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Узнать больше на <a class="external" target="_blank">Examining and Inspecting the Box Model</a>.</p>\n</div></div></section><section aria-labelledby="решение_проблем_специфичности"><h2 id="решение_проблем_специфичности"><a>Решение проблем специфичности</a></h2><div class="section-content"><p>Порой во время разработки, в частности когда вам нужно отредактировать CSS на существующем сайте вы, вы столкнётесь с трудностями применения некоторого CSS. Вне зависимости от того, что вы делаете, кажется, что элемент просто не реагирует на CSS. Что же обычно происходит в таких ситуациях - это то, что более специфичный селектор переопределяет ваши изменения и в таких случаях DevTools действительно поможет вам.</p>\n<p>В нашем примере два слова обёрнуты в элемент <code>&lt;em&gt;</code>. Один отображается оранжевым, а второй ярко-розовым. В CSS мы применили:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">em {\n  color: hotpink;\n  font-weight: bold;\n}\n</pre></div>\n<p>Кроме того в таблице стилей есть правило с селектором <code>.special</code>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.special {\n  color: orange;\n}\n</pre></div>\n<p>Как вы помните из урока <a>каскад и наследование</a> где мы обсуждали специфичность, селекторы классов являются более специфичными чем селекторы элементов, и поэтому это то значение которое применяется. DevTools может помочь вам найти такие проблемы, особенно если информация закопана где-то в дебрях огромной таблицы стилей.</p>\n<p><strong>Проведите инспекцию <code>&lt;em&gt;</code> с классом <code>.special</code> и DevTools покажет вам что оранжевый это цвет который применяется, а также отобразит вам свойство <code>color</code> применённое к em зачёркнутым. Теперь вы можете видеть, что класс переопределяет селектор элемента.</strong></p>\n<p>\n  \n</p></div></section><section aria-labelledby="узнайте_больше_о_firefox_devtools"><h2 id="узнайте_больше_о_firefox_devtools"><a>Узнайте больше о Firefox DevTools</a></h2><div class="section-content"><p>На MDN имеется много информации о Firefox DevTools. Взгляните на основной <a class="external" target="_blank">раздел DevTools</a>, а больше деталей о вещах которые коротко рассмотрели в этом уроке смотрите <a class="external" target="_blank">The How To Guides</a>.</p></div></section><section aria-labelledby="отладка_проблем_в_css"><h2 id="отладка_проблем_в_css"><a>Отладка проблем в CSS</a></h2><div class="section-content"><p>DevTools может помочь при решении проблем CSS, итак, когда вы окажетесь в ситуации, где CSS ведёт себя не так, как вы ожидаете, как же вам следует решать эту проблему? Следующие шаги должны помочь.</p></div></section><section aria-labelledby="сделайте_шаг_назад"><h3 id="сделайте_шаг_назад"><a>Сделайте шаг назад</a></h3><div class="section-content"><p>Любая проблема кодирования может быть неприятной, особенно проблемы CSS, потому что зачастую вы не получаете каких-либо сообщений об ошибках чтобы найти решение в интернете. Если вы начинаете разочаровываться оторвитесь от проблемы на время — прогуляйтесь, попейте, пообщайтесь с коллегами или займите себя чем-нибудь другим на время. Иногда решение появляется магическим образом, когда вы перестаёте думать об этой проблеме, а даже если нет, работать над ней гораздо проще, когда вы чувствуете себя отдохнувшими.</p></div></section><section aria-labelledby="валидны_ли_ваши_html_и_css"><h3 id="валидны_ли_ваши_html_и_css"><a>Валидны ли ваши HTML и CSS?</a></h3><div class="section-content"><p>Браузеры ожидают, что CSS и HTML написаны корректно, однако в это же время браузеры очень снисходительны и сделают всё чтобы отобразить вашу веб-страницу даже если у вас есть ошибки в разметке и таблице стилей. Если у вас есть ошибки в коде, то браузеру нужно угадать что вы имели в виду, и он может принять решение не такое какое было у вас в голове. И дополнительно, два разных браузера могут решать проблему двумя разными способами. Поэтому хорошим первым шагом является запуск вашего HTML и CSS в валидаторе чтобы выявить и исправить ошибки.</p>\n<ul>\n  <li><a class="external" target="_blank">CSS Validator</a></li>\n  <li><a class="external" target="_blank">HTML validator</a></li>\n</ul></div></section><section aria-labelledby="поддерживаются_ли_свойство_и_значение_браузером_в_котором_вы_тестируете"><h3 id="поддерживаются_ли_свойство_и_значение_браузером_в_котором_вы_тестируете"><a>Поддерживаются ли свойство и значение браузером в котором вы тестируете?</a></h3><div class="section-content"><p>Браузеры попросту игнорируют CSS который они не понимают. Если свойство или значение, которое вы используете не поддерживается браузером, в котором вы тестируете, то ничего не "сломается", кроме того, что тот CSS не будет применён. Обычно DevTools выделяет неподдерживаемые свойства и значения каким-либо образом. На скриншоте ниже браузер не поддерживает значение "подсветки" (subgrid) <a><code>grid-template-columns</code></a>.</p>\n<p>\n  \n</p>\n<p>Вы также можете смотреть таблицы совместимости браузеров в конце всех страниц свойств MDN. Они показывают, что браузер поддерживает это свойство, часто "ломается", если есть поддержка только для какого-то использования свойства, и нет для других. Таблица ниже показывает данные совместимости свойства <a class="only-in-en-us" title="Currently only available in English (US)"><code>shape-outside</code> <small>(en-US)</small></a>.</p></div></section><section aria-labelledby="не_переопределяется_ли_ваш_css_чем-нибудь_ещё"><h3 id="не_переопределяется_ли_ваш_css_чем-нибудь_ещё"><a>Не переопределяется ли ваш CSS чем-нибудь ещё?</a></h3><div class="section-content"><p>Это тот момент, когда изученная вами информация о специфичности придёт вам на помощь. Если у вас имеется что-то более специфичное, что может переписывать то, что вы пытаетесь сделать, то вы можете вступить в очень расстраивающую игру пытаясь выяснить что же именно. Однако, как описано выше, DevTools покажет вам какой CSS применяется, и вы сможете решить, как сделать новый селектор достаточно специфичным чтобы переопределить его.</p></div></section><section aria-labelledby="сделайте_сокращённый_контрольный_пример_проблемы"><h3 id="сделайте_сокращённый_контрольный_пример_проблемы"><a>Сделайте сокращённый контрольный пример проблемы</a></h3><div class="section-content"><p>Если проблема не решена шагами, описанными выше, тогда вам надо будет сделать своего рода расследование. Лучшее что можно сделать в этом случае это создать нечто известное как сокращенный контрольный пример. Возможность "уменьшить проблему" — действительно полезный навык. Он поможет вам найти проблемы как в вашем собственном коде, так в коде ваших коллег, а также позволит вам сообщать об ошибках и более эффективно обращаться за помощью.</p>\n<p>Сокращённый контрольный пример — это пример кода, который демонстрирует проблему самым простым способом с удалением несвязанного окружающего контента и стиля. Это часто будет означать удаление проблемного кода из вашего макета (layout), чтобы сделать небольшой пример, который показывает только этот код или функцию.</p>\n<p>Создание сокращённого контрольного примера:</p>\n<ol>\n  <li>Если ваша разметка генерируется динамически — например через CMS — сделайте статичную версию вывода, которая показывает проблему. Сайты обмена кодами как <a class="external" target="_blank">CodePen</a> являются полезными для размещения сокращённых контрольных примеров, так как они доступны онлайн, и вы легко можете поделиться с коллегами. Вы можете начать просматривать страницу во View Source и скопировать HTML в CodePen, затем взять релевантный CSS и JavaScript и включить их тоже. После этого вы можете проверить очевидна ли проблема.</li>\n  <li>Если удаление JavaScript не устраняет проблему, то не включайте JavaScript. Если же удаление JavaScript <em>устраняет</em> проблему, тогда удалите столько JavaScript, сколько сможете, оставляя всё что вызывает проблему.</li>\n  <li>Удалите весь HTML который не влияет на проблему. Удалите компоненты или даже главные элементы макета. Опять же постарайтесь добиться наименьшего количества кода, который все ещё показывает проблему.</li>\n  <li>Удалите весь CSS который не влияет на проблему.</li>\n</ol>\n<p>В процессе вы можете обнаружить что причиняет проблему или, хотя бы, сможете включать или выключать её путём удаления чего-то конкретного. Стоит добавлять какие-то комментарии к вашему коду по ходу изучения вещей. Если вам надо попросить помощи, то они покажут человеку, помогающему вам что вы уже пытались сделать. Это может дать вам достаточно информации для поиска возможных проблем и обходных путей.</p>\n<p>If you are still struggling to fix the problem then having a reduced test case gives you something to ask for help with, by posting to a forum, or showing to a co-worker. You are much more likely to get help if you can show that you have done the work of reducing the problem and identifying exactly where it happens, before asking for help. A more experienced developer might be able to quickly spot the problem and point you in the right direction, and even if not, your reduced test case will enable them to have a quick look and hopefully be able to offer at least some help.</p>\n<p>In the instance that your problem is actually a bug in a browser, then a reduced test case can also be used to file a bug report with the relevant browser vendor (e.g. on Mozilla\'s <a class="external" target="_blank">bugzilla site</a>).</p>\n<p>As you become more experienced with CSS, you will find that you get faster at figuring out issues. However even the most experienced of us sometimes find ourselves wondering what on earth is going on. Taking a methodical approach, making a reduced test case, and explaining the issue to someone else will usually result in a fix being found.</p></div></section><section aria-labelledby="in_this_module"><h2 id="in_this_module"><a>In this module</a></h2><div class="section-content"><ol>\n  <li><a>Cascade and inheritance</a></li>\n  <li><a>CSS selectors</a>\n    <ul>\n      <li><a>Type, class, and ID selectors</a></li>\n      <li><a>Attribute selectors</a></li>\n      <li><a>Pseudo-classes and pseudo-elements</a></li>\n      <li><a>Combinators</a></li>\n    </ul>\n  </li>\n  <li><a>The box model</a></li>\n  <li><a>Backgrounds and borders</a></li>\n  <li><a>Handling different text directions</a></li>\n  <li><a>Overflowing content</a></li>\n  <li><a>Values and units</a></li>\n  <li><a>Sizing items in CSS</a></li>\n  <li><a>Images, media, and form elements</a></li>\n  <li><a>Styling tables</a></li>\n  <li><a aria-current="page">Debugging CSS</a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)">Organizing your CSS <small>(en-US)<small></small></small></a></li>\n</ol></div></section>',
					works: [],
				},
				{
					title: 'Понимание основ CSS',
					chapter: 2.25,
					content:
						'<header><h1>Понимание основ CSS</h1></header><div class="section-content">\n<p>Вы многое прошли в этом модуле, и должно быть вас посетило это прекрасное чувство, что дошли до конца! Последний шаг перед тем, как двигаться дальше, это попытка пройти проверку по материалам модуля — это включает в себя ряд соответствующих упражнений, которые должны быть выполнены для того, чтобы создать заключительный проект — визитка, карточка игрока, профиль в социальной сети.</p>\n</div><section aria-labelledby="отправной_пункт"><h2 id="отправной_пункт"><a>Отправной пункт</a></h2><div class="section-content"><p>Чтобы начать проверку, вы должны:</p>\n<ul>\n  <li>Перейти и скачать <a class="external" target="_blank">HTML файл для упражнения</a> и <a class="external" target="_blank">связанный файл изображения</a>, сохранить их в новую директорию на локальном компьютере. Если вы хотите использовать свой собственный файл изображения и вписать своё имя, то пожалуйста — только убедитесь, что изображение квадратное.</li>\n  <li>Скачайте <a class="external" target="_blank">текстовый файл с исходным CSS</a> — в нем содержится набор исходных селекторов и наборов правил, которые вы должны изучить и объединить, чтобы пройти часть этой проверки.</li>\n</ul>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Вместо этого вы можете использовать для проверки такие сайты как <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble</a>. Вы можете скопировать HTML и заполнить CSS в одном из этих онлайн редакторов и использовать <a class="external" target="_blank">этот URL</a> чтобы указать элементу <code>&lt;img&gt;</code> файл изображения. Если используемый онлайн-редактор не имеет отдельной панели для CSS, вы можете поместить его в элемент <code>&lt;style&gt;</code> в заголовке документа.</p>\n</div></div></section><section aria-labelledby="краткое_описание_проекта"><h2 id="краткое_описание_проекта"><a>Краткое описание проекта</a></h2><div class="section-content"><p>Вам предоставили некоторый исходный HTML и изображение, и нужно написать необходимые CSS-правила, чтобы стилизовать это в маленькую онлайн-визитку, которая может, возможно, стать картой игрока или профилем в социальных сетях. Следующие разделы описывают, что вам нужно сделать.</p>\n<p>Первоначальные настройки:</p>\n<ul>\n  <li>Прежде всего, создайте новый файл в той же директории, что и ваши HTML и файл изображения. Назовите его как-нибудь образно, например <code>style.css</code>.</li>\n  <li>Подключите ваш CSS к вашему файлу HTML с помощью элемента <code>&lt;link&gt;</code>.</li>\n  <li>Первые два набора правил в исходном файле CSS ваши бесплатно! После того, как вы закончите радоваться своей удаче, скопируйте и вставьте их в верхнюю часть вашего нового файла CSS. Используйте их в качестве теста, чтобы убедиться, что ваш CSS правильно применяется к HTML.</li>\n  <li>Над этими двумя правилами добавьте CSS-комментарий, что это набор общих стилей для всей страницы. "Общие стили страницы" подойдут. Также добавьте ещё три комментария в нижней части CSS-файла, чтобы отметить стили, соответствующие для настройки контейнера карты, стили, соответствующие для верхнего и нижнего колонтитулов, а также стили, соответствующие для основного содержимого визитной карточки. Отныне новые стили, добавленные в таблицу стилей, должны быть размещены в соответствующем месте.</li>\n</ul>\n<p>Позаботимся о селекторах и наборах правил, предоставленных в файле CSS:</p>\n<ul>\n  <li>Далее мы хотели бы, чтобы вы посмотрели на четыре селектора и рассчитали специфичность для каждого из них. Запишите их где-нибудь, где они могут быть найдены позже, например, в комментарии в верхней части CSS.</li>\n  <li>Теперь пришло время сопоставить правильный селектор и правильный набор правил! У вас есть четыре пары селекторов и набора правил для сопоставления в ваших ресурсах CSS. Сделайте это сейчас и добавьте их в файл CSS. Вам нужно сделать:\n    <ul>\n      <li>Задайте основному контейнеру карты фиксированную ширину/высоту, сплошной цвет фона, границу и радиус границы (закруглённые углы!), помимо прочего.</li>\n      <li>Задайте заголовку градиент фона, который идёт от тёмного к светлому, плюс закруглённые углы, которые вписываются в закруглённые углы, заданные для главного контейнера карты.</li>\n      <li>Задайте для футера градиент фона, переходящий от светлого к тёмному, а также скруглённые углы, которые вписываются в скруглённые углы контейнера основной карты.</li>\n      <li>Сместите изображение вправо, чтобы оно прилипло к правой стороне основного содержимого визитной карточки, и придайте ему максимальную высоту 100% (хитрый трюк, который гарантирует, что он будет растягиваться/сжиматься, чтобы оставаться на той же высоте, что и его родительский контейнер, независимо от того, какой высоты он становится).</li>\n    </ul>\n  </li>\n  <li>Осторожно! В предоставленных наборах правил есть две ошибки. Используя любую технику, которую вы знаете, отследите их и исправьте, прежде чем двигаться дальше.</li>\n</ul>\n<p>Какие новые наборы правил надо написать:</p>\n<ul>\n  <li>Напишите набор правил, предназначенный как для заголовка, так и для футера карты, задавая им вычисленную общую высоту 50 пикселей (включая высоту содержимого 30 пикселей и внутренние отступы (padding) 10 пикселей со всех сторон.) Но выразите это в <code>em</code>s.</li>\n  <li><code>margin</code> по умолчанию, применяемый браузером к элементам <code>&lt;h2&gt;</code> и <code>&lt;p&gt;</code>, будет мешать нашему дизайну, поэтому напишите правило, которое устанавливает этот параметр для указанных элементов равным 0.</li>\n  <li>Чтобы изображение не вылезало за пределы основного содержимого визитки (элемент <code>&lt;article&gt;</code>), нужно задать ему определённую высоту. Установите высоту <code>&lt;article&gt;</code> в 120px, но выраженную в <code>em</code>s. Также задайте ему полупрозрачный чёрный цвет фона, в результате получится чуть более тёмный оттенок, который позволяет цвету фона немного просвечивать красным цветом.</li>\n  <li>Напишите набор правил, который задаёт тегу <code>&lt;h2&gt;</code> удобный размер шрифта 20px (но выраженный в <code>em</code>s) и соответствующую высоту строки, чтобы поместить её в центр поля содержимого заголовка. Напомним, что высота окна содержимого (content box) должна быть 30px — это даёт вам все числа, необходимые для вычисления высоты строки.</li>\n  <li>Напишите набор правил, который задаёт тегу <code>&lt;p&gt;</code> внутри нижнего колонтитула удобный размер шрифта 15px (но выраженный в <code>em</code>s) и соответствующую высоту строки, чтобы поместить его в центр окна содержимого нижнего колонтитула. Напомним, что высота окна содержимого должна быть 30px — это даёт вам все числа, необходимые для вычисления высоты строки.</li>\n  <li>В качестве последнего штриха задайте параграфу внутри <code>&lt;article&gt;</code> соответствующее значение отступа (padding), чтобы его левый край выровнялся с тегом <code>&lt;h2&gt;</code> и нижним параграфом, и установите его цвет достаточно светлым, чтобы его было легко читать.</li>\n</ul>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Имейте в виду, что второй набор правил устанавливает <code>font-size: 10px;</code> для элемента <code>&lt;html&gt;</code> — это означает, что для любых потомков <code>&lt;html&gt;</code> <code>em</code> будет равен 10px, а не 16px, как это задано по умолчанию. (Это, конечно, при условии, что у потомков, о которых идёт речь, нет предков, находящихся в иерархии между ними и <code>&lt;html&gt;</code>, на которых установлен другой размер шрифта. Это может повлиять на необходимые значения, хотя в этом простом примере это не проблема).</p>\n</div>\n<p>Другие вещи для размышления:</p>\n<ul>\n  <li>Вы получите бонусные баллы, если напишите объявления своего CSS в отдельных строках, чтобы обеспечить максимальную читаемость.</li>\n  <li>Вы должны включить <code>.card</code> в начале цепочки селекторов во всех ваших правилах, чтобы эти правила не мешали стилизации каких-либо других элементов, в случае если визитная карточка должна быть помещена на страницу с загрузкой другого контента.</li>\n</ul></div></section><section aria-labelledby="советы_и_подсказки"><h2 id="советы_и_подсказки"><a>Советы и подсказки</a></h2><div class="section-content"><ul>\n  <li>Вам не нужно каким-либо образом редактировать HTML, за исключением подключения к нему CSS.</li>\n  <li>При попытке определить значение em вам нужно представить определённую величину в пикселях. Подумайте о том, какой размер базового шрифта имеет корневой элемент (<code>&lt;html&gt;</code>), и на сколько его нужно умножить, чтобы получить желаемое значение. Это даст вам значение <code>em</code>, по крайней мере, в таком простом случае как этот.</li>\n</ul></div></section><section aria-labelledby="образец"><h2 id="образец"><a>Образец</a></h2><div class="section-content"><p>На следующем снимке экрана показан образец того, как должен выглядеть готовый дизайн:</p>\n<p>\n  \n</p></div></section><section aria-labelledby="проверка"><h2 id="проверка"><a>Проверка</a></h2><div class="section-content"><p>Если вы проходите эту проверку в рамках организованного курса, у вас должна быть возможность отдать свою работу своему учителю/наставнику для оценки. Если вы самообучаетесь, то вы можете получить руководство по оценке достаточно простым путём: спросив в <a class="external" target="_blank">теме обсуждения об этом упражнении</a>, или в канале <a>#mdn</a> IRC на <a class="external" target="_blank">Mozilla IRC</a>. Но сначала попробуйте выполнить упражнение — вы ничего не выиграете путём обмана!</p></div></section>',
					works: [],
				},
				{
					title: 'Стилизация текста',
					chapter: 2.26,
					content:
						'<header><h1>Стилизация текста</h1></header><div class="section-content"><p>Разобравшись с основами синтаксиса CSS, следующей темой над которой вам следует сосредоточиться, это стилизация текста — одна из наиболее распространённых вещей, которые вы будете делать с помощью CSS. В этой теме мы рассмотрим основные принципы оформления, включая выбор и определение шрифтов, использование курсива и жирного шрифта, отступов, теней и других средств придания уникальности вашему тексту. В завершение темы мы рассмотрим использование на вашей странице пользовательских шрифтов, а также оформление списков и ссылок</p></div><section aria-labelledby="необходимые_условия"><h2 id="необходимые_условия"><a>Необходимые условия</a></h2><div class="section-content"><p>Перед началом работы с этим модулем, вы должны уже иметь базовые знания HTML, как это описано во <a>Введение в HTML</a>, и с основами CSS, как описано в <a>Введение в CSS</a>.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> В случае, если вы работаете на компьютере, планшете или ином устройстве, на котором у вас нет возможности создавать свои собственные файлы, вы можете попробовать выполнить примеры кода (по крайней мере, большинство из них) в специальных онлайн-программах, таких как <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble</a>.</p>\n</div></div></section><section aria-labelledby="руководство"><h2 id="руководство"><a>Руководство</a></h2><div class="section-content"><p>Данный модуль состоит из следующих далее статей, которые дадут вам всё необходимое для оформления текстового HTML-контента.</p>\n<dl>\n  <dt id="основы_стилизации_текста_и_шрифта"><a>Основы стилизации текста и шрифта</a></dt>\n  <dd>\n    <p>В этой статье мы детально изучим стилизацию текста и шрифтов, включая параметры weight, family, style, font shorthand, text alignment и прочие эффекты, а также line и letter spacing.</p>\n  </dd>\n  <dt id="стилизация_списков"><a>Стилизация списков</a></dt>\n  <dd>\n    <p>\n      Списки, по большей части, ведут себе так же, как и любой другой текст, но они имеют некоторые особые CSS-свойства о которых нужно знать, и\n      некоторые методы которые стоит принять во внимание. Эта статья все разъясняет.\n    </p>\n  </dd>\n  <dt id="стилизация_ссылок"><a>Стилизация ссылок</a></dt>\n  <dd>\n    <p>При стилизации ссылок важно понимать, как эффективно использовать псевдоклассы для стилизации состояний ссылок, и как стилизовать ссылки для использования в общих разнообразных функциях интерфейса, таких как навигационные меню и вкладки. Мы рассмотрим все эти темы в этой статье.</p>\n  </dd>\n  <dt id="веб-шрифты"><a>Веб-шрифты</a></dt>\n  <dd>\n    <p>Здесь мы подробно рассмотрим веб-шрифты — они позволяют загружать пользовательские шрифты вместе с вашей веб-страницей, чтобы обеспечить более разнообразный, индивидуальный стиль текста.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="проверка"><h2 id="проверка"><a>Проверка</a></h2><div class="section-content"><p>Следующие задания проверят ваше понимание методов стилизации текста, описанных в вышеприведённых руководствах.</p>\n<dl>\n  <dt id="вёрстка_домашней_страницы_муниципальной_школы"><a>Вёрстка домашней страницы муниципальной школы</a></dt>\n  <dd>\n    <p>В этом задании мы проверим ваше понимание стилизации текста, заставив вас оформить текст для домашней страницы общеобразовательной школы.</p>\n  </dd>\n</dl></div></section>',
					works: [],
				},
				{
					title: 'Основы стилизирования текста и шрифта',
					chapter: 2.27,
					content:
						'<header><h1>Основы стилизирования текста и шрифта</h1></header><div class="section-content">\n<p>В данной статье мы начнём путь к овладению стилизацией текста при помощи <a>CSS</a>. Мы подробно изучим основы стилизации текста и шрифта, такие как толщина, начертание, семейство, стенография, выравнивание текста и другие эффекты, а также рассмотрим междустрочный и межбуквенный интервалы.</p>\n</div><section aria-labelledby="что_участвует_в_стилизации_текста_в_css"><h2 id="что_участвует_в_стилизации_текста_в_css"><a>Что участвует в стилизации текста в CSS?</a></h2><div class="section-content"><p>Как вы уже проверили в своей работе с HTML и CSS, текст внутри элемента выкладывается в поле содержимого элемента. Он начинается в левом верхнем углу области содержимого (или в правом верхнем углу, в случае содержимого языка RTL) и течёт к концу строки. Как только он достигает конца, он переходит к следующей строке и продолжает, затем к следующей строке, пока все содержимое не будет помещено в коробку. Текстовое содержимое эффективно ведёт себя как ряд встроенных элементов, размещённых на соседних строках и не создающих разрывы строк до тех пор, пока не будет достигнут конец строки, или если вы не принудите разрыв строки вручную с помощью элемента <a><code>&lt;br&gt;</code></a>.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> если приведённый выше абзац оставляет вас в замешательстве, то не имеет значения — вернитесь и просмотрите нашу статью о модели коробки, чтобы освежить теорию модели коробки, прежде чем продолжить.</p>\n</div>\n<p>Свойства CSS, используемые для стилизации текста, обычно делятся на две категории, которые мы рассмотрим отдельно в этой статье:</p>\n<ul>\n  <li><strong>Font styles</strong>: Свойства, влияющие на шрифт, применяемый к тексту, влияющие на то, какой шрифт применяется, насколько он велик, является ли он полужирным, курсивным и т. д.</li>\n  <li><strong>Text layout styles</strong>: Свойства, влияющие на интервал и другие особенности компоновки текста, позволяющие манипулировать, например, пространством между строками и буквами, а также тем, как текст выравнивается в поле содержимого.</li>\n</ul>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> имейте в виду, что текст внутри элемента все затронуты как одна единая сущность. Вы не можете выбирать и стилизовать подразделы текста, если вы не обернёте их в соответствующий элемент (например, <a><code>&lt;span&gt;</code></a> или <a><code>&lt;strong&gt;</code></a>), или использовать текстовый псевдоэлемент, такой как ::first-letter (выделяет первую букву текста элемента),:: first-line (выделяет первую строку текста элемента) или ::selection (выделяет текст, выделенный в данный момент курсором.)</p>\n</div></div></section><section aria-labelledby="шрифты"><h2 id="шрифты"><a>Шрифты</a></h2><div class="section-content"><p>Давайте сразу перейдём к рассмотрению свойств для стилизации шрифтов. В этом примере мы применим некоторые различные свойства CSS к одному и тому же образцу HTML, который выглядит следующим образом:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><h1>Tommy the cat</h1>\n\n<p>Well I remember it as though it were a meal ago...</p>\n\n<p>\n  Said Tommy the Cat as he reeled back to clear whatever foreign matter may have\n  nestled its way into his mighty throat. Many a fat alley rat had met its\n  demise while staring point blank down the cavernous barrel of this awesome\n  prowling machine. Truly a wonder of nature this urban predator — Tommy the cat\n  had many a story to tell. But it was a rare occasion such as this that he did.\n</p>\n</pre></div>\n<p>You can find the <a class="external" target="_blank">finished example on GitHub</a> (see also <a class="external" target="_blank">the source code</a>.)</p></div></section><section aria-labelledby="color"><h3 id="color"><a>Color</a></h3><div class="section-content"><p>The <a class="only-in-en-us" title="Currently only available in English (US)"><code>color</code> <small>(en-US)</small></a> property sets the color of the foreground content of the selected elements (which is usually the text, but can also include a couple of other things, such as an underline or overline placed on text using the <a class="only-in-en-us" title="Currently only available in English (US)"><code>text-decoration</code> <small>(en-US)</small></a> property).</p>\n<p><code>color</code> can accept any <a>CSS color unit</a>, for example:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p {\n  color: red;\n}\n</pre></div>\n<p>This will cause the paragraphs to become red, rather than the standard browser default black, like so:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Tommy the cat</h1>\n\n<p>Well I remember it as though it were a meal ago...</p>\n\n<p>\n  Said Tommy the Cat as he reeled back to clear whatever foreign matter may have\n  nestled its way into his mighty throat. Many a fat alley rat had met its\n  demise while staring point blank down the cavernous barrel of this awesome\n  prowling machine. Truly a wonder of nature this urban predator — Tommy the cat\n  had many a story to tell. But it was a rare occasion such as this that he did.\n</p>\n</pre></div><div class="code-example" id="sect3"><div class="example-header" id="sect4"></div></div></div></section><section aria-labelledby="font_families"><h3 id="font_families"><a>Font families</a></h3><div class="section-content"><p>To set a different font on your text, you use the <a><code>font-family</code></a> property — this allows you to specify a font (or list of fonts) for the browser to apply to the selected elements. The browser will only apply a font if it is available on the machine the website is being accessed on; if not, it will just use a browser <a>default font</a>. A simple example looks like so:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p {\n  font-family: arial;\n}\n</pre></div>\n<p>This would make all paragraphs on a page adopt the arial font, which is found on any computer.</p>\n<h4 id="web_safe_fonts">Web safe fonts</h4>\n<p>Speaking of font availability, there are only a certain number of fonts that are generally available across all systems and can therefore be used without much worry. These are the so-called <strong>web safe fonts</strong>.</p>\n<p>Most of the time, as web developers we want to have more specific control over the fonts used to display our text content. The problem is to find a way to know which font is available on the computer used to see our web pages. There is no way to know this in every case, but the web safe fonts are known to be available on nearly all instances of the most used operating systems (Windows, macOS, the most common Linux distributions, Android, and iOS).</p>\n<p>The list of actual web safe fonts will change as operating systems evolve, but it\'s reasonable to consider the following fonts web safe, at least for now (many of them have been popularized thanks to the Microsoft <em><a class="external" target="_blank">Core fonts for the Web</a></em> initiative in the late 90s and early 2000s):</p>\n\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> Among various resources, the <a class="external" target="_blank">cssfontstack.com</a> website maintains a list of web safe fonts available on Windows and macOS operating systems, which can help you make your decision about what you consider safe for your usage.</p>\n</div>\n<div class="notecard note" id="sect6">\n  <p><strong>Примечание:</strong> There is a way to download a custom font along with a webpage, to allow you to customize your font usage in any way you want: <strong>web fonts</strong>. This is a little bit more complex, and we will be discussing this in a <a>separate article</a> later on in the module.</p>\n</div>\n<h4 id="default_fonts">Default fonts</h4>\n<p>CSS defines five generic names for fonts: <code>serif</code>, <code>sans-serif</code>, <code>monospace</code>, <code>cursive</code> and <code>fantasy</code>. Those are very generic and the exact font face used when using those generic names is up to each browser and can vary for each operating system they are running on. It represents a <em>worst case scenario</em> where the browser will try to do its best to provide at least a font that looks appropriate. <code>serif</code>, <code>sans-serif</code> and <code>monospace</code> are quite predictable and should provide something reasonable. On the other hand, <code>cursive</code> and <code>fantasy</code> are less predictable and we recommend using them very carefully, testing as you go.</p>\n<p>The five names are defined as follows:</p>\n\n<h4 id="font_stacks">Font stacks</h4>\n<p>Since you can\'t guarantee the availability of the fonts you want to use on your webpages (even a web font <em>could</em> fail for some reason), you can supply a <strong>font stack</strong> so that the browser has multiple fonts it can choose from. This simply involves a <code>font-family</code> value consisting of multiple font names separated by commas, e.g.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p {\n  font-family: "Trebuchet MS", Verdana, sans-serif;\n}\n</pre></div>\n<p>In such a case, the browser starts at the beginning of the list and looks to see if that font is available on the machine. If it is, it applies that font to the selected elements. If not, it moves on to the next font, and so on.</p>\n<p>It is a good idea to provide a suitable generic font name at the end of the stack so that if none of the listed fonts are available, the browser can at least provide something approximately suitable. To emphasise this point, paragraphs are given the browser\'s default serif font if no other option is available — which is usually Times New Roman — this is no good for a sans-serif font!</p>\n<div class="notecard note" id="sect7">\n  <p><strong>Примечание:</strong> Font names that have more than one word — like <code>Trebuchet MS</code> — need to be surrounded by quotes, for example <code>"Trebuchet MS"</code>.</p>\n</div>\n<h4 id="a_font-family_example">A font-family example</h4>\n<p>Let\'s add to our previous example, giving the paragraphs a sans-serif font:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p {\n  color: red;\n  font-family: Helvetica, Arial, sans-serif;\n}\n</pre></div>\n<p>This gives us the following result:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Tommy the cat</h1>\n\n<p>Well I remember it as though it were a meal ago...</p>\n\n<p>\n  Said Tommy the Cat as he reeled back to clear whatever foreign matter may have\n  nestled its way into his mighty throat. Many a fat alley rat had met its\n  demise while staring point blank down the cavernous barrel of this awesome\n  prowling machine. Truly a wonder of nature this urban predator — Tommy the cat\n  had many a story to tell. But it was a rare occasion such as this that he did.\n</p>\n</pre></div><div class="code-example" id="sect8"><div class="example-header" id="sect9"></div></div></div></section><section aria-labelledby="font_size"><h3 id="font_size"><a>Font size</a></h3><div class="section-content"><p>In our previous module\'s <a>CSS values and units</a> article, we reviewed length and size units. Font size (set with the <a><code>font-size</code></a> property) can take values measured in most of these units (and others, such as <a>percentages</a>), however the most common units you\'ll use to size text are:</p>\n<ul>\n  <li><code>px</code> (pixels): The number of pixels high you want the text to be. This is an absolute unit — it results in the same final computed value for the font on the page in pretty much any situation.</li>\n  <li><code>em</code>s: 1 <code>em</code> is equal to the font size set on the parent element of the current element we are styling (more specifically, the width of a capital letter M contained inside the parent element.) This can become tricky to work out if you have a lot of nested elements with different font sizes set, but it is doable, as you\'ll see below. Why bother? It is quite natural once you get used to it, and you can use <code>em</code> to size everything, not just text. You can have an entire website sized using <code>em</code>, which makes maintenance easy.</li>\n  <li><code>rem</code>s: These work just like <code>em</code>, except that 1 <code>rem</code> is equal to the font size set on the root element of the document (i.e. <a><code>&lt;html&gt;</code></a>), not the parent element. This makes doing the maths to work out your font sizes much easier, although if you want to support really old browsers, you might struggle — <code>rem</code> is not supported in Internet Explorer 8 and below.</li>\n</ul>\n<p>The <code>font-size</code> of an element is inherited from that element\'s parent element. This all starts with the root element of the entire document — <a><code>&lt;html&gt;</code></a> — the <code>font-size</code> of which is set to 16<code>px</code> as standard across browsers. Any paragraph (or another element that doesn\'t have a different size set by the browser) inside the root element will have a final size of 16 <code>px</code>. Other elements may have different default sizes, for example an <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a> element has a size of 2 <code>em</code> set by default, so it will have a final size of 32 <code>px</code>.</p>\n<p>Things become more tricky when you start altering the font size of nested elements. For example, if you had an <a><code>&lt;article&gt;</code></a> element in your page, and set its <code>font-size</code> to 1.5 <code>em</code> (which would compute to 24 <code>px</code> final size), and then wanted the paragraphs inside the <code>&lt;article&gt;</code> elements to have a computed font size of 20 <code>px</code>, what <code>em</code> value would you use?</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><!-- document base font-size is 16px -->\n<article>\n  <!-- If my font-size is 1.5em -->\n  <p>My paragraph</p>\n  <!-- How do I compute to 20px font-size? -->\n</article>\n</pre></div>\n<p>You would need to set its <code>em</code> value to 20/24, or 0.83333333 <code>em</code>. The maths can be complicated, so you need to be careful about how you style things. It is best to use <code>rem</code> where you can, to keep things simple, and avoid setting the <code>font-size</code> of container elements where possible.</p>\n<h4 id="a_simple_sizing_example">A simple sizing example</h4>\n<p>When sizing your text, it is usually a good idea to set the base <code>font-size</code> of the document to 10 <code>px</code>, so that then the maths is a lot easier to work out — required <code>(r)em</code> values are then the pixel font size divided by 10, not 16. After doing that, you can easily size the different types of text in your document to what you want. It is a good idea to list all your <code>font-size</code> rulesets in a designated area in your stylesheet, so they are easy to find.</p>\n<p>Our new result is like so:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Tommy the cat</h1>\n\n<p>Well I remember it as though it were a meal ago...</p>\n\n<p>\n  Said Tommy the Cat as he reeled back to clear whatever foreign matter may have\n  nestled its way into his mighty throat. Many a fat alley rat had met its\n  demise while staring point blank down the cavernous barrel of this awesome\n  prowling machine. Truly a wonder of nature this urban predator — Tommy the cat\n  had many a story to tell. But it was a rare occasion such as this that he did.\n</p>\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">html {\n  font-size: 10px;\n}\n\nh1 {\n  font-size: 5rem;\n}\n\np {\n  font-size: 1.5rem;\n  color: red;\n  font-family: Helvetica, Arial, sans-serif;\n}\n</pre></div><div class="code-example" id="sect10"><div class="example-header" id="sect11"></div></div></div></section><section aria-labelledby="font_style_font_weight_text_transform_and_text_decoration"><h3 id="font_style_font_weight_text_transform_and_text_decoration"><a>Font style, font weight, text transform, and text decoration</a></h3><div class="section-content"><p>CSS provides four common properties to alter the visual weight/emphasis of text:</p>\n<ul>\n  <li><a><code>font-style</code></a>: Used to turn italic text on and off. Possible values are as follows (you\'ll rarely use this, unless you want to turn some italic styling off for some reason):\n    <ul>\n      <li><code>normal</code>: Sets the text to the normal font (turns existing italics off.)</li>\n      <li><code>italic</code>: Sets the text to use the <em>italic version of the font</em> if available; if not available, it will simulate italics with oblique instead.</li>\n      <li><code>oblique</code>: Sets the text to use a simulated version of an italic font, created by slanting the normal version.</li>\n    </ul>\n  </li>\n  <li><a><code>font-weight</code></a>: Sets how bold the text is. This has many values available in case you have many font variants available (such as <em>-light</em>, <em>-normal</em>, <em>-bold</em>, <em>-extrabold</em>, <em>-black</em>, etc.), but realistically you\'ll rarely use any of them except for <code>normal</code> and <code>bold</code>:\n    <ul>\n      <li><code>normal</code>, <code>bold</code>: Normal and <strong>bold</strong> font weight</li>\n      <li><code>lighter</code>, <code>bolder</code>: Sets the current element\'s boldness to be one step lighter or heavier than its parent element\'s boldness.</li>\n      <li><code>100</code>–<code>900</code>: Numeric boldness values that provide finer grained control than the above keywords, if needed.</li>\n    </ul>\n  </li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>text-transform</code> <small>(en-US)</small></a>: Allows you to set your font to be transformed. Values include:\n    <ul>\n      <li><code>none</code>: Prevents any transformation.</li>\n      <li><code>uppercase</code>: Transforms all text to capitals.</li>\n      <li><code>lowercase</code>: Transforms all text to lower case.</li>\n      <li><code>capitalize</code>: Transforms all words to have the first letter capitalized.</li>\n      <li><code>full-width</code>: Transforms all glyphs to be written inside a fixed-width square, similar to a monospace font, allowing aligning of e.g. Latin characters along with Asian language glyphs (like Chinese, Japanese, Korean).</li>\n    </ul>\n  </li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>text-decoration</code> <small>(en-US)</small></a>: Sets/unsets text decorations on fonts (you\'ll mainly use this to unset the default underline on links when styling them.) Available values are:\n    <ul>\n      <li><code>none</code>: Unsets any text decorations already present.</li>\n      <li><code>underline</code>: <strong>Underlines the text</strong>.</li>\n      <li><code>overline</code>: Gives the text an overline.</li>\n      <li><code>line-through</code>: Puts a <del>strikethrough over the text</del>.</li>\n    </ul>You should note that <a class="only-in-en-us" title="Currently only available in English (US)"><code>text-decoration</code> <small>(en-US)</small></a> can accept multiple values at once, if you want to add multiple decorations simultaneously, for example <code>text-decoration: underline overline</code>. Also note that <a class="only-in-en-us" title="Currently only available in English (US)"><code>text-decoration</code> <small>(en-US)</small></a> is a shorthand property for <a class="only-in-en-us" title="Currently only available in English (US)"><code>text-decoration-line</code> <small>(en-US)</small></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>text-decoration-style</code> <small>(en-US)</small></a>, and <a class="only-in-en-us" title="Currently only available in English (US)"><code>text-decoration-color</code> <small>(en-US)</small></a>. You can use combinations of these property values to create interesting effects, for example <code>text-decoration: line-through red wavy</code>.\n  </li>\n</ul>\n<p>Let\'s look at adding a couple of these properties to our example:</p>\n<p>Our new result is like so:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Tommy the cat</h1>\n\n<p>Well I remember it as though it were a meal ago...</p>\n\n<p>\n  Said Tommy the Cat as he reeled back to clear whatever foreign matter may have\n  nestled its way into his mighty throat. Many a fat alley rat had met its\n  demise while staring point blank down the cavernous barrel of this awesome\n  prowling machine. Truly a wonder of nature this urban predator — Tommy the cat\n  had many a story to tell. But it was a rare occasion such as this that he did.\n</p>\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">html {\n  font-size: 10px;\n}\n\nh1 {\n  font-size: 5rem;\n  text-transform: capitalize;\n}\n\nh1 + p {\n  font-weight: bold;\n}\n\np {\n  font-size: 1.5rem;\n  color: red;\n  font-family: Helvetica, Arial, sans-serif;\n}\n</pre></div><div class="code-example" id="sect12"><div class="example-header" id="sect13"></div></div></div></section><section aria-labelledby="text_drop_shadows"><h3 id="text_drop_shadows"><a>Text drop shadows</a></h3><div class="section-content"><p>You can apply drop shadows to your text using the <a><code>text-shadow</code></a> property. This takes up to four values, as shown in the example below:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">text-shadow: 4px 4px 5px red;\n</pre></div>\n<p>The four properties are as follows:</p>\n<ol>\n  <li>The horizontal offset of the shadow from the original text — this can take most available CSS <a>length and size units</a>, but you\'ll most commonly use <code>px</code>; positive values move the shadow right, and negative values left. This value has to be included.</li>\n  <li>The vertical offset of the shadow from the original text; behaves basically just like the horizontal offset, except that it moves the shadow up/down, not left/right. This value has to be included.</li>\n  <li>The blur radius — a higher value means the shadow is dispersed more widely. If this value is not included, it defaults to 0, which means no blur. This can take most available CSS <a>length and size units</a>.</li>\n  <li>The base color of the shadow, which can take any <a>CSS color unit</a>. If not included, it defaults to <code>black</code>.</li>\n</ol>\n<h4 id="multiple_shadows">Multiple shadows</h4>\n<p>You can apply multiple shadows to the same text by including multiple shadow values separated by commas, for example:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">text-shadow:\n  1px 1px 1px red,\n  2px 2px 1px red;\n</pre></div>\n<p>If we applied this to the <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a> element in our Tommy the cat example, we\'d end up with this:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Tommy the cat</h1>\n\n<p>Well I remember it as though it were a meal ago...</p>\n\n<p>\n  Said Tommy the Cat as he reeled back to clear whatever foreign matter may have\n  nestled its way into his mighty throat. Many a fat alley rat had met its\n  demise while staring point blank down the cavernous barrel of this awesome\n  prowling machine. Truly a wonder of nature this urban predator — Tommy the cat\n  had many a story to tell. But it was a rare occasion such as this that he did.\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">html {\n  font-size: 10px;\n}\n\nh1 {\n  font-size: 5rem;\n  text-transform: capitalize;\n  text-shadow:\n    1px 1px 1px red,\n    2px 2px 1px red;\n}\n\nh1 + p {\n  font-weight: bold;\n}\n\np {\n  font-size: 1.5rem;\n  color: red;\n  font-family: Helvetica, Arial, sans-serif;\n}\n</pre></div><div class="code-example" id="sect14"><div class="example-header" id="sect15"></div></div>\n<div class="notecard note" id="sect16">\n  <p><strong>Примечание:</strong> You can see more interesting examples of <code>text-shadow</code> usage in the Sitepoint article <a class="external" target="_blank">Moonlighting with CSS text-shadow</a>.</p>\n</div></div></section><section aria-labelledby="text_layout"><h2 id="text_layout"><a>Text layout</a></h2><div class="section-content"><p>With basic font properties out the way, let\'s now have a look at properties we can use to affect text layout.</p></div></section><section aria-labelledby="text_alignment"><h3 id="text_alignment"><a>Text alignment</a></h3><div class="section-content"><p>The <a><code>text-align</code></a> property is used to control how text is aligned within its containing content box. The available values are as follows, and work in pretty much the same way as they do in a regular word processor application:</p>\n<ul>\n  <li><code>left</code>: Left-justifies the text.</li>\n  <li><code>right</code>: Right-justifies the text.</li>\n  <li><code>center</code>: Centers the text.</li>\n  <li><code>justify</code>: Makes the text spread out, varying the gaps in between the words so that all lines of text are the same width. You need to use this carefully — it can look terrible, especially when applied to a paragraph with lots of long words in it. If you are going to use this, you should also think about using something else along with it, such as <a><code>hyphens</code></a>, to break some of the longer words across lines.</li>\n</ul>\n<p>If we applied <code>text-align: center;</code> to the <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a> in our example, we\'d end up with this:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Tommy the cat</h1>\n\n<p>Well I remember it as though it were a meal ago...</p>\n\n<p>\n  Said Tommy the Cat as he reeled back to clear whatever foreign matter may have\n  nestled its way into his mighty throat. Many a fat alley rat had met its\n  demise while staring point blank down the cavernous barrel of this awesome\n  prowling machine. Truly a wonder of nature this urban predator — Tommy the cat\n  had many a story to tell. But it was a rare occasion such as this that he did.\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">html {\n  font-size: 10px;\n}\n\nh1 {\n  font-size: 5rem;\n  text-transform: capitalize;\n  text-shadow:\n    1px 1px 1px red,\n    2px 2px 1px red;\n  text-align: center;\n}\n\nh1 + p {\n  font-weight: bold;\n}\n\np {\n  font-size: 1.5rem;\n  color: red;\n  font-family: Helvetica, Arial, sans-serif;\n}\n</pre></div><div class="code-example" id="sect17"><div class="example-header" id="sect18"></div></div></div></section><section aria-labelledby="line_height"><h3 id="line_height"><a>Line height</a></h3><div class="section-content"><p>The <a><code>line-height</code></a> property sets the height of each line of text — this can take most <a>length and size units</a>, but can also take a unitless value, which acts as a multiplier and is generally considered the best option — the <a><code>font-size</code></a> is multiplied to get the <code>line-height</code>. Body text generally looks nicer and is easier to read when the lines are spaced apart; the recommended line height is around 1.5 – 2 (double spaced.) So to set our lines of text to 1.6 times the height of the font, you\'d use this:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">line-height: 1.6;\n</pre></div>\n<p>Applying this to the <a><code>&lt;p&gt;</code></a> elements in our example would give us this result:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Tommy the cat</h1>\n\n<p>Well I remember it as though it were a meal ago...</p>\n\n<p>\n  Said Tommy the Cat as he reeled back to clear whatever foreign matter may have\n  nestled its way into his mighty throat. Many a fat alley rat had met its\n  demise while staring point blank down the cavernous barrel of this awesome\n  prowling machine. Truly a wonder of nature this urban predator — Tommy the cat\n  had many a story to tell. But it was a rare occasion such as this that he did.\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">html {\n  font-size: 10px;\n}\n\nh1 {\n  font-size: 5rem;\n  text-transform: capitalize;\n  text-shadow:\n    1px 1px 1px red,\n    2px 2px 1px red;\n  text-align: center;\n}\n\nh1 + p {\n  font-weight: bold;\n}\n\np {\n  font-size: 1.5rem;\n  color: red;\n  font-family: Helvetica, Arial, sans-serif;\n  line-height: 1.6;\n}\n</pre></div><div class="code-example" id="sect19"><div class="example-header" id="sect20"></div></div></div></section><section aria-labelledby="letter_and_word_spacing"><h3 id="letter_and_word_spacing"><a>Letter and word spacing</a></h3><div class="section-content"><p>The <a><code>letter-spacing</code></a> and <a><code>word-spacing</code></a> properties allow you to set the spacing between letters and words in your text. You won\'t use these very often, but might find a use for them to get a certain look, or to improve the legibility of a particularly dense font. They can take most <a>length and size units</a>.</p>\n<p>So as an example, we could apply some word- and letter-spacing to the first line of each <a><code>&lt;p&gt;</code></a> element in our example:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p::first-line {\n  letter-spacing: 4px;\n  word-spacing: 4px;\n}\n</pre></div>\n<p>Let\'s add some to our example, like so:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Tommy the cat</h1>\n\n<p>Well I remember it as though it were a meal ago...</p>\n\n<p>\n  Said Tommy the Cat as he reeled back to clear whatever foreign matter may have\n  nestled its way into his mighty throat. Many a fat alley rat had met its\n  demise while staring point blank down the cavernous barrel of this awesome\n  prowling machine. Truly a wonder of nature this urban predator — Tommy the cat\n  had many a story to tell. But it was a rare occasion such as this that he did.\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">html {\n  font-size: 10px;\n}\n\nh1 {\n  font-size: 5rem;\n  text-transform: capitalize;\n  text-shadow:\n    1px 1px 1px red,\n    2px 2px 1px red;\n  text-align: center;\n  letter-spacing: 2px;\n}\n\nh1 + p {\n  font-weight: bold;\n}\n\np::first-line {\n  letter-spacing: 4px;\n  word-spacing: 4px;\n}\n\np {\n  font-size: 1.5rem;\n  color: red;\n  font-family: Helvetica, Arial, sans-serif;\n  line-height: 1.6;\n  letter-spacing: 1px;\n}\n</pre></div><div class="code-example" id="sect21"><div class="example-header" id="sect22"></div></div></div></section><section aria-labelledby="other_properties_worth_looking_at"><h3 id="other_properties_worth_looking_at"><a>Other properties worth looking at</a></h3><div class="section-content"><p>The above properties give you an idea of how to start styling text on a webpage, but there are many more properties you could use. We just wanted to cover the most important ones here. Once you\'ve become used to using the above, you should also explore the following:</p>\n<p>Font styles:</p>\n<ul>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>font-variant</code> <small>(en-US)</small></a>: Switch between small caps and normal font alternatives.</li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>font-kerning</code> <small>(en-US)</small></a>: Switch font kerning options on and off.</li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>font-feature-settings</code> <small>(en-US)</small></a>: Switch various <a class="external" target="_blank">OpenType</a> font features on and off.</li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>font-variant-alternates</code> <small>(en-US)</small></a>: Control the use of alternate glyphs for a given font-face.</li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>font-variant-caps</code> <small>(en-US)</small></a>: Control the use of alternate capital glyphs.</li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>font-variant-east-asian</code> <small>(en-US)</small></a>: Control the usage of alternate glyphs for East Asian scripts, like Japanese and Chinese.</li>\n  <li><a><code>font-variant-ligatures</code></a>: Control which ligatures and contextual forms are used in text.</li>\n  <li><a><code>font-variant-numeric</code></a>: Control the usage of alternate glyphs for numbers, fractions, and ordinal markers.</li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>font-variant-position</code> <small>(en-US)</small></a>: Control the usage of alternate glyphs of smaller sizes positioned as superscript or subscript.</li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>font-size-adjust</code> <small>(en-US)</small></a>: Adjust the visual size of the font independently of its actual font size.</li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>font-stretch</code> <small>(en-US)</small></a>: Switch between possible alternative stretched versions of a given font.</li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>text-underline-position</code> <small>(en-US)</small></a>: Specify the position of underlines set using the <code>text-decoration-line</code> property <code>underline</code> value.</li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>text-rendering</code> <small>(en-US)</small></a>: Try to perform some text rendering optimization.</li>\n</ul>\n<p>Text layout styles:</p>\n<ul>\n  <li><a><code>text-indent</code></a>: Specify how much horizontal space should be left before the beginning of the first line of the text content.</li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>text-overflow</code> <small>(en-US)</small></a>: Define how overflowed content that is not displayed is signaled to users.</li>\n  <li><a><code>white-space</code></a>: Define how whitespace and associated line breaks inside the element are handled.</li>\n  <li><a><code>word-break</code></a>: Specify whether to break lines within words.</li>\n  <li><a><code>direction</code></a>: Define the text direction (This depends on the language and usually it\'s better to let HTML handle that part as it is tied to the text content.)</li>\n  <li><a><code>hyphens</code></a>: Switch on and off hyphenation for supported languages.</li>\n  <li><a><code>line-break</code></a>: Relax or strengthen line breaking for Asian languages.</li>\n  <li><a><code>text-align-last</code></a>: Define how the last line of a block or a line, right before a forced line break, is aligned.</li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>text-orientation</code> <small>(en-US)</small></a>: Define the orientation of the text in a line.</li>\n  <li><a><code>overflow-wrap</code></a>: Specify whether or not the browser may break lines within words in order to prevent overflow.</li>\n  <li><a><code>writing-mode</code></a>: Define whether lines of text are laid out horizontally or vertically and the direction in which subsequent lines flow.</li>\n</ul></div></section><section aria-labelledby="font_shorthand"><h2 id="font_shorthand"><a>Font shorthand</a></h2><div class="section-content"><p>Many font properties can also be set through the shorthand property <a><code>font</code></a>. These are written in the following order: <a><code>font-style</code></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>font-variant</code> <small>(en-US)</small></a>, <a><code>font-weight</code></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>font-stretch</code> <small>(en-US)</small></a>, <a><code>font-size</code></a>, <a><code>line-height</code></a>, and <a><code>font-family</code></a>.</p>\n<p>Among all those properties, only <code>font-size</code> and <code>font-family</code> are required when using the <code>font</code> shorthand property.</p>\n<p>A forward slash has to be put in between the <a><code>font-size</code></a> and <a><code>line-height</code></a> properties.</p>\n<p>A full example would look like this:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">font:\n  italic normal bold normal 3em/1.5 Helvetica,\n  Arial,\n  sans-serif;\n</pre></div></div></section><section aria-labelledby="active_learning_playing_with_styling_text"><h2 id="active_learning_playing_with_styling_text"><a>Active learning: Playing with styling text</a></h2><div class="section-content"><p>In this active learning session, we don\'t have any specific exercises for you to do: we\'d just like you to have a good play with some font/text layout properties, and see what you can produce! You can either do this using offline HTML/CSS files, or enter your code into the live editable example below.</p>\n<p>If you make a mistake, you can always reset it using the <em>Reset</em> button.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><div class="body-wrapper" style="font-family: \'Open Sans Light\',Helvetica,Arial,sans-serif;">\n  <h2>HTML Input</h2>\n  <input id="code" class="html-input" style="width: 90%;height: 10em;padding: 10px;border: 1px solid #0095dd;">&lt;p&gt;Some sample text for your delight&lt;/p&gt;\n  </input>\n\n  <h2>CSS Input</h2>\n  <input id="code" class="css-input" style="width: 90%;height: 10em;padding: 10px;border: 1px solid #0095dd;">p {\n\n}\n</input>\n\n  <h2>Output</h2>\n  <div class="output" style="width: 90%;height: 10em;padding: 10px;border: 1px solid #0095dd;"></div>\n  <div class="controls">\n    <input id="reset" type="button" value="Reset" style="margin: 10px 10px 0 0;">\n  </div>\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">const htmlInput = document.querySelector(".html-input");\nconst cssInput = document.querySelector(".css-input");\nconst reset = document.getElementById("reset");\nlet htmlCode = htmlInput.value;\nlet cssCode = cssInput.value;\nconst output = document.querySelector(".output");\n\nconst styleElem = document.createElement("style");\nconst headElem = document.querySelector("head");\nheadElem.appendChild(styleElem);\n\nfunction drawOutput() {\n  output.innerHTML = htmlInput.value;\n  styleElem.textContent = cssInput.value;\n}\n\nreset.addEventListener("click", function () {\n  htmlInput.value = htmlCode;\n  cssInput.value = cssCode;\n  drawOutput();\n});\n\nhtmlInput.addEventListener("input", drawOutput);\ncssInput.addEventListener("input", drawOutput);\nwindow.addEventListener("load", drawOutput);\n</pre></div><div class="code-example" id="sect23"><div class="example-header" id="sect24"></div></div></div></section><section aria-labelledby="test_your_skills!"><h2 id="test_your_skills!"><a>Test your skills!</a></h2><div class="section-content"><p>You\'ve reached the end of this article, and already did some skill testing in our Active Learning section, but can you remember the most important information going forward? You can find an assessment to verify that you\'ve retained this information at the end of the module — see <a>Typesetting a community school homepage</a>.</p>\n<p>This assessment tests all the knowledge discussed in this module, so you might want to read the other articles before moving on to it.</p></div></section><section aria-labelledby="summary"><h2 id="summary"><a>Summary</a></h2><div class="section-content"><p>We hoped you enjoyed playing with text in this article! The next article will give you all you need to know about styling HTML lists.</p></div></section><section aria-labelledby="in_this_module"><h2 id="in_this_module"><a>In this module</a></h2><div class="section-content"><ul>\n  <li><a aria-current="page">Fundamental text and font styling</a></li>\n  <li><a>Styling lists</a></li>\n  <li><a>Styling links</a></li>\n  <li><a>Web fonts</a></li>\n  <li><a>Typesetting a community school homepage</a></li>\n</ul></div></section>',
					works: [],
				},
				{
					title: 'Стилизация списков',
					chapter: 2.28,
					content:
						'<header><h1>Стилизация списков</h1></header><div class="section-content">\n<p><a>Списки</a>, по-большому счету, ведут себя также как любой другой текст, но существуют некоторые специфичные настройки CSS, о которых вы должны знать. В этой статье они все описываются.</p>\n</div><section aria-labelledby="пример_простого_списка"><h2 id="пример_простого_списка"><a>Пример простого списка</a></h2><div class="section-content"><p>Для начала, давайте взглянем на пример простого списка. В данной статье мы рассмотрим ненумерованный, нумерованный и описательный списки — все они имеют аналогичные свойства стилизации, но некоторые имеют свои специальные свойства. Не стилизованный пример <a class="external" target="_blank">доступен на Github</a> (проверьте также <a class="external" target="_blank">источник кода</a>.)</p>\n<p>HTML для нашего примера списка представлен ниже:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><h2>Shopping (unordered) list</h2>\n\n<p>\n  Paragraph for reference, paragraph for reference, paragraph for reference,\n  paragraph for reference, paragraph for reference, paragraph for reference.\n</p>\n\n<ul>\n  <li>Hummus</li>\n  <li>Pita</li>\n  <li>Green salad</li>\n  <li>Halloumi</li>\n</ul>\n\n<h2>Recipe (ordered) list</h2>\n\n<p>\n  Paragraph for reference, paragraph for reference, paragraph for reference,\n  paragraph for reference, paragraph for reference, paragraph for reference.\n</p>\n\n<ol>\n  <li>Toast pita, leave to cool, then slice down the edge.</li>\n  <li>\n    Fry the halloumi in a shallow, non-stick pan, until browned on both sides.\n  </li>\n  <li>Wash and chop the salad.</li>\n  <li>Fill pita with salad, hummus, and fried halloumi.</li>\n</ol>\n\n<h2>Ingredient description list</h2>\n\n<p>\n  Paragraph for reference, paragraph for reference, paragraph for reference,\n  paragraph for reference, paragraph for reference, paragraph for reference.\n</p>\n\n<dl>\n  <dt>Hummus</dt>\n  <dd>\n    A thick dip/sauce generally made from chick peas blended with tahini, lemon\n    juice, salt, garlic, and other ingredients.\n  </dd>\n  <dt>Pita</dt>\n  <dd>A soft, slightly leavened flatbread.</dd>\n  <dt>Halloumi</dt>\n  <dd>\n    A semi-hard, unripened, brined cheese with a higher-than-usual melting\n    point, usually made from goat/sheep milk.\n  </dd>\n  <dt>Green salad</dt>\n  <dd>That green healthy stuff that many of us just use to garnish kebabs.</dd>\n</dl>\n</pre></div>\n<p>Если вы перейдёте к живому примеру прямо сейчас и изучите элемент списка используя <a>инструменты разработчика браузера</a>, то вы заметите несколько стилей установленных по умолчанию:</p>\n<ul>\n  <li>Элементы <a><code>&lt;ul&gt;</code></a> и <a><code>&lt;ol&gt;</code></a> имеют верхний и нижний <a><code>margin</code></a> по <code>16px</code> (<code>1em</code>) и <a><code>padding-left</code></a> <code>40px</code> (<code>2.5em</code>.)</li>\n  <li>Объекты списка (элементы <a><code>&lt;li&gt;</code></a>) не имеют заданных значений по умолчанию для интервалов.</li>\n  <li>Элемент <a><code>&lt;dl&gt;</code></a> имеет верхний и нижний <a><code>margin</code></a> по <code>16px</code> (<code>1em</code>), но padding не задан.</li>\n  <li>Элементы <a><code>&lt;dd&gt;</code></a> имеют <a><code>margin-left</code></a> <code>40px</code> (<code>2.5em</code>.)</li>\n  <li>Элементы <a><code>&lt;p&gt;</code></a> которые мы включили для ссылок (сноски) имеют верхний и нижний <a><code>margin</code></a> по <code>16px</code> (<code>1em</code>), точно так же, как и различные типы списков.</li>\n</ul></div></section><section aria-labelledby="управление_интервалами_списков"><h2 id="управление_интервалами_списков"><a>Управление интервалами списков</a></h2><div class="section-content"><p>При оформлении списков, вам необходимо настроить их стили так, чтоб они сохраняли то же вертикальное расстояние, что и окружающие их элементы (такие как параграфы и изображения; иногда называемые вертикальным ритмом) и то же расстояние по горизонтали как и между собой (посмотреть <a class="external" target="_blank">законченный стилизированный пример</a> на Github, а также <a class="external" target="_blank">найти исходный код</a>.)</p>\n<p>CSS, используемый для оформления текста и интервалов, выглядит следующим образом:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">/* Базовые стили */\n\nhtml {\n  font-family: Helvetica, Arial, sans-serif;\n  font-size: 10px;\n}\n\nh2 {\n  font-size: 2rem;\n}\n\nul,\nol,\ndl,\np {\n  font-size: 1.5rem;\n}\n\nli,\np {\n  line-height: 1.5;\n}\n\n/* Задаём стили для списка описаний */\n\ndd,\ndt {\n  line-height: 1.5;\n}\n\ndt {\n  font-weight: bold;\n}\n\ndd {\n  margin-bottom: 1.5rem;\n}\n</pre></div>\n<ul>\n  <li>Первое правило устанавливает шрифт сайта и основной размер шрифта 10px. Они наследуются всеми на этой странице.</li>\n  <li>Правила 2 и 3 задают относительные размеры шрифтов заголовков, различных типов списков (их наследуют дочерние элементы списков) и параграфов. Это значит, что каждый параграф и список будут иметь одинаковый размер шрифта, а также верхний и нижний интервалы, помогая сохранить согласованность вертикального ритма.</li>\n  <li>Правило 4 задаёт одинаковую высоту <a><code>line-height</code></a> в параграфах и пунктах списка — так, что параграфы и каждый отдельный пункт списка будут иметь те же интервалы между строками. Это также поможет сохранить согласованность вертикального ритма.</li>\n  <li>Правила 5 и 6 применяются к списку описаний — мы задаём одинаковую высоту <code>line-height</code> между терминами и описаниями списке описаний как мы это делали с параграфами и пунктами списка. И снова, согласованность хорошая! Мы также делаем описание терминов жирным шрифтом, чтобы они визуально выделялись легче.</li>\n</ul></div></section><section aria-labelledby="стили_специфичные_для_списков"><h2 id="стили_специфичные_для_списков"><a>Стили специфичные для списков</a></h2><div class="section-content"><p>Теперь, рассмотрев общие методы интервалов для списков, давайте изучим некоторые специфичные спискам свойства. Существует три свойства, с которых вам надо начать знакомство, которые могут быть установлены для элементов <a><code>&lt;ul&gt;</code></a> или <a><code>&lt;ol&gt;</code></a>:</p>\n<ul>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>list-style-type</code> <small>(en-US)</small></a>: задаёт тип маркеров для использования в списке, например, квадратные или круглые маркеры для неупорядоченного списка, или цифры, буквы или римские цифры для упорядоченного списка.</li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>list-style-position</code> <small>(en-US)</small></a>: управляет будет ли маркер появляется внутри пунктов списка или вне их перед началом каждого элемента.</li>\n  <li><a><code>list-style-image</code></a>: позволяет вам использовать пользовательские изображения в качестве маркеров, а не просто квадрат или круг.</li>\n</ul></div></section><section aria-labelledby="стили_маркеров"><h3 id="стили_маркеров"><a>Стили маркеров</a></h3><div class="section-content"><p>Как указано выше, свойство <a class="only-in-en-us" title="Currently only available in English (US)"><code>list-style-type</code> <small>(en-US)</small></a> позволяет вам устанавливать какой тип маркера использовать в качестве точек маркера. В нашем примере мы установили использование заглавных римских цифр в упорядоченном списке:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">ol {\n  list-style-type: upper-roman;\n}\n</pre></div>\n<p>Это даёт нам следующий вид:</p>\n<p>\n  \n</p>\n<p>Вы можете найти гораздо больше опций, заглянув на справочную страницу <a class="only-in-en-us" title="Currently only available in English (US)"><code>list-style-type</code> <small>(en-US)</small></a>.</p></div></section><section aria-labelledby="позиция_маркера"><h3 id="позиция_маркера"><a>Позиция маркера</a></h3><div class="section-content"><p>Свойство <a class="only-in-en-us" title="Currently only available in English (US)"><code>list-style-position</code> <small>(en-US)</small></a> устанавливает будет ли появляться маркер внутри пунктов списка или снаружи перед началом каждого пункта. Значение по умолчанию — <code>outside</code>, которое заставляет маркеры находится снаружи пунктов списка, как видно выше.</p>\n<p>Если вы установите значение на <code>inside</code>, то маркеры будут находиться внутри строк:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">ol {\n  list-style-type: upper-roman;\n  list-style-position: inside;\n}\n</pre></div>\n<p>\n  \n</p></div></section><section aria-labelledby="использование_пользовательского_изображения_как_маркер"><h3 id="использование_пользовательского_изображения_как_маркер"><a>Использование пользовательского изображения как маркер</a></h3><div class="section-content"><p>Свойство <a><code>list-style-image</code></a> позволяет вам использовать пользовательское изображение в качестве вашего маркера. Синтаксис довольно прост:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">ul {\n  list-style-image: url(star.svg);\n}\n</pre></div>\n<p>Однако это свойство немного ограничено с точки зрения управления позициями, размерами (и т.д.) маркеров. Вам лучше использовать семейство свойств <a><code>background</code></a>, о которых вы узнаете намного больше в модуле <a>Styling boxes</a>. А пока вот вам образец для дегустации!</p>\n<p>В нашем законченном примере мы оформили неупорядоченный список следующим образом (поверх того, что вы уже видели выше):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">ul {\n  padding-left: 2rem;\n  list-style-type: none;\n}\n\nul li {\n  padding-left: 2rem;\n  background-image: url(star.svg);\n  background-position: 0 0;\n  background-size: 1.6rem 1.6rem;\n  background-repeat: no-repeat;\n}\n</pre></div>\n<p>Мы сделали следующее:</p>\n<ul>\n  <li>Установили <a><code>padding-left</code></a> элемента <a><code>&lt;ul&gt;</code></a> с <code>40px</code> по умолчанию на <code>20px</code>, затем установили то же самое количество в пунктах списка. Это для того, чтобы все пункты списка продолжали выравниваться с порядком пунктов списка и описаний списка описаний, но пункты списка имеют некоторый padding для фоновых изображений чтобы сидеть внутри. Если бы мы не сделали этого, то фоновые изображения накладывались бы с текстом пунктов списка, что выглядело бы неряшливо.</li>\n  <li>Установили <a class="only-in-en-us" title="Currently only available in English (US)"><code>list-style-type</code> <small>(en-US)</small></a> на <code>none</code>, для того чтобы маркеры не появлялись по умолчанию. Мы собираемся использовать свойства <a><code>background</code></a> для управления маркерами.</li>\n  <li>Вставили маркер в каждый пункт неупорядоченного списка. Соответствующие свойства, следующие:\n    <ul>\n      <li><a><code>background-image</code></a>: Указывает путь к файлу изображения, который вы хотите использовать в качестве маркера.</li>\n      <li><a><code>background-position</code></a>: Определяет где в фоне выбранного элемента появится изображение — в данном случае мы говорим <code>0 0</code>, что значит что маркер будет появляться в самом верху слева каждого пункта списка.</li>\n      <li><a><code>background-size</code></a>: Задаёт размер фонового изображения. В идеале мы хотим, чтоб маркеры были того же размера что и пункты списка (или самую малость меньше или крупнее). Мы используем размер <code>1.6rem</code> (<code>16px</code>), что очень хорошо сочетается с отступом (padding) <code>20px</code>, который мы позволили разместить внутри маркера — 16px плюс 4px интервала между маркером и текстом пункта списка работают хорошо.</li>\n      <li><a><code>background-repeat</code></a>: По умолчанию, фоновые изображения повторяются пока не заполнят доступное фоновое пространство. Мы хотим всего лишь одну копию вставленного изображения в каждом случае, поэтому мы установили значение <code>no-repeat</code>.</li>\n    </ul>\n  </li>\n</ul>\n<p>Это даёт нам следующий результат:</p>\n<p>\n  \n</p></div></section><section aria-labelledby="короткая_запись_list-style"><h3 id="короткая_запись_list-style"><a>короткая запись list-style</a></h3><div class="section-content"><p>Эти три свойства упомянутые выше могут все быть заданы, используя лишь одну короткую запись свойства, <a class="only-in-en-us" title="Currently only available in English (US)"><code>list-style</code> <small>(en-US)</small></a>. Например, следующий CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">ul {\n  list-style-type: square;\n  list-style-image: url(example.png);\n  list-style-position: inside;\n}\n</pre></div>\n<p>Может быть заменён этим:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">ul {\n  list-style: square url(example.png) inside;\n}\n</pre></div>\n<p>Значения могут быть перечислены в любом порядке, и вы можете использовать одно, два и все три (значения по умолчанию, использованные для свойств, которые не включены — <code>disc</code>, <code>none</code>, и <code>outside</code>). Если указаны и <code>type</code> и <code>image</code>, тип используется в качестве запасного варианта, если изображение по какой-либо причине не может быть загружено.</p></div></section><section aria-labelledby="контроль_счета_списка"><h2 id="контроль_счета_списка"><a>Контроль счета списка</a></h2><div class="section-content"><p>Иногда вам может понадобиться вести счёт в упорядоченном списке по-другому — например начинать с цифры отличной от 1, или считать в обратном порядке, или вести счёт с шагом больше 1. HTML и CSS имеют несколько инструментов которые помогут с этим.</p></div></section><section aria-labelledby="start"><h3 id="start"><a>start</a></h3><div class="section-content"><p>Атрибут <a><code>start</code></a> позволит вам начать счёт списка с цифры отличной от 1. Например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><ol start="4">\n  <li>Toast pita, leave to cool, then slice down the edge.</li>\n  <li>\n    Fry the halloumi in a shallow, non-stick pan, until browned on both sides.\n  </li>\n  <li>Wash and chop the salad.</li>\n  <li>Fill pita with salad, hummus, and fried halloumi.</li>\n</ol>\n</pre></div>\n<p>что даст вам такой результат:</p><div class="code-example" id="sect1"><div class="example-header" id="sect2"></div></div></div></section><section aria-labelledby="reversed"><h3 id="reversed"><a>reversed</a></h3><div class="section-content"><p>Атрибут <a><code>reversed</code></a> начнёт отсчёт по убыванию вместо возрастания. Например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><ol start="4" reversed="">\n  <li>Toast pita, leave to cool, then slice down the edge.</li>\n  <li>\n    Fry the halloumi in a shallow, non-stick pan, until browned on both sides.\n  </li>\n  <li>Wash and chop the salad.</li>\n  <li>Fill pita with salad, hummus, and fried halloumi.</li>\n</ol>\n</pre></div>\n<p>что даст вам такой результат:</p><div class="code-example" id="sect3"><div class="example-header" id="sect4"></div></div>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> Если пунктов в списке в обратном списке больше, чем значение атрибута <code>start</code>, счёт продолжится до нуля и далее отрицательные значения.</p>\n</div></div></section><section aria-labelledby="value"><h3 id="value"><a>value</a></h3><div class="section-content"><p>Атрибут <a><code>value</code></a> позволит вам установить специфичные цифровые значения к пунктам списка. Например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><ol>\n  <li value="2">Toast pita, leave to cool, then slice down the edge.</li>\n  <li value="4">\n    Fry the halloumi in a shallow, non-stick pan, until browned on both sides.\n  </li>\n  <li value="6">Wash and chop the salad.</li>\n  <li value="8">Fill pita with salad, hummus, and fried halloumi.</li>\n</ol>\n</pre></div>\n<p>что даст вам такой результат:</p><div class="code-example" id="sect6"><div class="example-header" id="sect7"></div></div>\n<div class="notecard note" id="sect8">\n  <p><strong>Примечание:</strong> Даже если вы используете нечисловой <a class="only-in-en-us" title="Currently only available in English (US)"><code>list-style-type</code> <small>(en-US)</small></a>, вам всё равно надо использовать эквивалентное цифровое значение в атрибуте <code>value</code>.</p>\n</div></div></section><section aria-labelledby="активное_изучение_стилизация_вложенного_списка"><h2 id="активное_изучение_стилизация_вложенного_списка"><a>Активное изучение: Стилизация вложенного списка</a></h2><div class="section-content"><p>В этой сессии активного изучения, мы хотим, чтобы вы взяли всё что вы выучили выше и попробовали стилизовать вложенный список. Мы предоставили вам HTML и хотим, чтобы вы:</p>\n<ol>\n  <li>Задали неупорядоченному списку квадратные маркеры.</li>\n  <li>Задали пунктам неупорядоченного и упорядоченного списка 1,5 межстрочный интервал их размера шрифта.</li>\n  <li>Задали упорядоченному списку маркеры в виде строчных букв.</li>\n  <li>Не стесняйтесь играться с примерами списков столько сколько вам нравится, экспериментируя с типами маркеров, интервалами или со всем что вы найдёте.</li>\n</ol>\n<p>Если вы допустите ошибку, вы всегда можете сделать сброс используя кнопку <em>Reset</em>. Если вы застрянете, нажмите кнопку <em>Show solution</em> чтобы посмотреть возможный ответ.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><div class="body-wrapper" style="font-family: \'Open Sans Light\',Helvetica,Arial,sans-serif;">\n  <h2>HTML Input</h2>\n  <input id="code" class="html-input" style="width: 90%;height: 10em;padding: 10px;border: 1px solid #0095dd;">&lt;ul&gt;\n  &lt;li&gt;First, light the candle.&lt;/li&gt;\n  &lt;li&gt;Next, open the box.&lt;/li&gt;\n  &lt;li&gt;Finally, place the three magic items in the box, in this exact order, to complete the spell:\n    &lt;ol&gt;\n      &lt;li&gt;The book of spells&lt;/li&gt;\n      &lt;li&gt;The shiny rod&lt;/li&gt;\n      &lt;li&gt;The goblin statue&lt;/li&gt;\n    &lt;/ol&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;</input>\n\n  <h2>CSS Input</h2>\n  <input id="code" class="css-input" style="width: 90%;height: 10em;padding: 10px;border: 1px solid #0095dd;"></input>\n\n  <h2>Output</h2>\n  <div class="output" style="width: 90%;height: 12em;padding: 10px;border: 1px solid #0095dd;overflow: auto;"></div>\n  <div class="controls">\n    <input id="reset" type="button" value="Reset" style="margin: 10px 10px 0 0;">\n    <input id="solution" type="button" value="Show solution" style="margin: 10px 0 0 10px;">\n  </div>\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">var htmlInput = document.querySelector(".html-input");\nvar cssInput = document.querySelector(".css-input");\nvar reset = document.getElementById("reset");\nvar htmlCode = htmlInput.value;\nvar cssCode = cssInput.value;\nvar output = document.querySelector(".output");\nvar solution = document.getElementById("solution");\n\nvar styleElem = document.createElement("style");\nvar headElem = document.querySelector("head");\nheadElem.appendChild(styleElem);\n\nfunction drawOutput() {\n  output.innerHTML = htmlInput.value;\n  styleElem.textContent = cssInput.value;\n}\n\nreset.addEventListener("click", function () {\n  htmlInput.value = htmlCode;\n  cssInput.value = cssCode;\n  drawOutput();\n});\n\nsolution.addEventListener("click", function () {\n  htmlInput.value = htmlCode;\n  cssInput.value =\n    "ul {\n  list-style-type: square;\n}\n\nul li, ol li {\n  line-height: 1.5;\n}\n\nol {\n  list-style-type: lower-alpha\n}";\n  drawOutput();\n});\n\nhtmlInput.addEventListener("input", drawOutput);\ncssInput.addEventListener("input", drawOutput);\nwindow.addEventListener("load", drawOutput);\n</pre></div><div class="code-example" id="sect9"><div class="example-header" id="sect10"></div></div></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>В плане стилизации списки сравнительно легко освоить, как только вы освоите несколько связанных базовых принципов и специфичные свойства. В следующей статье мы перейдём к методам стилизации ссылок.</p></div></section>',
					works: [],
				},
				{
					title: 'Стилизация ссылок',
					chapter: 2.29,
					content:
						'<header><h1>Стилизация ссылок</h1></header><div class="section-content">\n<p>При стилизации ссылок, важно понимать как использовать псевдоклассы, чтобы стилизировать состояния ссылок эффективно, и как стилизировать ссылки для использования в общих разнообразных функциях интерфейса: таких как например навигационное меню и вкладки. Мы рассмотрим все эти темы в этой статье.</p>\n</div><section aria-labelledby="давайте_посмотрим_на_некоторые_ссылки"><h2 id="давайте_посмотрим_на_некоторые_ссылки"><a>Давайте посмотрим на некоторые ссылки</a></h2><div class="section-content"><p>Мы рассматривали как реализуются ссылки в вашем HTML в соответствии с лучшими практиками в <a>Создании гиперссылок</a>. В этой статье мы будем опираться на эти знания, показывая вам лучшие практики по оформлению ссылок.</p></div></section><section aria-labelledby="состояния_ссылок"><h3 id="состояния_ссылок"><a>Состояния ссылок</a></h3><div class="section-content"><p>Первое, что нужно понять, это концепция состояний ссылок — разные состояния в которых могут существовать ссылки, которые могут быть стилизованы используя различные <a>псевдоклассы</a>:</p>\n<ul>\n  <li><strong>Link (не посещённая)</strong>: Состояние по умолчанию, в котором находится ссылка, когда она не находится в каком-либо другом состоянии. Она может быть специфически стилизована используя псевдокласс <a><code>:link</code></a>.</li>\n  <li><strong>Visited</strong>: Ссылка, когда она уже была посещена (существует в истории браузера), стилизуется используя псевдокласс <a><code>:visited</code></a>.</li>\n  <li><strong>Hover</strong>: Ссылка, когда на неё наведён курсор мыши, стилизуется используя псевдокласс <a><code>:hover</code></a></li>\n  <li>\n    <strong>Focus</strong>: Ссылка, когда она была сфокусирована (например когда пользователь переместился на неё используя клавишу\n    <kbd>Tab</kbd>\n    или наподобие или программно сфокусирована используя <a class="only-in-en-us" title="Currently only available in English (US)"><code>HTMLElement.focus()</code> <small>(en-US)</small></a>) — стилизуется используя псевдокласс <a><code>:focus</code></a>.\n  </li>\n  <li><strong>Active</strong>: Ссылка, когда она активируется (например при клике по ней), стилизуется используя псевдокласс <a><code>:active</code></a></li>\n</ul></div></section><section aria-labelledby="стили_по_умолчанию"><h3 id="стили_по_умолчанию"><a>Стили по умолчанию</a></h3><div class="section-content"><p>Следующий пример показывает, как будет вести себя ссылка по умолчанию (CSS просто увеличивает и центрирует текст чтоб больше выделить его).</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p><a href="https://mozilla.org">A link to the Mozilla homepage</a></p>\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p {\n  font-size: 2rem;\n  text-align: center;\n}\n</pre></div><div class="code-example" id="sect1"><div class="example-header" id="sect2"></div></div>\n<p>Вы заметите несколько вещей при изучении стилей по умолчанию:</p>\n<ul>\n  <li>Ссылки подчёркнуты.</li>\n  <li>Не посещённые ссылки синие.</li>\n  <li>Посещённые ссылки фиолетовые</li>\n  <li>Наведение курсора мыши на ссылку меняют указатель мыши на иконку маленькой руки.</li>\n  <li>\n    Сфокусированные ссылки имеют контур вокруг себя — вы можете сфокусироваться на ссылках на этой странице с помощью клавиатуры, нажав клавишу табуляции (на Mac, вам может понадобиться включить опцию <em>Full Keyboard Access: All controls</em> нажав\n    <kbd>Ctrl</kbd>\n    +\n    <kbd>F7</kbd>\n    , прежде чем это будет работать).\n  </li>\n  <li>Активные ссылки красные (попробуйте удерживать кнопку мыши на ссылке, когда вы кликните по ней).</li>\n</ul>\n<p>Довольно интересно, что эти стили по умолчанию приблизительно такие же какими они были в первые дни браузеров в середине 1990-ых. Это потому, что пользователи знают и привыкли ожидать такого поведения — если бы ссылки были стилизованы по-разному, это бы путало много людей. Это не значит, что вы не должны стилизовать ссылки совсем, просто вы не должны уходить слишком далеко от ожидаемого поведения. По крайней мере вы должны:</p>\n<ul>\n  <li>Использовать нижнее подчёркивание для ссылок, но не для других вещей. Если вы не хотите подчёркивать ссылки, то хотя бы выделите их каким-либо другим путём.</li>\n  <li>Сделать так чтобы они как-нибудь реагировали на наведение/фокусировку на них и немного отличались после активации.</li>\n</ul>\n<p>Стили по умолчанию могут быть выключены/изменены, используя следующие свойства CSS:</p>\n<ul>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>color</code> <small>(en-US)</small></a> для цвета текста.</li>\n  <li><a><code>cursor</code></a> для стиля курсора мыши — вы не должны отключать эту опцию только если у вас нет на это веской причины.</li>\n  <li><a><code>outline</code></a> для контура текста (контур схож с границей, единственное отличие — это то, что границы занимают место в блоке, а контур — нет; он просто располагается поверх фона). Контур является полезным вспомогательным средством, так что подумайте хорошо, прежде чем отключать его; по крайней мере вы должны удвоить стили, заданные для состояния hover, а также состояния фокусировки.</li>\n</ul>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> вы не ограничены только перечисленными выше свойствами чтобы стилизовать ссылки — вы можете использовать любые свойства, которые вам нравятся. Просто постарайтесь не сходить с ума слишком сильно!</p>\n</div></div></section><section aria-labelledby="стилизация_некоторых_ссылок"><h3 id="стилизация_некоторых_ссылок"><a>Стилизация некоторых ссылок</a></h3><div class="section-content"><p>Мы уже рассмотрели состояния по умолчанию в некоторых деталях, давайте взглянем на типичный набор стилей ссылок.</p>\n<p>Чтобы начать, мы выпишем наши пустые наборы правил:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">a {\n}\n\na:link {\n}\n\na:visited {\n}\n\na:focus {\n}\n\na:hover {\n}\n\na:active {\n}\n</pre></div>\n<p>Этот порядок важен так как стили ссылок опираются друг на друга, например стили в первом правиле будут применяться ко всем последующим правилам и когда ссылка будет активирована, она также будет находиться под "наведением" (hover). Если вы введёте их в неправильном порядке, стили не будут работать правильно. Чтобы запомнить этот порядок вы можете попробовать использовать мнемонику типа <strong>L</strong>o<strong>V</strong>e <strong>F</strong>ears <strong>HA</strong>te.</p>\n<p>А теперь давайте добавим ещё немного информации чтобы правильно оформить этот стиль:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">body {\n  width: 300px;\n  margin: 0 auto;\n  font-size: 1.2rem;\n  font-family: sans-serif;\n}\n\np {\n  line-height: 1.4;\n}\n\na {\n  outline: none;\n  text-decoration: none;\n  padding: 2px 1px 0;\n}\n\na:link {\n  color: #265301;\n}\n\na:visited {\n  color: #437a16;\n}\n\na:focus {\n  border-bottom: 1px solid;\n  background: #bae498;\n}\n\na:hover {\n  border-bottom: 1px solid;\n  background: #cdfeaa;\n}\n\na:active {\n  background: #265301;\n  color: #cdfeaa;\n}\n</pre></div>\n<p>Также мы дадим некий пример HTML к которому применяется CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  There are several browsers available, such as\n  <a href="https://www.mozilla.org/en-US/firefox/">Mozilla Firefox</a>,\n  <a href="https://www.google.com/chrome/index.html">Google Chrome</a>, and\n  <a href="https://www.microsoft.com/en-us/windows/microsoft-edge">Microsoft Edge</a>.\n</p>\n</pre></div>\n<p>Объединение этих двух даёт нам такой результат:</p><div class="code-example" id="sect4"><div class="example-header" id="sect5"></div></div>\n<p>Итак, что мы сделали тут? Это определённо выглядит иначе чем стилизация по умолчанию, но все ещё даёт достаточно знакомый опыт для пользователей, чтобы знать, что происходит:</p>\n<ul>\n  <li>Первые два правила не так интересны в этом обсуждении.</li>\n  <li>Третье правило использует селектор <code>a</code> чтобы избавиться от подчёркивания текста и контура фокуса по умолчанию (которые всё равно варьируют в зависимости от браузера), а также добавляет малое количество padding к каждой ссылке — все это станет ясно позже.</li>\n  <li>Далее, мы используем селекторы <code>a:link</code> и <code>a:visited</code> чтобы настроить пару цветовых вариаций не посещённых и посещённых ссылок, так чтоб они отличались.</li>\n  <li>Следующие два правила используют <code>a:focus</code> и <code>a:hover</code> настраивают сфокусированные и наведённые (hovered) ссылки таким образом чтобы они имели разные фоновые цвета, плюс нижнее подчёркивание чтобы ссылка выделялась ещё больше. Два пункта на которые надо обратить внимание:\n    <ul>\n      <li>Нижнее подчёркивание создано используя <a><code>border-bottom</code></a>, а не <a class="only-in-en-us" title="Currently only available in English (US)"><code>text-decoration</code> <small>(en-US)</small></a> — некоторые люди предпочитают это потому что первый имеет лучшие варианты стилизации, чем второй, и отрисован немного ниже, так что не срезает нижние элементы слов будучи подчёркнутыми (например хвосты у букв как "р" и "у").</li>\n      <li>Значение <a><code>border-bottom</code></a> установлено на <code>1px solid</code>, без определённого цвета. Это позволяет границам принимать тот же цвет что и элементы текста, что полезно в случае как этом, где текст имеет разные цвета в каждом случае.</li>\n    </ul>\n  </li>\n  <li>Наконец, <code>a:active</code> используется чтобы дать ссылкам инвертированную цветовую схему в то время когда они активированы, чтобы было ясно что происходит что то важное!</li>\n</ul></div></section><section aria-labelledby="активное_изучение_стилизуйте_ссылки_самостоятельно"><h3 id="активное_изучение_стилизуйте_ссылки_самостоятельно"><a>Активное изучение: Стилизуйте ссылки самостоятельно</a></h3><div class="section-content"><p>В этой секции активного изучения, мы бы хотели, чтобы взяли наш набор пустых правил и добавили ваши собственные объявления так чтобы ссылки выглядели действительно круто. Используйте своё воображение, не сковывайтесь. Мы уверены, что вы можете придумать что-то более крутое и все ещё так же функциональное, как и наш пример выше.</p>\n<p>Если вы допустите ошибку, вы всегда можете сделать сброс используя кнопку <em>Reset</em>. Если вы действительно застряли нажмите кнопку <em>Show solution</em> чтобы вставить пример, который мы показали выше.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><div class="body-wrapper" style="font-family: \'Open Sans Light\',Helvetica,Arial,sans-serif;">\n  <h2>HTML Input</h2>\n  <input id="code" class="html-input" style="width: 90%;height: 10em;padding: 10px;border: 1px solid #0095dd;">&lt;p&gt;There are several browsers available, such as &lt;a href="https://www.mozilla.org/en-US/firefox/"&gt;Mozilla\n Firefox&lt;/a&gt;, &lt;a href="https://www.google.com/chrome/index.html"&gt;Google Chrome&lt;/a&gt;, and\n&lt;a href="https://www.microsoft.com/en-us/windows/microsoft-edge"&gt;Microsoft Edge&lt;/a&gt;.&lt;/p&gt;</input>\n\n  <h2>CSS Input</h2>\n  <input id="code" class="css-input" style="width: 90%;height: 10em;padding: 10px;border: 1px solid #0095dd;">a {\n\n}\n\na:link {\n\n}\n\na:visited {\n\n}\n\na:focus {\n\n}\n\na:hover {\n\n}\n\na:active {\n\n}</input>\n\n  <h2>Output</h2>\n  <div class="output" style="width: 90%;height: 10em;padding: 10px;border: 1px solid #0095dd;"></div>\n  <div class="controls">\n    <input id="reset" type="button" value="Reset" style="margin: 10px 10px 0 0;">\n    <input id="solution" type="button" value="Show solution" style="margin: 10px 0 0 10px;">\n  </div>\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">var htmlInput = document.querySelector(".html-input");\nvar cssInput = document.querySelector(".css-input");\nvar reset = document.getElementById("reset");\nvar htmlCode = htmlInput.value;\nvar cssCode = cssInput.value;\nvar output = document.querySelector(".output");\nvar solution = document.getElementById("solution");\n\nvar styleElem = document.createElement("style");\nvar headElem = document.querySelector("head");\nheadElem.appendChild(styleElem);\n\nfunction drawOutput() {\n  output.innerHTML = htmlInput.value;\n  styleElem.textContent = cssInput.value;\n}\n\nreset.addEventListener("click", function () {\n  htmlInput.value = htmlCode;\n  cssInput.value = cssCode;\n  drawOutput();\n});\n\nsolution.addEventListener("click", function () {\n  htmlInput.value = htmlCode;\n  cssInput.value =\n    "p {\n  font-size: 1.2rem;\n  font-family: sans-serif;\n  line-height: 1.4;\n}\n\na {\n  outline: none;\n  text-decoration: none;\n  padding: 2px 1px 0;\n}\n\na:link {\n  color: #265301;\n}\n\na:visited {\n  color: #437A16;\n}\n\na:focus {\n  border-bottom: 1px solid;\n  background: #BAE498;\n}\n\na:hover {\n  border-bottom: 1px solid;\n  background: #CDFEAA;\n}\n\na:active {\n  background: #265301;\n  color: #CDFEAA;\n}";\n  drawOutput();\n});\n\nhtmlInput.addEventListener("input", drawOutput);\ncssInput.addEventListener("input", drawOutput);\nwindow.addEventListener("load", drawOutput);\n</pre></div><div class="code-example" id="sect6"><div class="example-header" id="sect7"></div></div></div></section><section aria-labelledby="добавление_иконок_в_ссылки"><h2 id="добавление_иконок_в_ссылки"><a>Добавление иконок в ссылки</a></h2><div class="section-content"><p>Обычной практикой является добавление иконок в ссылки, чтобы предоставить больше индикатора того, на какой контент указывает ссылка. Давайте рассмотрим очень простой пример, который добавляет иконку к внешним ссылкам (ссылки, которые ведут на другие сайты). Такая ссылка обычно выглядит как маленькая стрела торчащая из коробочки — например, мы будем использовать <a class="external" target="_blank">этот отличный образец с сайта icons8.com</a>.</p>\n<p>Давайте взглянем на HTML и CSS которые дадут нам эффект, который мы хотим. Во-первых, немного простого HTML который будет стилизован:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  For more information on the weather, visit our\n  <a href="weather.html">weather page</a>, look at\n  <a href="https://en.wikipedia.org/wiki/Weather">weather on Wikipedia</a>, or\n  check out\n  <a href="http://www.extremescience.com/weather.htm">weather on Extreme Science</a>.\n</p>\n</pre></div>\n<p>Далее, CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">body {\n  width: 300px;\n  margin: 0 auto;\n  font-family: sans-serif;\n}\n\np {\n  line-height: 1.4;\n}\n\na {\n  outline: none;\n  text-decoration: none;\n  padding: 2px 1px 0;\n}\n\na:link {\n  color: blue;\n}\n\na:visited {\n  color: purple;\n}\n\na:focus,\na:hover {\n  border-bottom: 1px solid;\n}\n\na:active {\n  color: red;\n}\n\na[href*="http"] {\n  background: url("external-link-52.png") no-repeat 100% 0;\n  background-size: 16px 16px;\n  padding-right: 19px;\n}\n</pre></div><div class="code-example" id="sect8"><div class="example-header" id="sect9"></div></div>\n<p>Итак, что же тут происходит? Мы пропустим большую часть CSS так как это та же информация, которую вы рассматривали ранее. Однако, последнее правило интересное — тут мы вставляем пользовательское фоновое изображение во внешнюю ссылку схожим способом как мы делали <a>пользовательские маркеры для пунктов списка</a> в последней статье — в этот раз, однако, мы используем короткую запись <a><code>background</code></a> вместо индивидуальных свойств. Мы задаём путь к изображению, которое хотим вставить, устанавливаем <code>no-repeat</code> чтобы мы получили только одну копию вставленного и затем устанавливаем позицию на 100% до правого края изображения и 0 пикселей от верхнего края.</p>\n<p>Также мы используем <a><code>background-size</code></a> для того чтобы указать размер в котором бы хотим чтобы было показано фоновое изображение — полезно иметь иконку большего размера и далее менять его размер так, как нужно для адаптивного (отзывчивого) веб-дизайна. Однако это работает только в IE9 и следующих версиях так что, если вам нужна поддержка тех старых браузеров вам просто придётся менять размер изображения и вставлять его как есть.</p>\n<p>Наконец, мы задаём некоторый <a><code>padding-right</code></a> для ссылки чтобы добавить пространство в котором появляется фоновое изображение, таким образом, чтобы мы не накладывали его на текст.</p>\n<p>И последнее слово — как мы выбрали только внешние ссылки? Ну, если вы пишете свои <a>HTML ссылки</a> правильно, то вы должны были использовать только абсолютные URL для внешних ссылок — гораздо эффективнее использовать относительные ссылки для связи с другими частями вашего сайта. Текст "http" таким образом должен появляться только во внешних ссылках и можем выбрать его при помощи <a>селектора атрибутов</a>: <code>a[href*="http"]</code> выбирает элементы <a><code>&lt;a&gt;</code></a>, но только если они имеют атрибут <a><code>href</code></a> со значением содержащим "http" где-то внутри него.</p>\n<p>Ну вот и все — попробуйте посетить секцию активного изучения выше и испытайте этот новый метод!</p>\n<div class="notecard note" id="sect10">\n  <p><strong>Примечание:</strong> Не переживайте если вы ещё не знакомы с <a>фоном</a> и <a class="only-in-en-us" title="Currently only available in English (US)">адаптивным (отзывчивым) веб-дизайном <small>(en-US)<small></small></small></a>; это объяснено в других местах</p>\n</div></div></section><section aria-labelledby="стилизация_ссылок_в_виде_кнопок"><h2 id="стилизация_ссылок_в_виде_кнопок"><a>Стилизация ссылок в виде кнопок</a></h2><div class="section-content"><p>Инструменты, которые вы исследовали в этой статье также могут быть использованы другим способом. Например, такие состояния как hover могут быть использованы для стилизации множества различных элементов, не только ссылок — вы можете захотеть стилизовать состояние hover параграфов, элементов списка или других вещей.</p>\n<p>Дополнительно, ссылки очень часто стилизуют так, чтоб они выглядели и вели себя как кнопки при определённых обстоятельствах — навигационное меню веб-сайтов обычно размечено как список, содержащий ссылки, который легко может быть стилизован так чтоб выглядел как набор кнопок управления или вкладок которые обеспечивают пользователя доступом к другим частям сайта. Давайте изучим как.</p>\n<p>Для начала HTML:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><ul>\n  <li><a href="#">Home</a></li>\n  <li><a href="#">Pizza</a></li>\n  <li><a href="#">Music</a></li>\n  <li><a href="#">Wombats</a></li>\n  <li><a href="#">Finland</a></li>\n</ul>\n</pre></div>\n<p>А теперь наш CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">body,\nhtml {\n  margin: 0;\n  font-family: sans-serif;\n}\n\nul {\n  padding: 0;\n  width: 100%;\n}\n\nli {\n  display: inline;\n}\n\na {\n  outline: none;\n  text-decoration: none;\n  display: inline-block;\n  width: 19.5%;\n  margin-right: 0.625%;\n  text-align: center;\n  line-height: 3;\n  color: black;\n}\n\nli:last-child a {\n  margin-right: 0;\n}\n\na:link,\na:visited,\na:focus {\n  background: yellow;\n}\n\na:hover {\n  background: orange;\n}\n\na:active {\n  background: red;\n  color: white;\n}\n</pre></div>\n<p>Что даёт нам следующий результат:</p><div class="code-example" id="sect11"><div class="example-header" id="sect12"></div></div>\n<p>Давайте объясним, что тут происходит, фокусируясь на самых интересных частях:</p>\n<ul>\n  <li>Наше второе правило удаляет заданный по умолчанию <a><code>padding</code></a> у элемента <a><code>&lt;ul&gt;</code></a> и устанавливает его ширину так, чтобы охватить 100% внешнего контейнера (в этом случае <a><code>&lt;body&gt;</code></a>).</li>\n  <li>Элементы <a><code>&lt;li&gt;</code></a> по умолчанию в норме являются блочными (см. <a>типы блоков CSS</a> чтобы вспомнить), что значит что они будут располагаться на своих собственных строках. В этом случае мы создаём горизонтальный список ссылок, поэтому в третьем правиле задаём свойству <a><code>display</code></a> значение inline, что приводит к тому, что элементы списка располагаются в одной строке друг с другом — теперь они ведут себя как строчные элементы.</li>\n  <li>четвёртое правило — которое стилизует элемент <a><code>&lt;a&gt;</code></a> — самое сложное; давайте пройдёмся по нему шаг за шагом:\n    <ul>\n      <li>как в предыдущем примере, мы начинаем отключать настройки по умолчанию для <a class="only-in-en-us" title="Currently only available in English (US)"><code>text-decoration</code> <small>(en-US)</small></a> и <a><code>outline</code></a> — мы не хотим, чтоб они портили нам вид.</li>\n      <li>Далее мы устанавливаем <a><code>display</code></a> на <code>inline-block</code> — элементы <a><code>&lt;a&gt;</code></a> являются строчными по умолчанию и, поскольку мы не хотим чтобы они вываливались на свои собственные строки как если бы это получалось со значением <code>block</code>, мы хотим иметь возможность менять их размер. <code>inline-block</code> позволяет нам делать это.</li>\n      <li>Теперь только изменение размера! Мы хотим заполнить всю ширину элемента <a><code>&lt;ul&gt;</code></a>, оставить немного margin между каждой кнопкой (не без зазора с правого края) и мы имеем 5 кнопок, которые надо разместить и которые должны иметь одинаковый размер. Для того чтобы это сделать мы задаём <a><code>width</code></a> на 19.5%, а <a><code>margin-right</code></a> на 0.625%. Вы заметите что вся эта эта ширина составляет 100.625%, что может сделать так что последняя кнопка перекроет <code>&lt;ul&gt;</code> и выпадет вниз на следующую строку. Тем не менее, мы возвращаемся к 100%, используя следующее правило, которое выбирает только последний <code>&lt;a&gt;</code> в списке и удаляет его margin. Сделано!</li>\n      <li>Последние три объявления довольно просты и в основном просто для косметических целей. Мы центрируем текст внутри каждой ссылки, задаём <a><code>line-height</code></a> на 3 чтобы кнопки имели некую высоту (что также имеет преимущество в центрировании текста по вертикали) и задаём для текста чёрный цвет.</li>\n    </ul>\n  </li>\n</ul>\n<div class="notecard note" id="sect13">\n  <p><strong>Примечание:</strong> вы могли заметить что элементы списка в HTML все находятся на одной строке друг с другом — так сделано потому, что это сделано потому, что пробелы/разрывы строк между элементами встроенного блока создают пробелы на странице, точно также как пробелы между словами и такие пробелы могли бы нарушить расположение нашего горизонтального меню навигации. Вы можете найти больше информации об этой проблеме (и решения) на <a class="external" target="_blank">Fighting the space between inline block elements</a>.</p>\n</div></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Мы надеемся эта статья снабдила вас всем что вам надо знать о ссылках — на данный момент! Последняя статья в нашем модуле стилизации текста детализирует как использовать пользовательские шрифты на вашем веб-сайте или как они больше известны веб-шрифты.</p></div></section>',
					works: [],
				},
				{
					title: 'Веб-шрифты',
					chapter: 2.3,
					content:
						'<header><h1>Веб-шрифты</h1></header><div class="section-content">\n<p>В первой статье модуля, мы изучали основные функции CSS доступные для стилизации шрифтов и текста. В этой статье мы продвинемся дальше изучая веб-шрифты в деталях — они позволяют вам загружать пользовательские шрифты вместе с вашей веб-страницей, чтобы обеспечить более разнообразный, индивидуальный стиль текста.</p>\n</div><section aria-labelledby="краткое_повторение_семейств_шрифтов"><h2 id="краткое_повторение_семейств_шрифтов"><a>Краткое повторение семейств шрифтов</a></h2><div class="section-content"><p>Как мы рассматривали в <a>Фундаментальной стилизации текста и шрифта</a>, шрифты применённые к вашему HTML могут контролироваться при помощи свойства <a><code>font-family</code></a>. Оно принимает одно и более имён семейств шрифтов и браузер следует по списку пока не найдёт тот шрифт, который является доступным в системе, под управлением которой он работает:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p {\n  font-family: Helvetica, "Trebuchet MS", Verdana, sans-serif;\n}\n</pre></div>\n<p>Эта система работает хорошо, но традиционно выбор шрифтов веб-разработчиков была ограниченной. Существует только горсть шрифтов которые вы можете гарантировать, что они являются доступными во всех распространённых системах — так называемые <a>Безопасные веб-шрифты</a>. Вы можете использовать стек шрифта для указания предпочтительных шрифтов, за которыми следует веб-безопасные альтернативы, за которыми следует системный шрифт по умолчанию, но это добавляет дополнительной работы с точки зрения тестирования, чтобы убедиться, что ваш дизайн выглядит хорошо с каждым из шрифтов и т. д.</p></div></section><section aria-labelledby="веб-шрифты"><h2 id="веб-шрифты"><a>Веб-шрифты</a></h2><div class="section-content"><p>Но есть альтернатива, которая работает очень хорошо начиная с 6-ой версии IE. Веб-шрифты — это функция CSS позволяющая вам указывать файлы шрифтов, загружаемые вместе с вашим веб-сайтом по мере доступа к нему, это означает, что любой браузер, поддерживающий веб-шрифты, может иметь в своём распоряжении именно те шрифты, которые вы укажете. Замечательно! Требуемый синтаксис выглядит примерно так:</p>\n<p>Во-первых, у вас есть блок <a><code>@font-face</code></a> в начале CSS, который указывает файл(-ы) шрифтов для загрузки:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">@font-face {\n  font-family: "myFont";\n  src: url("myFont.woff");\n}\n</pre></div>\n<p>Ниже вы можете использовать имя семейства шрифтов, указанное внутри @font-face, чтобы применить свой собственный шрифт ко всему, что вам нравится, как обычно:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">html {\n  font-family: "myFont", "Bitstream Vera Serif", serif;\n}\n</pre></div>\n<p>Синтаксис становится немного сложнее, чем этот; мы вдадимся в подробности ниже.</p>\n<p>Есть две важные вещи, которые нужно иметь в виду о веб-шрифтах:</p>\n<ol>\n  <li>Браузеры поддерживают разные форматы шрифтов, поэтому вам будут нужны несколько форматов шрифтов для приличной кросс-браузерной поддержки. Например, большинство современных браузеров поддерживают WOFF/WOFF2 (Web Open Font Format versions 1 and 2), наиболее эффективный формат, но старые версии IE поддерживают только шрифты EOT (Embedded Open Type) и вам возможно понадобиться включать версию SVG шрифта для поддержки старых версий браузеров iPhone и Android. Ниже мы покажем вам как генерировать требуемый код.</li>\n  <li>В основном шрифты не бесплатны для использования. Вы должны платить за них и/или соблюдать другие условия лицензии такие как указание создателя шрифта в коде (или на вашем сайте). Вы не должны красть шрифты и использовать их без должного указания авторства.</li>\n</ol>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Веб-шрифты как технология поддерживается в Internet Explorer начиная с 4 версии!</p>\n</div></div></section><section aria-labelledby="активное_изучение_пример_веб-шрифта"><h2 id="активное_изучение_пример_веб-шрифта"><a>Активное изучение: пример веб-шрифта</a></h2><div class="section-content"><p>Имея это в виду, давайте создадим базовый пример веб-шрифта из первых принципов. Сложно продемонстрировать это на встроенном живом примере, поэтому вместо, мы бы хотели, чтобы следовали детальным шагам в секциях ниже, чтобы понять идею процесса</p>\n<p>Вы должны использовать файлы <a class="external" target="_blank">web-font-start.html</a> и <a class="external" target="_blank">web-font-start.css</a> как отправную точку добавляя в них ваш код (см. <a class="external" target="_blank">живой пример</a>). Сейчас сделайте копию этих файлов в новой директории на вашем компьютере. В файле <code>web-font-start.css</code> вы найдёте некоторый минимальный CSS для работы с базовым макетом и вёрсткой примера.</p></div></section><section aria-labelledby="поиск_шрифтов"><h3 id="поиск_шрифтов"><a>Поиск шрифтов</a></h3><div class="section-content"><p>В этом примере мы будем использовать два веб-шрифта, один для заголовков, и другой для основного текста. Для того чтобы начать нам необходимо найти файлы шрифтов, которые содержат эти шрифты. Шрифты созданы шрифтовыми "цехами" и хранятся в разных форматах фалов. Как правило существует три типа сайтов, где вы можете получить шрифты:</p>\n<ul>\n  <li>Бесплатный дистрибьютер шрифтов: это сайт, который предоставляет бесплатные шрифты для скачивания (могут существовать некоторые условия лицензии, например, указание создателя шрифта). Примеры включают <a class="external" target="_blank">Font Squirrel</a>, <a class="external" target="_blank">dafont</a>, и <a class="external" target="_blank">Everything Fonts</a>.</li>\n  <li>Платный дистрибьютер шрифтов: это сайт, который предоставляет шрифты за плату, например <a class="external" target="_blank">fonts.com</a> или <a class="external" target="_blank">myfonts.com</a>. Также вы можете купить шрифты напрямую у производителя шрифтов, например <a class="external" target="_blank">Linotype</a>, <a class="external" target="_blank">Monotype</a>, или <a class="external" target="_blank">Exljbris</a>.</li>\n  <li>Сервис онлайн шрифтов: это сайт, который предоставляет вам шрифты, делая весь процесс проще. Смотрите раздел <a>Использование онлайн-сервиса шрифтов</a> для более подробной информации.</li>\n</ul>\n<p>Давайте найдём какие-нибудь шрифты! Отправляйтесь на <a class="external" target="_blank">Font Squirrel</a> и выберите два шрифта — симпатичный интересный шрифт для заголовков (может быть симпатично выглядящий или шрифт с засечками) и немного менее кричащий и более читабельный шрифт для параграфов. Когда вы найдёте каждый шрифт, нажмите на кнопку загрузки и сохраните файлы в той же директории, где ранее вы сохранили файлы HTML и CSS. Не имеет значения являются ли они TTF (True Type Fonts) или OTF (Open Type Fonts).</p>\n<p>В любом случае распакуйте архив со шрифтом (веб-шрифты обычно распространяются в ZIP файлах, содержащих файл(-ы) шрифта и лицензионную информацию). Вы можете обнаружить несколько файлов шрифтов в упаковке (архиве) — некоторые шрифты распространяются как семейство с различными доступными вариантами, например тонкий, средний, жирный, курсив, тонкий курсив и т.д. В этом примере мы просто хотим, чтобы вы позаботились о едином файле шрифта для каждого варианта.</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> В разделе "Find fonts" в колонке справа, вы можете кликать по различным тегам и классификациям чтобы отфильтровать отображаемые варианты для выбора.</p>\n</div></div></section><section aria-labelledby="генерация_требуемого_кода"><h3 id="генерация_требуемого_кода"><a>Генерация требуемого кода</a></h3><div class="section-content"><p>Теперь вам надо будет сгенерировать требуемый код (и форматы шрифтов). Для каждого шрифта проделайте следующие шаги.</p>\n<ol>\n  <li>Убедитесь, что вы выполнили все лицензионные требования если вы собираетесь использовать это в коммерческих и/или веб проектах.</li>\n  <li>Перейдите на Fontsquirrel <a class="external" target="_blank">Webfont Generator</a>.</li>\n  <li>Выгрузите два ваших файла шрифтов используя кнопку <em>Upload Fonts.</em></li>\n  <li>Поставьте галочку отмеченную "Yes, the fonts I\'m uploading are legally eligible for web embedding".</li>\n  <li>Кликните по <em>Download your kit</em>.</li>\n</ol>\n<p>После того как генератор закончит обработку, вы должны получить ZIP файл к загрузке — сохраните его в той же директории что и ваши HTML и CSS.</p></div></section><section aria-labelledby="реализация_кода_в_вашем_демо"><h3 id="реализация_кода_в_вашем_демо"><a>Реализация кода в вашем демо</a></h3><div class="section-content"><p>Теперь распакуйте набор веб-шрифта, который вы только что сгенерировали. Внутри распакованной папки вы увидите три полезных элемента:</p>\n<ul>\n  <li>несколько версий каждого шрифта (например <code>.ttf</code>, <code>.woff</code>, <code>.woff2</code> и т.д.; предоставленные шрифты будут обновляться со временем по мере изменения требований поддержки браузера). Как упомянуто выше, несколько шрифтов нужны для кросс-браузерной поддержки — это метод Fontsquirrel быть уверенными что вы получили всё что вам надо.</li>\n  <li>Демо файл HTML для каждого шрифта — загрузите их в ваш браузер чтобы посмотреть, как будет выглядеть шрифт в разных контекстах использования.</li>\n  <li>Файл <code>stylesheet.css</code>, который содержит сгенерированный @font-face код который вам нужен.</li>\n</ul>\n<p>Для внедрения их в ваше демо следуйте следующим шагам:</p>\n<ol>\n  <li>Переименуйте распакованную папку на что-нибудь лёгкое и простое, например <code>fonts</code>.</li>\n  <li>Откройте файл <code>stylesheet.css</code> и скопируйте содержимое обоих <code>@font-face</code> блоков в ваш файл <code>web-font-start.css</code> — вам надо вставить их в самый верх, до любого вашего CSS, так как шрифты должны быть импортированы до того, как вы сможете использовать их на вашем сайте.</li>\n  <li>Каждый из функций <code>url()</code> указывает на файл шрифта который мы хотим импортировать в наш CSS — мы должны убедиться в том, что пути к файлам верные, поэтому добавьте <code>fonts/</code> в начало каждого пути (настройте так как необходимо).</li>\n  <li>Теперь вы можете использовать эти шрифты в ваших стеках шрифтов, как и любой веб-безопасный или по умолчанию системный шрифт. Например:</li>\n</ol>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">font-family: "zantrokeregular", serif;\n</pre></div>\n<p>Вы должны получить демо-страницу с какими-то реализованными симпатичными шрифтами. Поскольку различные шрифты создаются в разных размерах, вам может понадобиться настроить размер, интервалы и т.д., чтобы отладить внешний вид.</p>\n<p>\n  \n</p>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Если у вас возникли какие-либо проблемы с тем что что-то не работает, смело сравнивайте файлы вашей версии с нашей законченной — см. <a class="external" target="_blank">web-font-finished.html</a> и <a class="external" target="_blank">web-font-finished.css</a> (<a class="external" target="_blank">run the finished example live</a>).</p>\n</div></div></section><section aria-labelledby="использование_онлайн-сервиса_шрифтов"><h2 id="использование_онлайн-сервиса_шрифтов"><a>Использование онлайн-сервиса шрифтов</a></h2><div class="section-content"><p>Онлайн-сервисы шрифтов обычно хранят и обслуживают шрифты для вас, поэтому вам не надо переживать о написании <code>@font-face</code> кода и обычно необходимо просто вставить строчку или две простого кода в ваш сайт для того чтобы все работало. Примеры включают <a class="external" target="_blank">Adobe Fonts</a> и <a class="external" target="_blank">Cloud.typography</a>. Большинство из этих услуг на основе подписки, за исключением <a class="external" target="_blank">Google Fonts</a>, полезный бесплатный сервис, особенно для быстрого тестирования работы и написания демо.</p>\n<p>Большинство из этих сервисов легки в использовании, поэтому мы не будем освещать их в деталях. Давайте кратко рассмотрим Google fonts, чтобы вы понимали идею. И снова, используйте копии <code>web-font-start.html</code> и <code>web-font-start.css</code> в качестве отправной точки.</p>\n<ol>\n  <li>Отправляйтесь на <a class="external" target="_blank">Google Fonts</a>.</li>\n  <li>Используйте фильтры с правой стороны чтобы отобразить типы шрифтов, которые вы хотите выбрать и выберите пару шрифтов, которые вам понравятся.</li>\n  <li>Для выбора семейства шрифтов нажмите на кнопку ⊕ рядом с ним.</li>\n  <li>Когда вы выбрали семейства шрифтов, нажмите на панель <em>[Number] Families Selected</em> в низу страницы.</li>\n  <li>На полученном экране, сначала вам надо скопировать строку показанного HTML кода и вставить её в head вашего HTML файла. Вставьте его выше существующего <a><code>&lt;link&gt;</code></a> элемента для того, чтоб шрифт импортировался до того, как вы начнёте пользоваться им в вашем CSS.</li>\n  <li>Далее вам надо скопировать CSS-объявления, перечисленные в вашем CSS, чтобы применить пользовательские шрифты к вашему HTML.</li>\n</ol>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> вы можете найти законченные версии <a class="external" target="_blank">google-font.html</a> и <a class="external" target="_blank">google-font.css</a>, если вам необходимо сверить вашу работу с нашей (<a class="external" target="_blank">см. live</a>).</p>\n</div></div></section><section aria-labelledby="font-face_более_детально"><h2 id="font-face_более_детально"><a>@font-face более детально</a></h2><div class="section-content"><p>Давайте исследуем тот <code>@font-face</code> синтаксис, который fontsquirrel сгенерировал для вас. Это то, как выглядит один из этих блоков:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">@font-face {\n  font-family: "ciclefina";\n  src: url("fonts/cicle_fina-webfont.eot");\n  src:\n    url("fonts/cicle_fina-webfont.eot?#iefix") format("embedded-opentype"),\n    url("fonts/cicle_fina-webfont.woff2") format("woff2"),\n    url("fonts/cicle_fina-webfont.woff") format("woff"),\n    url("fonts/cicle_fina-webfont.ttf") format("truetype"),\n    url("fonts/cicle_fina-webfont.svg#ciclefina") format("svg");\n  font-weight: normal;\n  font-style: normal;\n}\n</pre></div>\n<p>Это называется "пуленепробиваемым @font-face синтаксисом", после публикации Пола Айриша (Paul Irish), с самого начала, когда <code>@font-face</code> начал получать популярность (<a class="external" target="_blank">Bulletproof @font-face Syntax</a>). Давайте пройдёмся по нему, чтобы посмотреть, что он делает:</p>\n<ul>\n  <li><code>font-family</code>: В этой строке указывается имя, которое вы хотите использовать для обозначения шрифта. Вы можете указать его как угодно, если вы используете его последовательно в вашем CSS.</li>\n  <li><code>src</code>: В этой строке указывается путь к файлам шрифтов которые будут импортированы в ваш CSS (<code>url</code> путь) и формат каждого файла шрифта (<code>format</code> часть). Последняя часть в каждом случае опциональна, но полезно объявлять его, потому что это позволяет браузерам быстрее находить шрифт, который они могут использовать. Могут быть перечислены несколько объявлений, разделённых запятыми — браузер будет искать среди них и использовать первый который найдёт и тот который он понимает — поэтому лучше всего ставить новые, лучшие форматы такие как WOFF2 в начало, а старые, не такие хорошие форматы как TTF в конец. Единственное исключение это EOT шрифты — они размещены первыми чтобы исправить пару багов в старых версиях IE который постарается использовать первую вещь, которую найдёт, даже если он не умеет использовать этот шрифт.</li>\n  <li><a><code>font-weight</code></a>/<a><code>font-style</code></a>: В этих строках указывается какую толщину имеет шрифт и является ли он курсивом или нет. Если вы импортируете несколько значений толщины одного и того же шрифта вы можете указать какая у них толщина/стиль и затем использовать разные значения <a><code>font-weight</code></a>/<a><code>font-style</code></a> для выбора между ними, вместо того, чтобы называть всех разных членов семейства шрифтов разными именами. <a class="external" target="_blank">@font-face совет: установите font-weight и font-style так чтобы ваш CSS был простым</a> от Роджера Джонсона (Roger Johansson) покажет, что делать более детально.</li>\n</ul>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> вы также можете указать определённые значения <a class="only-in-en-us" title="Currently only available in English (US)"><code>font-variant</code> <small>(en-US)</small></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>font-stretch</code> <small>(en-US)</small></a> для ваших веб-шрифтов. В новых браузерах вы также можете указать значение <a class="only-in-en-us" title="Currently only available in English (US)"><code>unicode-range</code> <small>(en-US)</small></a>, который является конкретным диапазоном символов, которые вы хотите использовать из веб-шрифта — в поддерживающих браузерах, будут загружены только указанные символы, сохраняя от ненужной загрузки. <a class="external" target="_blank">Creating Custom Font Stacks with Unicode-Range</a> от Drew McLellan предоставляет некоторые полезные идеи того как это использовать</p>\n</div></div></section><section aria-labelledby="переменные_шрифты"><h2 id="переменные_шрифты"><a>Переменные шрифты</a></h2><div class="section-content"><p>В браузерах доступна новая технология, называемая переменными шрифтами — это шрифты, которые позволяют включить в единственный файл много разных вариантов дизайнов шрифтов, вместо того чтобы иметь отдельные файлы шрифтов для каждой ширины, толщины или стиля. Они несколько продвинуты для нашего курса для начинающих, но если вы хотите расширить свои знания и посмотреть на них, прочитайте наше <a class="only-in-en-us" title="Currently only available in English (US)">Руководство по переменным шрифтам <small>(en-US)<small></small></small></a>.</p></div></section><section aria-labelledby="испытайте_свои_навыки!"><h2 id="испытайте_свои_навыки!"><a>Испытайте свои навыки!</a></h2><div class="section-content"><p>Вы достигли конца этой статьи и уже испытали некоторые навыки в наших разделах активного изучения, но сможете ли вы вспомнить самую важную информацию продвигаясь дальше? Вы можете найти задание для проверки того что вы усвоили информацию к конце модуля — см. <a>Задание: стилизация школьного сайта</a>.</p></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Теперь, когда вы ознакомились с нашими статьями об основах стилизации текста, пришло время проверить ваше понимание нашей оценкой модуля «Задание: стилизация школьного сайта».</p></div></section>',
					works: [],
				},
				{
					title: 'Задание- Стилизирование школьного сайта',
					chapter: 2.31,
					content:
						'<header><h1>Задание: Стилизирование школьного сайта</h1></header><div class="section-content">\n<p>В этой оценке мы проверим ваше понимание всех методов стилизации текста, которые мы рассмотрели в этом модуле дав вам задание стилизовать текст домашней страницы общественной школы. Вы можете просто развлечься, выполняя задание.</p>\n</div><section aria-labelledby="отправная_точка"><h2 id="отправная_точка"><a>Отправная точка</a></h2><div class="section-content"><p>Чтобы начать эту оценку, вам необходимо:</p>\n<ul>\n  <li>Перейти и взять файлы <a class="external" target="_blank">HTML</a> и <a class="external" target="_blank">CSS</a> для упражнения, а также предоставленную <a class="external" target="_blank">иконку внешней ссылки</a>.</li>\n  <li>Сделайте их копии на вашем компьютере.</li>\n</ul>\n<p>В качестве альтернативы, вы можете пользоваться сайтами как <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Glitch</a> чтобы выполнить оценку. Вы можете вставить HTML и заполнить CSS в одном из этих онлайн-редакторов и использовать <a class="external" target="_blank">этот URL</a> чтобы указать фоновое изображение. Если же онлайн-редактор, которым вы пользуетесь, не имеет отдельной CSS панели, тогда вводите его в элемент <code>&lt;style&gt;</code> в head документа.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Если вы застрянете, то попросите помощи — см. секцию <a>Оценка или дальнейшая помощь</a> в конце этой страницы.</p>\n</div></div></section><section aria-labelledby="краткое_описание_проекта"><h2 id="краткое_описание_проекта"><a>Краткое описание проекта</a></h2><div class="section-content"><p>Вам предоставлен некоторый "сырой" HTML для домашней страницы воображаемого общественного колледжа, плюс немного CSS который стилизует страницу в макет с тремя колонками и обеспечивает ещё каким-то другим элементарным стилем. Вы должны писать ваш дополнительный CSS после комментария в низу CSS файла, чтобы убедиться, что вы с лёгкостью заметите части проделанные вами. Не переживайте если некоторые селекторы повторяются; мы отпустим вас с этим случаем.</p>\n<p>Шрифты:</p>\n<ul>\n  <li>Во-первых, загрузите парочку бесплатных для использования шрифтов. Так как это колледж, шрифты должны быть выбраны так чтоб они придавали достаточной серьёзности, формальности и чувства заслуживающего доверия — может подойти шрифт с засечками (serif) для всего основного текста, в сочетании с шрифтами sans-serif или serif для заголовков.</li>\n  <li>Используйте подходящий сервис для генерации пуленепробиваемого <code>@font-face</code> кода для этих двух шрифтов.</li>\n  <li>Примените ваш основной шрифт для всей страницы и шрифт заголовка для заголовков.</li>\n</ul>\n<p>Общая стилизация текста:</p>\n<ul>\n  <li>Дайте всей странице <code>font-size</code> <code>10px</code>.</li>\n  <li>Дайте вашему заголовку и другим типам элементов подходящие размеры шрифта задаваемые используя соответствующие относительные единицы.</li>\n  <li>Дайте основному тексту подходящую <code>line-height</code>.</li>\n  <li>Отцентрируйте ваш заголовок верхнего уровня на странице.</li>\n  <li>Дайте вашим заголовкам немного <code>letter-spacing</code> чтобы они не были слишком сжатыми, позвольте буквам немного дышать.</li>\n  <li>Дайте основному тексту немного <code>letter-spacing</code> и <code>word-spacing</code>, при необходимости.</li>\n  <li>Дайте первым параграфам после каждого заголовка в <code>&lt;section&gt;</code> немного отступа, скажем 20px.</li>\n</ul>\n<p>Ссылки:</p>\n<ul>\n  <li>Дайте состояниям link, visited, focus, и hover какой-нибудь цвет, который будет сочетается с цветом горизонтальных линий на верху и в низу страницы.</li>\n  <li>Сделайте так чтобы ссылки были подчёркнутыми по умолчанию, но, чтобы подчёркивание исчезало, когда вы фокусируетесь или наводите мышь на них.</li>\n  <li>Удалите установленный по умолчанию контурный фокус со ВСЕХ ссылок на странице.</li>\n  <li>Дайте состоянию active заметно отличимый стиль так чтоб он красиво выделялся, но чтоб он все ещё вписывался в общий дизайн страницы.</li>\n  <li>Сделайте так чтоб внешние ссылки имели иконку внешней ссылки, вставленную рядом с ними.</li>\n</ul>\n<p>Списки:</p>\n<ul>\n  <li>Убедитесь, что интервалы ваших списков и пунктов списка совпадают со стилизацией всей страницы. Все элементы списка должны иметь ту же <code>line-height</code> что и строки параграфов, и каждый список должен иметь те же интервалы сверху и снизу которые имеются между параграфами.</li>\n  <li>Дайте элементам списка симпатичные маркеры, соответствующие дизайну страницы. Выберете ли вы пользовательские изображения для маркеров или что-то другое — зависит от вас.</li>\n</ul>\n<p>Меню навигации:</p>\n<ul>\n  <li>Стилизуйте ваше меню навигации так чтоб оно соответствовало внешнему виду страницы.</li>\n</ul></div></section><section aria-labelledby="советы_и_подсказки"><h2 id="советы_и_подсказки"><a>Советы и подсказки</a></h2><div class="section-content"><ul>\n  <li>Вам не надо как-либо редактировать HTML в этом упражнении.</li>\n  <li>Вам не надо обязательно делать меню навигации в виде кнопок, но надо чтоб они были более-менее высокими, чтобы они не выглядели глупо на краю страницы; также помните, что вам надо сделать его вертикальным меню навигации.</li>\n</ul></div></section><section aria-labelledby="пример"><h2 id="пример"><a>Пример</a></h2><div class="section-content"><p>Следующий скриншот показывает пример того, как может выглядеть законченный дизайн.</p>\n<p>\n  \n</p></div></section><section aria-labelledby="оценка_или_дальнейшая_помощь"><h2 id="оценка_или_дальнейшая_помощь"><a>Оценка или дальнейшая помощь</a></h2><div class="section-content"><p>Если вы хотите, чтобы вашу работу оценили, или вы застряли и хотите попросить помощи:</p>\n<ol>\n  <li>Разместите свою работу в онлайн редакторе в которым можно поделиться работами в таком как <a class="external" target="_blank">CodePen</a>, <a class="external" target="_blank">jsFiddle</a>, или <a class="external" target="_blank">Glitch</a>.</li>\n  <li>Напишите пост с просьбой оценки и/или помощи на <a class="external" target="_blank">MDN Discourse forum Learning category</a>. Ваш пост должен включать:\n    <ul>\n      <li>Описательный заголовок такой как "Требуется оценка вёрстки домашней страницы общественный школы".</li>\n      <li>Детали о том, что вы уже попытались сделать и что бы вы хотели, чтобы мы сделали, например, если вы застряли и вам нужна помощь, либо вы хотите оценку.</li>\n      <li>Ссылку на онлайн редактор (как упомянуто выше в пункте 1) с примером, который нуждается в оценке или с которым нужна помощь. Это хорошая практика чтобы вникнуть — очень сложно помочь кому-либо с проблемным кодом если вы не видите их код.</li>\n      <li>Ссылку на актуальную задачу или страницу оценки, чтобы мы могли найти вопрос, по которому вам нужна помощь.</li>\n    </ul>\n  </li>\n</ol></div></section>',
					works: [],
				},
				{
					title: 'CSS layout',
					chapter: 2.32,
					content:
						'<header><h1>CSS layout</h1></header><div class="section-content"><p>К текущему моменту мы познакомились с основами CSS. Мы знаем, как оформлять текст, как оформлять и изменять блоки, в которых находится ваш контент. Пришло время узнать, как разместить ваши блоки в нужных местах в зависимости от области просмотра и тому подобного. Мы уже знаем достаточно, чтобы погрузиться в изучение разметки с помощью CSS, в то, как изменять отображение в зависимости от особенностей экрана, как использовать современные методы разметки, такие как Flexbox и CSS grid, и некоторые традиционные методы разметки, которые все ещё применяются.</p></div><section aria-labelledby="необходимые_условия"><h2 id="необходимые_условия"><a>Необходимые условия</a></h2><div class="section-content"><p>Перед изучением этого раздела вы должны:</p>\n<ol>\n  <li>Иметь общее представление об HTML, как указано в разделе <a>Вступление в HTML</a>.</li>\n  <li>Ориентироваться в основах CSS, как указано в разделе <a>Вступление в CSS</a>.</li>\n  <li>Понимать, как <a>стилизовать блочные элементы</a>.</li>\n</ol>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Если вы работаете на компьютере/планшете/других устройствах, где нет возможности создать ваш собственный файл, вы можете попробовать (большую часть) примеры кода в онлайн-программах для написания кода <a class="external" target="_blank">JSBin</a> и <a class="external" target="_blank">Thimble</a>.</p>\n</div></div></section><section aria-labelledby="руководство"><h2 id="руководство"><a>Руководство</a></h2><div class="section-content"><p>Эти разделы содержат инструкции по основным инструментам и методам вёрстки, доступным в CSS. На последнем уроке у вас будет возможность оценить понимание пройденного материала посредством вёрстки веб-страницы.</p>\n<dl>\n  <dt id="введение_в_css_вёрстку"><a>Введение в CSS вёрстку</a></dt>\n  <dd>\n    <p>В этом разделе будут описаны некоторые возможности CSS вёрстки, которых мы уже касались в предыдущих модулях - различные значения <a><code>display</code></a> — и представлены некоторые концепции, которые мы рассмотрим в этом модуле.</p>\n  </dd>\n  <dt id="нормальный_поток"><a>Нормальный поток</a></dt>\n  <dd>\n    <p>Элементы на веб-страницах размещаются в соответствии с нормальным потоком - пока мы не сделаем что-либо, чтобы это изменить. Этот раздел объясняет основы нормального потока как фундамент для изучения влияния на него.</p>\n  </dd>\n  <dt id="flexbox"><a>Flexbox</a></dt>\n  <dd>\n    <p><a class="only-in-en-us" title="Currently only available in English (US)">Flexbox <small>(en-US)<small></small></small></a> - это метод одномерной вёрстки для размещения элементов в строках или столбцах. Элементы растягиваются, чтобы заполнить дополнительное пространство и сжимаются, чтобы поместиться в меньшее пространство. Данный раздел объясняет фундаментальные принципы.</p>\n  </dd>\n  <dt id="grids"><a>Grids</a></dt>\n  <dd>\n    <p>CSS Grid Layout - это двумерная система вёрстки для веб. Она позволяет вам размещать контент в строках и столбцах и имеет множество возможностей, которые упрощают построение сложных макетов. Этот раздел даст вам все, что нужно знать для начала работы с макетом страницы.</p>\n  </dd>\n  <dt id="floats"><a>Floats</a></dt>\n  <dd>\n    <p>Изначально созданное для плавающих изображений внутри текстовых блоков, свойство <a><code>float</code></a> стало одним из наиболее часто используемых инструментов для создания мульти-колоночной вёрстки веб-страниц. С появлением Flexbox и Grid оно вернулось к первоначальному предназначению, как объясняется в этом разделе.</p>\n  </dd>\n  <dt id="позиционирование"><a>Позиционирование</a></dt>\n  <dd>\n    <p>Позиционирование позволяет вам брать элементы из нормального потока и изменять их поведение, например, заставляет находиться друг под другом или всегда оставаться в одном и том же месте внутри окна просмотра браузера. В этом разделе объясняются различные значения <a><code>position</code></a> и способы их применения.</p>\n  </dd>\n  <dt id="мульти-колоночная_вёрстка"><a>Мульти-колоночная вёрстка</a></dt>\n  <dd>\n    <p>Спецификация мульти-колоночной вёрстки даёт вам способ размещения содержимого в столбцах по аналогии с вёрсткой газет. Этот раздел объясняет, как использовать эту возможность.</p>\n  </dd>\n  <dt id="отзывчивый_дизайн"><a>Отзывчивый дизайн</a></dt>\n  <dd>\n    <p>По мере того, как появлялись устройства для выхода в интернет с экранами разных размеров, возникла концепция отзывчивого веб-дизайна (RWD): набор методов, позволяющих веб-страницам изменять свой макет и внешний вид в соответствии с шириной экрана, разрешением и т.д. Это изменило подход к разработке веб-страниц для различных устройств, и в этом руководстве вы познакомитесь с основными приёмами, которые необходимо знать для создания отзывчивого дизайна.</p>\n  </dd>\n  <dt id="введение_в_медиавыражения"><a class="only-in-en-us" title="Currently only available in English (US)">Введение в медиавыражения <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p><strong>CSS Media Query</strong> позволяют писать CSS под разные условия, например "область просмотра шире 480 пикселей". Медиавыражения являются ключевой частью отзывчивого веб-дизайна, поскольку они позволяют создавать различные макеты в зависимости от размера области просмотра. Они также могут использоваться для определения других особенностей среды, в которой работает ваш сайт, например, использует ли пользователь сенсорный экран, а не мышь. В этом руководстве вы сперва познакомитесь с синтаксисом медиавыражений, а после разберёте их использование на интерактивном примере, показывающем, как простой дизайн можно сделать отзывчивым.</p>\n  </dd>\n  <dt id="устаревшие_методы_вёрстки"><a class="only-in-en-us" title="Currently only available in English (US)">Устаревшие методы вёрстки <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Grid-системы - это очень распространённая возможность, используемая в CSS layouts, и до CSS Grid Layout они, как правило, реализовывались с помощью floats или других возможностей вёрстки. Вы представляете свою вёрстку в виде заданного числа столбцов (например, 4 или 6), а затем вы помещаете содержимое в эти воображаемые столбцы. В этом разделе мы рассмотрим, как работают эти старые методы, чтобы вы понимали, как они использовались, если столкнётесь со старыми проектами.</p>\n  </dd>\n  <dt id="поддержка_старыми_браузерами"><a class="only-in-en-us" title="Currently only available in English (US)">Поддержка старыми браузерами <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>В этом модуле мы рекомендуем использовать Flexbox и Grid как основные методы вёрстки для ваших проектов. Однако, ваш сайт могут посещать со старых браузеров или браузеров, которые не поддерживают данные методы. В сети это будет всегда - по мере появления новых возможностей, для различных браузеров будут приоритетны различные вещи. Этот раздел объясняет, как использовать современные веб-технологии без блокировки пользователей со старыми технологиями.</p>\n  </dd>\n  <dt id="фундаментальное_понятие_вёрстки"><a>Фундаментальное понятие вёрстки</a></dt>\n  <dd>\n    <p>Оценка ваших знаний различных методов вёрстки посредством вёрстки веб-страницы.</p>\n  </dd>\n</dl></div></section>',
					works: [],
				},
				{
					title: 'Введение в CSS вёрстку',
					chapter: 2.33,
					content:
						'<header><h1>Введение в CSS вёрстку</h1></header><div class="section-content">\n<p>В этой статье мы рассмотрим некоторые функции макета CSS, которые мы затрагивали в предыдущих статьях, например различные значения свойства <a><code>display</code></a>, и разберём некоторые концепции, которые будут рассмотрены в этой статье.</p>\n\n<p>Методы компоновки страниц CSS позволяют нам использовать элементы, расположенные на веб-странице, и контролировать где они находятся относительно их позиции по умолчанию, других элементов вокруг них, их родителей или главного окна. Методы компоновки страниц, которые мы подробно рассмотрим в этой статье.</p>\n<ul>\n  <li>Нормальный поток</li>\n  <li>Свойство <a><code>display</code></a></li>\n  <li>Flexbox</li>\n  <li>Grid</li>\n  <li>Floats</li>\n  <li>Позиционирование</li>\n  <li>Макет таблицы</li>\n  <li>Многоколоночный макет</li>\n</ul>\n<p>Каждый метод имеет свои преимущества и недостатки и ни одна техника не предназначена для использования в изоляции от других. Разбирая данные методы, вы поймёте, какой из них лучший инструмент разметки для каждой задачи.</p></div><section aria-labelledby="normal_flow"><h2 id="normal_flow"><a>Normal flow</a></h2><div class="section-content"><p>Нормальный поток (Normal flow) это то как ваш браузер отображает по умолчанию, когда вы не меняли расположение элементов на странице. Взглянем на пример:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>I love my cat.</p>\n\n<ul>\n  <li>Buy cat food</li>\n  <li>Exercise</li>\n  <li>Cheer up friend</li>\n</ul>\n\n<p>The end!</p>\n</pre></div>\n<p>По умолчанию ваш браузер выведет этот код следующим образом:</p><div class="code-example" id="sect1"><div class="example-header" id="sect2"></div></div>\n<p>Заметьте, что HTML-элементы здесь отображаются точно в таком порядке, как и в исходном коде — первый параграф, за ним неупорядоченный список, затем второй параграф.</p>\n<p>Элементы, выводящиеся один <em>под</em> другим, называются <em>блочными</em>, в противоположность <em>строчным</em>, которые выводятся один <em>вслед</em> за другим, как отдельные слова в обычном абзаце текста.</p>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Направление, в котором отображается содержимое блока, называется Block Direction. Block Direction вертикально в языках типа Английского, имеющих горизонтальное направление письма. В языках, типа Японского, имеющих вертикальное направление письма, Block Direction горизонтально. Соответствующее Inline Direction отвечает за направление отображения строковых элементов (таких как предложение).</p>\n</div>\n<p>Когда вы используете CSS для создания разметки, вы двигаете элементы относительно их обычного расположения, но для многих элементов на вашей странице их обычное положение - это именно то, что вам подойдёт. Именно поэтому важно начинать вёрстку с создания правильно организованного HTML документа, для того, чтобы базовое расположение элементов впоследствии работало на вас.</p>\n<p>Методы CSS, которыми вы можете управлять разметкой элементов:</p>\n<ul>\n  <li><strong>Свойство <a><code>display</code></a></strong> — Стандартные значения <code>block</code>, <code>inline</code> или <code>inline-block</code> могут изменять поведение элементов в обычном потоке (см.подробнее <a>Types of CSS boxes</a>). Также можно менять сами методы разметки такими значениями свойства <code>display</code>, как <a>CSS Grid</a> или <a>Flexbox</a>.</li>\n  <li><strong>Floats</strong> — Применение значения <a><code>float</code></a> типа <code>left</code> может заставить элемент блочного типа "прилепить" содержимое к одной стороне элемента, как иногда изображения обволакиваются текстом на газетных страницах.</li>\n  <li><strong>Свойство <a><code>position</code></a></strong> — Позволяет точно контролировать положение блоков внутри других блоков. <code>static</code> позиционирование является стандартным, но также можно применять другие значения свойства, например фиксированное в углу экрана.</li>\n  <li><strong>Макет Таблицы</strong> — свойства для разметки таблиц могут быть использованы и для нетабличных элементов, с помощью <code>display: table</code> и соответствующих свойств.</li>\n  <li><strong>Multi-column layout</strong> — <a class="only-in-en-us" title="Currently only available in English (US)">Многоколоночный макет <small>(en-US)<small></small></small></a> поможет расположить содержимое столбцами, как в газетах.</li>\n</ul></div></section><section aria-labelledby="свойство_display"><h2 id="свойство_display"><a>Свойство display</a></h2><div class="section-content"><p>Значения свойства <code>display</code> являются главными методами вёрстки разметки страницы в CSS. Это свойство позволяет нам менять то, как что-то отображается по умолчанию. Каждый элемент по умолчанию имеет свойство <code>display</code>, влияющее на то, как этот элемент отображается. Например, параграфы на английском располагаются один под другим только потому что они имеют по умолчанию свойство <code>display: block</code>. Если же вы создадите ссылку внутри параграфа, эта ссылка будет отображаться в общем потоке с остальным текстом, без переноса на новую строку. Это потому что у элемента <a><code>&lt;a&gt;</code></a> по умолчанию установлено свойство <code>display: inline</code>.</p>\n<p>Вы можете изменить дефолтное поведение display. К примеру, <a><code>&lt;li&gt;</code></a> отображается как <code>display: block</code> по умолчанию, это означает что элементы списка отображаются один за другим в нашем документе.Если мы изменим значение display на <code>inline</code> они будут отображаться друг за другом, как это делают слова в предложении. Тот факт, что вы можете изменить значение display для любого элемента означает, что вы можете выбирать HTML-элементы по их семантическому значению, не беспокоясь о том как они будут выглядеть. То как они выглядят это то, что вы можете поменять.</p>\n<p>В дополнение к возможности менять значение с <code>block</code> на <code>inline</code> и обратно, есть и другие возможности вёрстки с другими значениями <code>display</code>. Однако, в основном все они требуют использования дополнительных свойств. Двумя наиболее важными для задач вёрстки страниц являются <code>display: flex</code> и <code>display: grid</code>.</p></div></section><section aria-labelledby="flexbox"><h2 id="flexbox"><a>Flexbox</a></h2><div class="section-content"><p>Flexbox (сокращение от <a>Flexible Box Layout</a>) это модуль, разработанный для облегчения вёрстки в одном из измерений — как ряд или как колонка. Для использования, установите свойство <code>display: flex</code> для родительского элемента тех элементов, к которым хотите применить этот тип вёрстки; все его прямые потомки станут flex элементами. Рассмотрим это на простом примере.</p>\n<p>Разметка HTML, представленная ниже, состоит из элемента <code>wrapper</code>, включающего в себя три <a><code>&lt;div&gt;</code></a> элемента. По умолчанию все они будут изображаться как блочные, один под другим.</p>\n<p>Но если мы добавим свойство <code>display: flex</code> родительскому элементу, три дочерних сгруппируются в колонки. Всё это потому что они сами становятся элементами <em>flex</em> и наследуют некоторые свойства, установленные контейнеру, в котором они находятся. Они выстраиваются в строку, потому что начальное значение <a><code>flex-direction</code></a> это <code>row</code>. Высота становится равной высоте самого высокого элемента, потому что начальное значение <a><code>align-items</code></a> установлено как <code>stretch</code>. Это значит, элементы вытягиваются по высоте контейнера, который в этом случае сам принимает высоту самого высокого элемента. Все они группируются в начале контейнера, оставляя пустое пространство в конце строки.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup">* {\n  box-sizing: border-box;\n}\n\n.wrapper &gt; div {\n  border-radius: 5px;\n  background-color: rgb(207, 232, 220);\n  padding: 1em;\n}\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.wrapper {\n  display: flex;\n}\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="wrapper">\n  <div class="box1">One</div>\n  <div class="box2">Two</div>\n  <div class="box3">Three</div>\n</div>\n</pre></div><div class="code-example" id="sect4"><div class="example-header" id="sect5"></div></div>\n<p>В дополнение к свойствам, применяемым к контейнеру, существуют свойства, применяемые ко вложенным элементам. Эти свойства помимо всего прочего, могут менять размеры элемента, растягивая его и заставляя занимать всё доступное место.</p>\n<p>В качестве простого примера, добавим свойство <a><code>flex</code></a> ко всем дочерним элементам, со значением <code>1</code>. Это заставит все элементы растянуться и заполнить контейнер, не оставляя свободного места в конце строки. Если освободится дополнительное пространство, элементы растянутся; если доступное место убавится - элементы сожмутся. Также, если вы добавите дополнительный элемент, остальные элементы станут меньше, для того, чтобы все они были одного размера.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup">* {\n  box-sizing: border-box;\n}\n\n.wrapper &gt; div {\n  border-radius: 5px;\n  background-color: rgb(207, 232, 220);\n  padding: 1em;\n}\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.wrapper {\n  display: flex;\n}\n\n.wrapper &gt; div {\n  flex: 1;\n}\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="wrapper">\n  <div class="box1">One</div>\n  <div class="box2">Two</div>\n  <div class="box3">Three</div>\n</div>\n</pre></div><div class="code-example" id="sect6"><div class="example-header" id="sect7"></div></div>\n<div class="notecard note" id="sect8">\n  <p><strong>Примечание:</strong> Это было очень краткое введение в то что возможно во Flexbox, чтобы узнать больше см. нашу статью <a>Flexbox</a>.</p>\n</div></div></section><section aria-labelledby="grid_layout"><h2 id="grid_layout"><a>Grid Layout</a></h2><div class="section-content"><p>В то время как flexbox предназначен для одномерной разметки, Grid Layout предназначен для двумерной — выстраивая предметы в ряды и столбцы.</p>\n<p>Ещё раз, вы можете переключиться на Grid Layout при помощи конкретного значения отображения — <code>display: grid</code>. Пример ниже использует разметку подобную примеру flex, а также мы определяем некоторые дорожки рядов и столбцов в родительском элементе, используя свойства <a><code>grid-template-rows</code></a> и <a><code>grid-template-columns</code></a> соответственно. Мы определили три столбца каждый по <code>1fr</code> и два ряда по <code>100px</code>. Мне не надо вводить какие-либо правила для дочерних элементов; они автоматически помещаются в ячейки, созданные нашей сеткой.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup">* {\n  box-sizing: border-box;\n}\n\n.wrapper &gt; div {\n  border-radius: 5px;\n  background-color: rgb(207, 232, 220);\n  padding: 1em;\n}\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.wrapper {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 100px 100px;\n  grid-gap: 10px;\n}\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="wrapper">\n  <div class="box1">One</div>\n  <div class="box2">Two</div>\n  <div class="box3">Three</div>\n  <div class="box4">Four</div>\n  <div class="box5">Five</div>\n  <div class="box6">Six</div>\n</div>\n</pre></div><div class="code-example" id="sect9"><div class="example-header" id="sect10"></div></div>\n<p>Когда у вас есть сетка (grid), мы можете точно размещать на ней свои элементы, а не полагаться на поведение авто-размещения, отмеченного выше. Ниже во втором примере мы задали ту же сетку, но в этот раз с тремя дочерними элементами. Мы задали начало и конец линии каждого элемента используя свойства <a><code>grid-column</code></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>grid-row</code> <small>(en-US)</small></a>. Это заставляет элементы охватывать несколько дорожек.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup">* {\n  box-sizing: border-box;\n}\n\n.wrapper &gt; div {\n  border-radius: 5px;\n  background-color: rgb(207, 232, 220);\n  padding: 1em;\n}\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.wrapper {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 100px 100px;\n  grid-gap: 10px;\n}\n\n.box1 {\n  grid-column: 2 / 4;\n  grid-row: 1;\n}\n\n.box2 {\n  grid-column: 1;\n  grid-row: 1 / 3;\n}\n\n.box3 {\n  grid-row: 2;\n  grid-column: 3;\n}\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="wrapper">\n  <div class="box1">One</div>\n  <div class="box2">Two</div>\n  <div class="box3">Three</div>\n</div>\n</pre></div><div class="code-example" id="sect11"><div class="example-header" id="sect12"></div></div>\n<div class="notecard note" id="sect13">\n  <p><strong>Примечание:</strong> Эти два примера всего лишь малая часть мощности Grid layout; чтобы узнать больше см. нашу статью <a>Grid Layout</a>.</p>\n</div>\n<p>Остальная часть этого руководства освещает другие методы разметок, которые менее важны для основной структуры разметки вашей страницы, но всё равно могут помочь вам в достижении определённых задач. Понимая природу задачи каждой разметки, вы вскоре обнаружите, что, глядя на конкретный компонент вашего дизайна, часто будет ясно какой тип разметки подходит лучше всего.</p></div></section><section aria-labelledby="floats"><h2 id="floats"><a>Floats</a></h2><div class="section-content"><p>Делая элемент плавающим (float) мы меняем поведение этого элемента и элементов блочного уровня, следующих за ним в нормальном потоке. Элемент перемещается влево или вправо и удаляется из нормального потока (normal flow), а окружающий контент обтекает плавающий элемент.</p>\n<p>Свойство <a><code>float</code></a> имеет четыре возможных значения:</p>\n<ul>\n  <li><code>left</code> — Элемент выравнивается слева и другие элементы обтекают его справа.</li>\n  <li><code>right</code> — Элемент выравнивается справа и другие элементы обтекают его слева.</li>\n  <li><code>none</code> — Не задаёт float совсем. Это значение по умолчанию.</li>\n  <li><code>inherit</code> — Определяет, что значение свойства <code>float</code> должно быть унаследовано от родительского элемента.</li>\n</ul>\n<p>В примере ниже мы задаём элементу <code>&lt;div&gt;</code> float - left и даём <a><code>margin</code></a> с правой стороны чтобы отталкивать текст от этого элемента. Это даёт нам эффект того, что текст оборачивает этот блок и является большей частью того, что вам нужно знать о float, используемых в современном веб-дизайне.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 90%;\n  max-width: 900px;\n  margin: 0 auto;\n}\n\np {\n  line-height: 2;\n  word-spacing: 0.1rem;\n}\n\n.box {\n  background-color: rgb(207, 232, 220);\n  border: 2px solid rgb(79, 185, 227);\n  padding: 10px;\n  border-radius: 5px;\n}\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><h1>Simple float example</h1>\n\n<div class="box">Float</div>\n\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus aliquam\n  dolor, eu lacinia lorem placerat vulputate. Duis felis orci, pulvinar id metus\n  ut, rutrum luctus orci. Cras porttitor imperdiet nunc, at ultricies tellus\n  laoreet sit amet. Sed auctor cursus massa at porta. Integer ligula ipsum,\n  tristique sit amet orci vel, viverra egestas ligula. Curabitur vehicula tellus\n  neque, ac ornare ex malesuada et. In vitae convallis lacus. Aliquam erat\n  volutpat. Suspendisse ac imperdiet turpis. Aenean finibus sollicitudin eros\n  pharetra congue. Duis ornare egestas augue ut luctus. Proin blandit quam nec\n  lacus varius commodo et a urna. Ut id ornare felis, eget fermentum sapien.\n</p>\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.box {\n  float: left;\n  width: 150px;\n  height: 150px;\n  margin-right: 30px;\n}\n</pre></div><div class="code-example" id="sect14"><div class="example-header" id="sect15"></div></div>\n<div class="notecard note" id="sect16">\n  <p><strong>Примечание:</strong> Float полностью объяснён в нашем уроке по свойствам <a>float и clear</a>. До таких методов как Flexbox и Grid Layout, float использовался как метод создания макетов колонок. Вы все ещё можете встретить эти методы в интернете; мы рассмотрим их в уроке по <a class="only-in-en-us" title="Currently only available in English (US)">устаревшим методам разметки <small>(en-US)<small></small></small></a>.</p>\n</div></div></section><section aria-labelledby="методы_позиционирования"><h2 id="методы_позиционирования"><a>Методы позиционирования</a></h2><div class="section-content"><p>Позиционирование позволяет вам перемещать элементы с места, где бы они располагались при нормальном потоке в другую локацию. Позиционирование не является методом создания основной разметки страницы, это больше об управлении и точной настройке положения определённых элементов на странице.</p>\n<p>Однако, существуют полезные методы точной разметки шаблонов, которые полагаются на свойство <a><code>position</code></a>. Понимание позиционирования также способствует пониманию нормального потока и того, что значит вывести элемент из нормального потока.</p>\n<p>Существует пять типов позиционирования о которых вам следует знать:</p>\n<ul>\n  <li><strong>Static positioning (статическое позиционирование)</strong> — умолчание, которое получают все элементы — это всё лишь значит "поместить элемент в его нормальную позицию в разметке документа — тут нет ничего особенного на что посмотреть".</li>\n  <li><strong>Relative positioning (относительное позиционирование)</strong> позволяет вам менять положение элемента на странице, перемещая его относительно его положения в нормальном потоке — в том числе заставляя его перекрывать другие элементы на странице.</li>\n  <li><strong>Absolute positioning (абсолютное позиционирование)</strong> полностью перемещает элемент из нормального потока разметки страницы так будто он находится на своём собственном отдельном слое. Оттуда вы можете исправлять его положение относительно краёв <code>&lt;html&gt;</code> элемента страницы (или его ближайшего позиционированного элемента предка). Это является полезным при создании сложных эффектов разметки такие как вкладки, в которых различные панели содержимого располагаются друг над другом и отображаются и/или скрываются по желанию или информационные панели, которые располагаются на экране по умолчанию, но могут скользить по экрану используя кнопки управления.</li>\n  <li><strong>Fixed positioning (фиксированное позиционирование)</strong> очень похоже на абсолютное за исключением того, что он изменяет положение относительно окна просмотра браузера, а не другого элемента. Это полезно при создании эффектов таких как постоянное меню навигации, которое всегда остаётся в одном и том же месте на экране, в то время как другой контент прокручивается.</li>\n  <li><strong>Sticky positioning (липкое позиционирование)</strong> это новый метод позиционирования, который заставляет элемент вести себя как <code>position: static</code> пока не достигнет определённой линии окна просмотра и с этого момента будет вести себя как <code>position: fixed</code>.</li>\n</ul></div></section><section aria-labelledby="пример_простого_позиционирования"><h3 id="пример_простого_позиционирования"><a>Пример простого позиционирования</a></h3><div class="section-content"><p>Для ознакомления с этими методами вёрстки, мы покажем вам пару быстрых примеров. Наши примеры будут иметь одинаковый HTML, который выглядит следующим образом:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><h1>Positioning</h1>\n\n<p>I am a basic block level element.</p>\n<p class="positioned">I am a basic block level element.</p>\n<p>I am a basic block level element.</p>\n</pre></div>\n<p>Этот HTML по умолчанию будет стилизован, используя следующий CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">body {\n  width: 500px;\n  margin: 0 auto;\n}\n\np {\n  background-color: rgb(207, 232, 220);\n  border: 2px solid rgb(79, 185, 227);\n  padding: 10px;\n  margin: 10px;\n  border-radius: 5px;\n}\n</pre></div>\n<p>Результат выглядит следующим образом:</p><div class="code-example" id="sect17"><div class="example-header" id="sect18"></div></div></div></section><section aria-labelledby="relative_positioning"><h3 id="relative_positioning"><a>Relative positioning</a></h3><div class="section-content"><p>Относительное (Relative) позиционирование позволяет вам смещать элемент относительно положения, которое он бы имел по умолчанию в нормальном потоке. Это значит, что вы можете выполнить такую задачу как перемещение иконки немного вниз, так чтобы он был на одной линии с текстовой меткой. Чтобы сделать это, мы можем добавить следующее правило для добавления относительного позиционирования.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.positioned {\n  position: relative;\n  top: 30px;\n  left: 30px;\n}\n</pre></div>\n<p>Здесь мы даём нашему среднему параграфу <a><code>position</code></a> со значением <code>relative</code> — сам по себе он ничего не делает, поэтому мы также добавляем свойства <a><code>top</code></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>left</code> <small>(en-US)</small></a>. Они служат для перемещения задействованного элемента вниз и вправо — что может выглядеть как противоположность тому, чего вы ожидаете, но вам надо думать об этом так будто элемент отталкивается от левого или верхнего края, и в результате он перемещается вправо и вниз.</p>\n<p>Добавление этого кода даст следующий результат:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Relative positioning</h1>\n\n<p>I am a basic block level element.</p>\n<p class="positioned">This is my relatively positioned element.</p>\n<p>I am a basic block level element.</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 500px;\n  margin: 0 auto;\n}\n\np {\n  background-color: rgb(207, 232, 220);\n  border: 2px solid rgb(79, 185, 227);\n  padding: 10px;\n  margin: 10px;\n  border-radius: 5px;\n}\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.positioned {\n  position: relative;\n  background: rgba(255, 84, 104, 0.3);\n  border: 2px solid rgb(255, 84, 104);\n  top: 30px;\n  left: 30px;\n}\n</pre></div><div class="code-example" id="sect19"><div class="example-header" id="sect20"></div></div></div></section><section aria-labelledby="absolute_positioning"><h3 id="absolute_positioning"><a>Absolute positioning</a></h3><div class="section-content"><p>Абсолютное (Absolute) позиционирование используется чтобы полностью удалить элемент из нормального потока и разместить его, используя смещение от краёв содержащего блока.</p>\n<p>Возвращаясь к нашему примеру без позиционирования, мы можем добавить следующее CSS-правило, чтобы реализовать абсолютное позиционирование:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.positioned {\n  position: absolute;\n  top: 30px;\n  left: 30px;\n}\n</pre></div>\n<p>Здесь мы даём нашему среднему параграфу <a><code>position</code></a> со значением <code>absolute</code>, и все те же свойства <a><code>top</code></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>left</code> <small>(en-US)</small></a> как ранее. Однако, добавление этого кода даст следующий результат:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Absolute positioning</h1>\n\n<p>I am a basic block level element.</p>\n<p class="positioned">This is my absolutely positioned element.</p>\n<p>I am a basic block level element.</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 500px;\n  margin: 0 auto;\n}\n\np {\n  background-color: rgb(207, 232, 220);\n  border: 2px solid rgb(79, 185, 227);\n  padding: 10px;\n  margin: 10px;\n  border-radius: 5px;\n}\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.positioned {\n  position: absolute;\n  background: rgba(255, 84, 104, 0.3);\n  border: 2px solid rgb(255, 84, 104);\n  top: 30px;\n  left: 30px;\n}\n</pre></div><div class="code-example" id="sect21"><div class="example-header" id="sect22"></div></div>\n<p>Это совсем другое! Позиционированный элемент теперь совершенно отделен от разметки остальной страницы и располагается поверх него. Другие два параграфа теперь располагаются вместе так будто бы их позиционированный брат не существует. Свойства <a><code>top</code></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>left</code> <small>(en-US)</small></a> имеют иной эффект на абсолютно позиционированные элементы, чем на относительно позиционированные элементы. В данном случае смещения были рассчитаны сверху и слева от страницы. Возможно изменить родительский элемент так что он становится контейнером, но мы рассмотрим это в уроке по <a>позиционированию</a>.</p></div></section><section aria-labelledby="fixed_positioning"><h3 id="fixed_positioning"><a>Fixed positioning</a></h3><div class="section-content"><p>Фиксированное (Fixed) позиционирование удаляет наш элемент из потока документа так же, как и абсолютное позиционирование. Однако, вместо смещения применяемого относительно контейнера, оно применяется относительно окна просмотра. Поскольку элемент остаётся зафиксированным относительно окна просмотра, мы можем создавать такие эффекты как меню, которое остаётся зафиксированным пока страница прокручивается под ним.</p>\n<p>Для этого примера наш HTML это три параграфа текста для того, чтобы мы могли прокручивать страницу и блок, которому мы дадим <code>position: fixed</code>.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><h1>Fixed positioning</h1>\n\n<div class="positioned">Fixed</div>\n\n<p>Paragraph 1.</p>\n<p>Paragraph 2.</p>\n<p>Paragraph 3.</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Fixed positioning</h1>\n\n<div class="positioned">Fixed</div>\n\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus aliquam\n  dolor, eu lacinia lorem placerat vulputate. Duis felis orci, pulvinar id metus\n  ut, rutrum luctus orci. Cras porttitor imperdiet nunc, at ultricies tellus\n  laoreet sit amet. Sed auctor cursus massa at porta. Integer ligula ipsum,\n  tristique sit amet orci vel, viverra egestas ligula. Curabitur vehicula tellus\n  neque, ac ornare ex malesuada et. In vitae convallis lacus. Aliquam erat\n  volutpat. Suspendisse ac imperdiet turpis. Aenean finibus sollicitudin eros\n  pharetra congue. Duis ornare egestas augue ut luctus. Proin blandit quam nec\n  lacus varius commodo et a urna. Ut id ornare felis, eget fermentum sapien.\n</p>\n\n<p>\n  Nam vulputate diam nec tempor bibendum. Donec luctus augue eget malesuada\n  ultrices. Phasellus turpis est, posuere sit amet dapibus ut, facilisis sed\n  est. Nam id risus quis ante semper consectetur eget aliquam lorem. Vivamus\n  tristique elit dolor, sed pretium metus suscipit vel. Mauris ultricies lectus\n  sed lobortis finibus. Vivamus eu urna eget velit cursus viverra quis\n  vestibulum sem. Aliquam tincidunt eget purus in interdum. Cum sociis natoque\n  penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n</p>\n\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus aliquam\n  dolor, eu lacinia lorem placerat vulputate. Duis felis orci, pulvinar id metus\n  ut, rutrum luctus orci. Cras porttitor imperdiet nunc, at ultricies tellus\n  laoreet sit amet. Sed auctor cursus massa at porta. Integer ligula ipsum,\n  tristique sit amet orci vel, viverra egestas ligula. Curabitur vehicula tellus\n  neque, ac ornare ex malesuada et. In vitae convallis lacus. Aliquam erat\n  volutpat. Suspendisse ac imperdiet turpis. Aenean finibus sollicitudin eros\n  pharetra congue. Duis ornare egestas augue ut luctus. Proin blandit quam nec\n  lacus varius commodo et a urna. Ut id ornare felis, eget fermentum sapien.\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 500px;\n  margin: 0 auto;\n}\n\n.positioned {\n  background: rgba(255, 84, 104, 0.3);\n  border: 2px solid rgb(255, 84, 104);\n  padding: 10px;\n  margin: 10px;\n  border-radius: 5px;\n}\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.positioned {\n  position: fixed;\n  top: 30px;\n  left: 30px;\n}\n</pre></div><div class="code-example" id="sect23"><div class="example-header" id="sect24"></div></div></div></section><section aria-labelledby="sticky_positioning"><h3 id="sticky_positioning"><a>Sticky positioning</a></h3><div class="section-content"><p>Липкое (Sticky) позиционирование — это последний тип позиционирования которой мы имеем в нашем распоряжении. Это микс дефолтного статического позиционирования с фиксированным позиционированием. когда элемент имеет <code>position: sticky</code> он будет прокручиваться в нормальном потоке пока не достигнет границы окна просмотра которую мы задали. С этого момента он (элемент) "прилипает", как если бы был применён <code>position: fixed</code>.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Sticky positioning</h1>\n\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus aliquam\n  dolor, eu lacinia lorem placerat vulputate. Duis felis orci, pulvinar id metus\n  ut, rutrum luctus orci. Cras porttitor imperdiet nunc, at ultricies tellus\n  laoreet sit amet. Sed auctor cursus massa at porta. Integer ligula ipsum,\n  tristique sit amet orci vel, viverra egestas ligula. Curabitur vehicula tellus\n  neque, ac ornare ex malesuada et. In vitae convallis lacus. Aliquam erat\n  volutpat. Suspendisse ac imperdiet turpis. Aenean finibus sollicitudin eros\n  pharetra congue. Duis ornare egestas augue ut luctus. Proin blandit quam nec\n  lacus varius commodo et a urna. Ut id ornare felis, eget fermentum sapien.\n</p>\n\n<div class="positioned">Sticky</div>\n\n<p>\n  Nam vulputate diam nec tempor bibendum. Donec luctus augue eget malesuada\n  ultrices. Phasellus turpis est, posuere sit amet dapibus ut, facilisis sed\n  est. Nam id risus quis ante semper consectetur eget aliquam lorem. Vivamus\n  tristique elit dolor, sed pretium metus suscipit vel. Mauris ultricies lectus\n  sed lobortis finibus. Vivamus eu urna eget velit cursus viverra quis\n  vestibulum sem. Aliquam tincidunt eget purus in interdum. Cum sociis natoque\n  penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n</p>\n\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus aliquam\n  dolor, eu lacinia lorem placerat vulputate. Duis felis orci, pulvinar id metus\n  ut, rutrum luctus orci. Cras porttitor imperdiet nunc, at ultricies tellus\n  laoreet sit amet. Sed auctor cursus massa at porta. Integer ligula ipsum,\n  tristique sit amet orci vel, viverra egestas ligula. Curabitur vehicula tellus\n  neque, ac ornare ex malesuada et. In vitae convallis lacus. Aliquam erat\n  volutpat. Suspendisse ac imperdiet turpis. Aenean finibus sollicitudin eros\n  pharetra congue. Duis ornare egestas augue ut luctus. Proin blandit quam nec\n  lacus varius commodo et a urna. Ut id ornare felis, eget fermentum sapien.\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 500px;\n  margin: 0 auto;\n}\n\n.positioned {\n  background: rgba(255, 84, 104, 0.3);\n  border: 2px solid rgb(255, 84, 104);\n  padding: 10px;\n  margin: 10px;\n  border-radius: 5px;\n}\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.positioned {\n  position: sticky;\n  top: 30px;\n  left: 30px;\n}\n</pre></div><div class="code-example" id="sect25"><div class="example-header" id="sect26"></div></div>\n<div class="notecard note" id="sect27">\n  <p><strong>Примечание:</strong> чтобы узнать больше о позиционировании, см. нашу статью <a>Позиционирование.</a></p>\n</div></div></section><section aria-labelledby="макет_таблицы"><h2 id="макет_таблицы"><a>Макет таблицы</a></h2><div class="section-content"><p>HTML таблицы хороши для отображения табличных данных, но много лет назад — до того, как даже базовый CSS надёжно поддерживался в браузерах — веб-разработчики также использовали таблицы для разметки всей веб-страницы — размещая свои заголовки, нижние колонтитулы, различные колонки и т.д. в разных строках и столбцах таблиц. Это работало в то время, но оно имеет много проблем — разметка таблиц не гибкая, очень тяжёлая в вёрстке, сложна в отладке, и семантически не верная. (например, пользователи скринридеров имеют проблемы с навигацией в табличном макете).</p>\n<p>То, как таблица выглядит на веб-странице при использовании разметки таблицы, обусловлено набором свойств CSS, которые определяют макет таблицы. Эти свойства могут использоваться для размещения элементов, которые не являются таблицами, использование, которое иногда описывается как «использование CSS таблиц».</p>\n<p>Пример ниже показывает одно такое использование; использование CSS таблиц для вёрстки должно считаться устаревшим методом на данный момент, для тех ситуаций, когда у вас старые браузеры без поддержки Flexbox или Grid.</p>\n<p>Давайте взглянем на пример. Во-первых, немного простой разметки, которая создаёт HTML форму. Каждый input элемент имеет label, и мы также заключили описание в параграф. каждая пара label/input обёрнута в <a><code>&lt;div&gt;</code></a>, для целей вёрстки.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><form>\n  <p>First of all, tell us your name and age.</p>\n  <div>\n    <label for="fname">First name:</label>\n    <input type="text" id="fname">\n  </div>\n  <div>\n    <label for="lname">Last name:</label>\n    <input type="text" id="lname">\n  </div>\n  <div>\n    <label for="age">Age:</label>\n    <input type="text" id="age">\n  </div>\n</form>\n</pre></div>\n<p>А теперь CSS для нашего примера. Большая часть CSS довольно обычна, за исключением использования свойства <a><code>display</code></a>. <a><code>&lt;form&gt;</code></a>-е, <a><code>&lt;div&gt;</code></a>-ам, а также <a><code>&lt;label&gt;</code></a>-ам и <a><code>&lt;input&gt;</code></a>-ам было сказано отображать как таблица, табличные строки и табличные ячейки соответственно — в принципе, они будут вести себя как разметка HTML таблицы, заставляя label-ы and input-ы красиво выравниваться по умолчанию. Все что мы должны будем сделать это добавить немного размеров, margin и т.д., чтобы все выглядело красивей, и на этом мы закончили.</p>\n<p>Вы заметите, что параграфу с описанием дано <code>display: table-caption;</code> — что заставляет его вести себя как табличный <a><code>&lt;caption&gt;</code></a> — а <code>caption-side: bottom;</code> для того чтобы указать описанию располагаться снизу таблицы в целях дизайна, не смотря на то что разметка находится до <code>&lt;input&gt;</code> элементов в источнике. Это обеспечивает гибкостью.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">html {\n  font-family: sans-serif;\n}\n\nform {\n  display: table;\n  margin: 0 auto;\n}\n\nform div {\n  display: table-row;\n}\n\nform label,\nform input {\n  display: table-cell;\n  margin-bottom: 10px;\n}\n\nform label {\n  width: 200px;\n  padding-right: 5%;\n  text-align: right;\n}\n\nform input {\n  width: 300px;\n}\n\nform p {\n  display: table-caption;\n  caption-side: bottom;\n  width: 300px;\n  color: #999;\n  font-style: italic;\n}\n</pre></div>\n<p>Это даёт нам следующий результат:</p><div class="code-example" id="sect28"><div class="example-header" id="sect29"></div></div>\n<p>Также вы можете посмотреть этот живой пример на <a class="external" target="_blank">css-tables-example.html</a> (смотрите также <a class="external" target="_blank">исходный код</a>.)</p></div></section><section aria-labelledby="многоколоночный_макет"><h2 id="многоколоночный_макет"><a>Многоколоночный макет</a></h2><div class="section-content"><p>Модуль многоколоночного макета (multi-column layout) даёт нам способ располагать контент в столбцах, подобно тому, как текст располагается в газете. Хоть и чтение столбцов вверх и вниз менее полезно в контексте веба, так как вы не хотите заставлять пользователей прокручивать вверх и вниз, размещение контента по столбцам может быть полезной техникой.</p>\n<p>Чтобы превратить блок в многоколоночный контейнер мы используем свойство <a><code>column-count</code></a>, которое говорит браузеру сколько колонок мы хотим иметь, либо свойство <a class="only-in-en-us" title="Currently only available in English (US)"><code>column-width</code> <small>(en-US)</small></a>, которое говорит браузеру заполнить контейнер как можно большим количеством столбцов, по крайней мере, такой ширины.</p>\n<p>В примере ниже мы начинаем с HTML блоком, который содержится в элементе <code>&lt;div&gt;</code> с классом <code>container</code>.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="container">\n  <h1>Multi-column layout</h1>\n\n  <p>Paragraph 1.</p>\n  <p>Paragraph 2.</p>\n</div>\n</pre></div>\n<p>Мы используем <code>column-width</code> 200 px для этого контейнера, заставляя браузер создавать столько 200 пиксельных столбцов, сколько уместится в этом контейнере и затем разделить оставшееся пространство между созданными столбцами.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><div class="container">\n  <h1>Multi-column Layout</h1>\n\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n    aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci,\n    pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc, at\n    ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta. Integer\n    ligula ipsum, tristique sit amet orci vel, viverra egestas ligula. Curabitur\n    vehicula tellus neque, ac ornare ex malesuada et. In vitae convallis lacus.\n    Aliquam erat volutpat. Suspendisse ac imperdiet turpis. Aenean finibus\n    sollicitudin eros pharetra congue. Duis ornare egestas augue ut luctus.\n    Proin blandit quam nec lacus varius commodo et a urna. Ut id ornare felis,\n    eget fermentum sapien.\n  </p>\n\n  <p>\n    Nam vulputate diam nec tempor bibendum. Donec luctus augue eget malesuada\n    ultrices. Phasellus turpis est, posuere sit amet dapibus ut, facilisis sed\n    est. Nam id risus quis ante semper consectetur eget aliquam lorem. Vivamus\n    tristique elit dolor, sed pretium metus suscipit vel. Mauris ultricies\n    lectus sed lobortis finibus. Vivamus eu urna eget velit cursus viverra quis\n    vestibulum sem. Aliquam tincidunt eget purus in interdum. Cum sociis natoque\n    penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n  </p>\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  max-width: 800px;\n  margin: 0 auto;\n}\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.container {\n  column-width: 200px;\n}\n</pre></div><div class="code-example" id="sect30"><div class="example-header" id="sect31"></div></div></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Эта статья предоставила короткое обобщение всех методов макетов о которых вам следует знать. Читайте далее для получения дополнительной информации по каждому методу!</p></div></section>',
					works: [],
				},
				{
					title: 'Базовый поток',
					chapter: 2.34,
					content:
						'<header><h1>Базовый поток</h1></header><div class="section-content">\n<p>Эта статья объясняет нормальный/базовый поток (normal flow) или способ, которым элементы страницы располагаются на веб-странице по умолчанию.</p>\n\n<p>Как говорилось ранее, элементы на веб-странице располагаются в нормальном потоке, если вы не применили к ним ни единого CSS для изменения их поведения. И, как мы уже выяснили, вы можете изменить поведение элементов либо путём изменения их положения в этом нормальном потоке, либо удалением этих элементов из этого потока. Хорошо структурированный документ, читабельный в нормальном потоке является лучшим путём начала любой веб-страницы. Это гарантирует, что ваш контент будет читабельным, даже если пользователи используют очень ограниченный браузер или устройство для чтения, которое считывает содержимое страницы. Кроме того, поскольку нормальный поток предназначен для создания читабельного документа, имейте в виду, что вы не сражаетесь с первоначальным видом документа, а работаете с ним.</p>\n<p>Прежде чем углубиться в разные способы компоновки, стоит пересмотреть некоторые из вещей, которые вы изучили в предыдущих модулях в отношении нормального потока документов.</p></div><section aria-labelledby="как_элементы_располагаются_по_умолчанию"><h2 id="как_элементы_располагаются_по_умолчанию"><a>Как элементы располагаются по умолчанию?</a></h2><div class="section-content"><p>Прежде всего, индивидуальные боксы элементов располагаются в зависимости от содержимого элементов, затем добавляя какой-нибудь padding, border и margin вокруг них - это опять-таки боксовая модель, которую мы рассмотрели ранее.</p>\n<p>По умолчанию содержимое элемента уровня блока составляет 100% от ширины его родительского элемента и столь же высок, как и его содержимое. Строчные элементы высоки и широки, как их содержимое. Вы не можете установить ширину или высоту на строчные элементы — они просто находятся внутри содержимого элементов блочного уровня. Если вы хотите контролировать размер строчного элемента вам нужно настроить его так, чтобы он себя вёл как элемент блочного уровня при помощи <code>display: block;</code> (или даже, <code>display: inline-block;</code>, который смешивает характеристики обоих.).</p>\n<p>Это объясняет отдельные элементы, но как насчёт того, как элементы взаимодействуют друг с другом? Нормальный поток макета (упомянутый в статье введения макета) - это система, посредством которой элементы размещаются внутри окна просмотра браузера. По умолчанию элементы уровня блока выкладываются в направлении, что блокирует отображение в режиме записи документа - каждый из них будет отображаться в новой строке ниже последней строки, и они будут разделены любым полем, установленным на них. Поэтому на английском языке или на любом другом, в котором режим писания горизонтальный, сверху вниз, элементы уровня блока располагаются вертикально.</p>\n<p>Строчные элементы ведут себя по-другому — они не появляются на новых строках; они располагаются на той же строке, что и другие и любой смежной или завёрнутый текст располагается на всю ширину внутри элемента уровня родительского блока, до тех пор, пока не закончится пространство. Если пространства нет, тогда текст и/или элементы перейдут на новую строку (не с абзаца).</p>\n<p>Если два смежных элемента имеют заданные для них поля/внешние отступы (margin) и эти поля соприкасаются друг с другом, большее из них остаётся, а меньшее исчезает — это называется схлопывание полей (margin collapsing), и мы рассматривали это ранее.</p>\n<p>Давайте посмотрим на пример, который объясняет всё из того, что мы рассмотрели в данной статье:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><h1>Базовый поток документа</h1>\n\n<p>\n  Я базовый элемент уровня блока. Мои соседние блочные элементы находятся на\n  новой строке подо мной.\n</p>\n\n<p>\n  По умолчанию мы охватываем 100% ширины нашего родительского элемента, и мы так\n  же высоки, как и наш child-контент. Наша общая ширина и высота - это наш\n  контент + внутренний отступ (padding) + ширина / высота границы.\n</p>\n\n<p>\n  Мы отделены нашими полями. Из-за схлопывания полей мы отделены шириной одного\n  из наших полей, а не обоих\n</p>\n\n<p>\n  Строчные элементы <span>такие как этот</span> и <span>этот</span> находятся на\n  одной линии с другими, и смежным текстом, если есть пространство. Строчные\n  элементы, что не влезают\n  <span>переходят на новую строку если это возможно (как этот текст)</span>если\n  же это невозможно, они переходят на новую строку, как это изображение:\n  <img src="long.jpg">\n</p>\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">body {\n  width: 500px;\n  margin: 0 auto;\n}\n\np {\n  background: rgba(255, 84, 104, 0.3);\n  border: 2px solid rgb(255, 84, 104);\n  padding: 10px;\n  margin: 10px;\n}\n\nspan {\n  background: white;\n  border: 1px solid black;\n}\n</pre></div><div class="code-example" id="sect1"><div class="example-header" id="sect2"></div></div></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Теперь, когда вы поняли нормальный поток и как браузер выкладывает содержимое по умолчанию, двигаемся дальше, чтобы понять как это изменить для создания макета согласно вашему дизайну.</p></div></section>',
					works: [],
				},
				{
					title: 'Flexbox',
					chapter: 2.35,
					content:
						'<header><h1>Flexbox</h1></header><div class="section-content">\n<p>Это новая технология, которая уже имеет достаточно широкую поддержку браузеров. Flexbox предоставляет инструменты для быстрого создания сложных, гибких макетов, и функции, которые были сложны в традиционных методах CSS. В этой статье объясняются все основы данной технологии.</p>\n</div><section aria-labelledby="почему_flexbox"><h2 id="почему_flexbox"><a>Почему Flexbox?</a></h2><div class="section-content"><p>Долгое время единственными надёжными инструментами CSS вёрстки были такие способы как Float (обтекание) и позиционирование.</p>\n<p>С их помощью сложно или невозможно достичь следующих простых требований к макету:</p>\n<ul>\n  <li>Вертикального выравнивания блока внутри родителя.</li>\n  <li>Оформления всех детей контейнера так, чтобы они распределили между собой доступную ширину/высоту, независимо от того, сколько ширины/высоты доступно.</li>\n  <li>Сделать все колонки в макете одинаковой высоты, даже если наполнение в них различно.</li>\n</ul>\n<p>Как вы увидите в последующих разделах, flexbox значительно облегчает работу с макетами. Погружаемся!</p></div></section><section aria-labelledby="разберём_простой_пример"><h2 id="разберём_простой_пример"><a>Разберём простой пример</a></h2><div class="section-content"><p>В этой статье вы проработаете серию упражнений, которые помогут понять, как работает flexbox. Чтобы начать, скачайте на компьютер стартовый файл — <a class="external" target="_blank">flexbox0.html</a> с нашего Github репозитория — загрузите его в современном браузере (Firefox или Chrome), а также в любимом редакторе кода. Также вы можете <a class="external" target="_blank">посмотреть его вживую</a>.</p>\n<p>Вы увидите элемент <a><code>&lt;header&gt;</code></a> с заголовком верхнего уровня внутри, и элемент <a><code>&lt;section&gt;</code></a> содержащий три элемента <a><code>&lt;article&gt;</code></a>. Мы будем использовать их для создания стандартного трёхколоночного макета.</p>\n<p>\n  \n</p></div></section><section aria-labelledby="определяем_какие_элементы_разместить_в_виде_flex_блоков"><h2 id="определяем_какие_элементы_разместить_в_виде_flex_блоков"><a>Определяем, какие элементы разместить в виде flex блоков</a></h2><div class="section-content"><p>Для начала нам нужно выбрать, какие элементы следует выкладывать в виде flex блоков. Для этого мы устанавливаем специальное значение <a><code>display</code></a> в родительском элементе тех элементов, которые вы хотите оформить. В нашем случае мы хотим расположить элементы <a><code>&lt;article&gt;</code></a>, поэтому мы устанавливаем это значение на <a><code>&lt;section&gt;</code></a> (который становится flex контейнером):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">section {\n  display: flex;\n}\n</pre></div>\n<p>В результате у нас получится вот так:</p>\n<p>\n  \n</p>\n<p>Так, всего одно объявление делает всё, что нам нужно — здорово, правда? Мы получили 3-х колоночный макет с колонками равных размеров по ширине и высоте. Это связано с тем, что значения по умолчанию, заданные для flex элементов (дочерние элементы flex контейнера), настроены для решения основных задач. Подробнее об этом позже.</p>\n<p><strong>Примечание</strong>: вы также можете установить значение <a><code>display</code></a> <code>inline-flex</code>, если хотите расставить inline элементы как flex блоки.</p></div></section><section aria-labelledby="внутри_flex_модели"><h2 id="внутри_flex_модели"><a>Внутри flex модели</a></h2><div class="section-content"><p>Когда элементы выложены как flex блоки, они располагаются вдоль двух осей:</p>\n<p>\n  \n</p>\n<ul>\n  <li><strong>Главная ось (main axis)</strong> проходит в том направлении, вдоль которого расположены Flex элементы (например, в строку слева направо или вдоль колонок вниз.) Начало и конец этой оси называются <strong>main start</strong> и <strong>main end</strong>.</li>\n  <li><strong>Поперечная ось (cross axis)</strong> проходит перпендикулярно Flex элементам. Начало и конец этой оси называются <strong>cross start</strong> and <strong>cross end</strong>.</li>\n  <li>Родительский элемент, на который назначено свойство <code>display: flex</code> (<a><code>&lt;section&gt;</code></a> в нашем примере) называется <strong>flex container</strong>.</li>\n  <li>Элементы, размещённые в нём как Flex блоки называются <strong>flex items</strong> (в нашем примере это <a><code>&lt;article&gt;</code></a> ).</li>\n</ul>\n<p>Запомните эти термины, они пригодятся вам в последующих разделах.</p></div></section><section aria-labelledby="столбцы_или_строки"><h2 id="столбцы_или_строки"><a>Столбцы или строки?</a></h2><div class="section-content"><p>В Flexbox есть свойство под названием <a><code>flex-direction</code></a>, которое определяет направление главной оси (в каком направлении располагаются flexbox-дочерние элементы) — по умолчанию ему присваивается значение <code>row</code>, т.е. располагать дочерние элементы в ряд слева направо (для большинства языков) или справа налево (для арабских языков).</p>\n<p>Попробуйте добавить следующую строчку в ваш файл:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">flex-direction: column;\n</pre></div>\n<p>Вы увидите, что элементы расположились в виде столбцов, также как было до того, как мы добавили CSS код. Прежде чем продолжать, удалите эту строчку из примера.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> вы можете также располагать flex элементы в обратном направлении, используя значения <code>row-reverse</code> и <code>column-reverse</code>. Попробуйте их тоже!</p>\n</div></div></section><section aria-labelledby="перенос_строк"><h2 id="перенос_строк"><a>Перенос строк</a></h2><div class="section-content"><p>Проблема может быть в том, что, если у вас фиксированная ширина или высота макета, ваши flexbox элементы переполнят контейнер и нарушат макет. Посмотрите на этот пример: <a class="external" target="_blank">flexbox-wrap0.html</a> и <a class="external" target="_blank">посмотрите его вживую</a> (сохраните его себе на компьютер, если хотите изучить этот пример):</p>\n<p>\n  \n</p>\n<p>Мы видим, что дочерние элементы выбиваются из своего родителя-контейнера. Один из способов как это исправить — добавить следующее свойство в CSS-правило для <a><code>&lt;section&gt;</code></a>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">flex-wrap: wrap;\n</pre></div>\n<p>Также добавьте следующее свойство в CSS-правило для <a class="page-not-created" title="Документация об этом ещё не написана. Пожалуйста, поспособствуйте её написанию!"><code>&lt;arcticle&gt;</code></a>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">flex: 200px;\n</pre></div>\n<p>Попробуйте, и вы увидите, что так макет стал выглядеть гораздо лучше:</p>\n<p>\n  \n</p>\n<p>Теперь у нас в макете несколько рядов— все дети-блоки, которые не помещаются, переносятся на следующую строку, чтобы не было переполнения. Свойство <code>flex: 200px</code>, установленное на статьях, означает, что каждый блок должен быть минимум 200 пикселей в ширину. Мы обсудим это свойство более подробно позже. Вы также можете заметить, что несколько дочерних блоков в последней строке стали более широкими, так что вся строка стала заполнена.</p>\n<p>Но мы можем пойти дальше. Прежде всего, попробуйте изменить значение свойства <a><code>flex-direction</code></a> на <code>row-reverse</code> — теперь у вас также макет в несколько строк, но он начинается из противоположного угла окна браузера и теперь выстраивается в обратном порядке.</p></div></section><section aria-labelledby="flex-flow_сокращение"><h2 id="flex-flow_сокращение"><a>flex-flow сокращение</a></h2><div class="section-content"><p>На этом этапе нужно заметить, что существует сокращение для свойств <a><code>flex-direction</code></a> и <a><code>flex-wrap</code></a> — <a><code>flex-flow</code></a>. Например, вы можете заменить</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">flex-direction: row;\nflex-wrap: wrap;\n</pre></div>\n<p>на</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">flex-flow: row wrap;\n</pre></div></div></section><section aria-labelledby="гибкое_изменение_размеров_flex_элементов"><h2 id="гибкое_изменение_размеров_flex_элементов"><a>Гибкое изменение размеров flex элементов</a></h2><div class="section-content"><p>Теперь давайте вернёмся к нашему первому примеру и посмотрим, как мы можем контролировать, в каких пропорциях flex элементы будут занимать место. Включите свою копию файла <a class="external" target="_blank">flexbox0.html</a>, или скачайте <a class="external" target="_blank">flexbox1.html</a> (<a class="external" target="_blank">просмотр</a>).</p>\n<p>Прежде всего, добавим следующее правило в конец вашего CSS кода:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">article {\n  flex: 1;\n}\n</pre></div>\n<p>Это безразмерное значение пропорции, которое указывает, сколько свободного пространства на главной оси (main axis) каждый flex элемент сможет занять. В этом случае, мы даём каждому элементу <a><code>&lt;article&gt;</code></a> значение 1, а это значит, что они будут занимать равное количество свободного места в макете, которое осталось после установки свойств padding и margin.</p>\n<p>Теперь добавьте следующее правило в строку после предыдущего:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">article:nth-of-type(3) {\n  flex: 2;\n}\n</pre></div>\n<p>Обновив страницу, вы увидите, что третий элемент <a><code>&lt;article&gt;</code></a> занимает в два раза больше доступной ширины, чем два других — итого теперь доступно 4 единицы пропорции. Первые два flex элемента имеют по одной единице, поэтому берут 1/4 пространства каждый. А у третьего 2 единицы, так что он берёт 2/4 свободного места (или 1/2).</p>\n<p>Вы также можете указать минимальный размер внутри значения flex. Попробуйте изменить существующие правила, добавив размеры:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">article {\n  flex: 1 200px;\n}\n\narticle:nth-of-type(3) {\n  flex: 2 200px;\n}\n</pre></div>\n<p>Это просто означает, что каждому flex элементу сначала будет дано 200px от свободного места. Потом оставшееся место будет поделено в соответствии с частями пропорций. Обновите страницу, и вы увидите разницу, как пространство поделено теперь.</p>\n<p>\n  \n</p>\n<p>Настоящая ценность flexbox можно увидеть в его гибкости/отзывчивости — если изменить размер окна или добавить ещё элемент <a><code>&lt;article&gt;</code></a>, макет будет и дальше выглядеть также хорошо.</p></div></section><section aria-labelledby="flex_краткий_код_против_развёрнутого"><h2 id="flex_краткий_код_против_развёрнутого"><a>flex: краткий код против развёрнутого</a></h2><div class="section-content"><p><a><code>flex</code></a> это сокращённое свойство, в которым можно задать до трёх разных свойств:</p>\n<ul>\n  <li>Значение пропорции, которое мы обсуждали выше. Оно может быть установлено отдельно с помощью свойства <a><code>flex-grow</code></a>.</li>\n  <li>Следующее значение пропорции — <a><code>flex-shrink</code></a> — вступает в роль, когда flex элементы переполняют контейнер. Оно указывает, сколько забирается от размера каждого flex элемента, чтобы он перестал переполнять контейнер. Это продвинутая функция flexbox, и в этом параграфе мы не будем её разбирать.</li>\n  <li>Значение минимального размера, как мы обсуждали ранее. Оно может быть установлено отдельно с помощью свойства <a><code>flex-basis</code></a>.</li>\n</ul>\n<p>Мы не советуем использовать развёрнутые свойства flex, если вам в действительности это не нужно (например, переопределить ранее установленное). Они приводят к написанию большого количества дополнительного кода и могут запутать кого угодно.</p></div></section><section aria-labelledby="горизонтальное_и_вертикальное_выравнивание"><h2 id="горизонтальное_и_вертикальное_выравнивание"><a>Горизонтальное и вертикальное выравнивание</a></h2><div class="section-content"><p>Flexbox также имеет функции для выравнивания flex элементов вдоль основной (main) или поперечной (cross) осей. Рассмотрим их на новом примере — <a class="external" target="_blank">flex-align0.html</a> (<a class="external" target="_blank">просмотр</a>) — который мы превратим в аккуратную, гибкую кнопочную панель инструментов. На данный момент вы видите горизонтальную панель меню, кнопки которой застряли в верхнем левом углу.</p>\n<p>\n  \n</p>\n<p>Сначала сделайте себе копию этого примера.</p>\n<p>Теперь добавьте следующую строку в низ кода CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">div {\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n}\n</pre></div>\n<p>Обновите страницу, и вы увидите, что кнопки теперь хорошо центрированы, горизонтально и вертикально. Мы сделали это с помощью двух новых свойств.</p>\n<p><a><code>align-items</code></a> контролирует, где на поперечной оси находятся flex элементы.</p>\n<ul>\n  <li>По умолчанию стоит значение <code>stretch</code>, которое растягивает все flex элементы, чтобы заполнить родителя вдоль поперечной (cross axis) оси. Если у родителя нет фиксированной ширины вдоль поперечной оси, все flex элементы примут длину самого длинного flex элемента. Вот почему наш первый пример по умолчанию получил столбцы с одинаковой высотой.</li>\n  <li>Значение <code>center</code> , которое мы использовали в коде вверху, заставляет элементы сохранять свои собственные размеры, но центрирует их вдоль поперечной оси. Вот почему кнопки текущего примера центрированы по вертикали.</li>\n  <li>Также есть значения <code>flex-start</code> и <code>flex-end</code>, которые выравнивают все элементы по началу и концу поперечной оси соответственно. См. подробнее <a><code>align-items</code></a>.</li>\n</ul>\n<p>Вы можете переопределить <a><code>align-items</code></a> поведение для отдельных flex элементов, применив свойство <a><code>align-self</code></a> к ним. Например, попробуйте добавить эти строки в код:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">button:first-child {\n  align-self: flex-end;\n}\n</pre></div>\n<p>Посмотрите, что произошло и удалите эти строки.</p>\n<p><a><code>justify-content</code></a> контролирует, где flex элементы располагаются на главной оси.</p>\n<ul>\n  <li>По умолчанию стоит значение <code>flex-start</code>, которое располагает все элементы в начале главной оси.</li>\n  <li>Также можно использовать <code>flex-end</code>, чтобы расположить их в конце.</li>\n  <li><code>center</code> - также одно из значений <code>justify-content</code>, располагает все элементы по центру главной оси.</li>\n  <li>Значение, которое мы использовали выше, <code>space-around</code>, весьма полезно — оно распределяет все элементы равномерно по главной оси, с небольшим количеством свободного места на обоих концах.</li>\n  <li>И ещё одно значение, <code>space-between</code>, которое очень похоже на <code>space-around,</code> за исключением того, что оно не оставляет места на обоих концах.</li>\n</ul>\n<p>Попробуйте немного поиграть с этими значениями прежде чем продолжить</p></div></section><section aria-labelledby="порядок_элементов_flex"><h2 id="порядок_элементов_flex"><a>Порядок элементов flex</a></h2><div class="section-content"><p>В Flexbox также есть возможность менять порядок расположения flex элементов, не влияя на исходный порядок. Это ещё одна вещь, которую невозможно сделать традиционными методами CSS.</p>\n<p>Код здесь простой: попробуйте добавить следующий CSS вниз вашего кода примера:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">button:first-child {\n  order: 1;\n}\n</pre></div>\n<p>и теперь вы увидите, что кнопка «Smile» переместилась в конец главной оси. Давайте теперь поговорим подробнее о том, как это работает:</p>\n<ul>\n  <li>По умолчанию все элементы flex имеют значение <a><code>order</code></a> равное 0.</li>\n  <li>Элементы Flex с установленными на них бОльшими значениями будут отображаться позже в порядке отображения, чем элементы с меньшими значениями порядка.</li>\n  <li>Элементы Flex с одинаковым значением порядка будут отображаться в исходном порядке. Так, если у вас есть четыре элемента с порядковыми значениями 2, 1, 1 и 0, установленными на них соответственно, их порядок отображения будет 4-й, 2-й, 3-й, затем 1-й.</li>\n  <li>Третий элемент появляется после второго, потому что он имеет то же значение порядка и находится после него в порядке написания.</li>\n</ul>\n<p>Вы можете установить отрицательные значения , чтобы элементы отображались раньше, чем элементы с установленным 0. Например, вы можете сделать, чтобы кнопка «Blush» появлялась в начале основной оси, используя следующее правило:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">button:last-child {\n  order: -1;\n}\n</pre></div></div></section><section aria-labelledby="вложенные_flex_блоки"><h2 id="вложенные_flex_блоки"><a>Вложенные flex блоки</a></h2><div class="section-content"><p>Можно создать несколько довольно сложных макетов с помощью flexbox. Совершенно нормально сделать flex элемент flex контейнером, чтобы его потомки также были flex блоками. Посмотрите на <a class="external" target="_blank">complex-flexbox.html</a> (<a class="external" target="_blank">см. вживую</a>).</p>\n<p>\n  \n</p>\n<p>HTML для этого довольно простой. У нас есть элемент <a><code>&lt;section&gt;</code></a>, содержащий три <a><code>&lt;article&gt;</code></a>. Третий <a><code>&lt;article&gt;</code></a> содержит ещё три <a><code>&lt;div&gt;</code></a>.</p>\n<pre compile="false" disable="true" language="css">section - article\n          article\n          article - div - button\n                    div   button\n                    div   button\n                          button\n                          button\n</pre>\n<p>Давайте посмотрим на код, который мы использовали для макета.</p>\n<p>Прежде всего, мы устанавливаем дочерние элементы <a><code>&lt;section&gt;</code></a> в виде flex блоков.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">section {\n  display: flex;\n}\n</pre></div>\n<p>Затем мы устанавливаем несколько значений на самих <a><code>&lt;article&gt;</code></a>. Обратите внимание на второе правило: мы устанавливаем третий <a><code>&lt;article&gt;</code></a>, чтобы его дети были в макете в виде flex блоков, но на этот раз мы располагаем их как столбец.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">article {\n  flex: 1 200px;\n}\n\narticle:nth-of-type(3) {\n  flex: 3 200px;\n  display: flex;\n  flex-flow: column;\n}\n</pre></div>\n<p>Затем мы берём первый <a><code>&lt;div&gt;</code></a>. Сначала мы пишем flex: 1 100px; чтобы дать ему минимальную высоту 100px, потом мы устанавливаем его дочерние элементы (элементы <a><code>&lt;button&gt;</code></a>) также в виде flex блоков. Им мы назначаем перенос блоков и выравниваем их по центру доступного пространства, как это было в примере с кнопкой.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">article:nth-of-type(3) div:first-child {\n  flex: 1 100px;\n  display: flex;\n  flex-flow: row wrap;\n  align-items: center;\n  justify-content: space-around;\n}\n</pre></div>\n<p>Наконец, мы устанавливаем размер кнопке, мы даём ему значение flex 1. Это даёт очень интересный эффект, который вы увидите, если попытаетесь изменить размер ширины окна браузера. Кнопки занимают столько места, сколько могут, и сидят на одной линии также, сколько могут. Если же они не могут комфортно расположиться на одной линии, они перепрыгнут на новые строки.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">button {\n  flex: 1 auto;\n  margin: 5px;\n  font-size: 18px;\n  line-height: 1.5;\n}\n</pre></div></div></section><section aria-labelledby="подытожим"><h2 id="подытожим"><a>Подытожим</a></h2><div class="section-content"><p>Мы завершаем нашу статью по основам flexbox. Надеемся, что вам понравилось, и вы хорошо развлечётесь, путешествуя дальше и изучая его. Далее мы рассмотрим ещё один важный аспект макетов CSS - grid-системы.</p></div></section>',
					works: [],
				},
				{
					title: 'Grids',
					chapter: 2.36,
					content:
						'<header><h1>Grids</h1></header><div class="section-content"><p></p>Сетки (grids) являются установленным инструментом проектирования и многие современные макеты веб-сайта основаны на регулярной сетке. В этой статье мы рассмотрим дизайн на основе сетки и увидим как CSS можно использовать для создания сеток — как с помощью современных инструментов, так и с помощью новых технологий, которые только начинают становиться доступными в браузерах.<p></p>\n</div><section aria-labelledby="что_такое_макет_сетки_grid_layout"><h2 id="что_такое_макет_сетки_grid_layout"><a>Что такое макет сетки (grid layout)?</a></h2><div class="section-content"><p>Сетка (grid) - это просто набор горизонтальных и вертикальных линий, создающих шаблон, по которому мы можем выстроить элементы дизайна. Они помогают нам создавать проекты, в которых элементы не прыгают или не меняют ширину при переходе от страницы к странице, обеспечивая большую согласованность на наших сайтах.</p>\n<p>В сетке обычно будут <strong>столбцы (columns)</strong>, <strong>строки (rows)</strong>, а затем промежутки между каждой строкой и столбцом, обычно называемые <strong>желобами (gutters)</strong>.</p>\n<p>\n  \n</p>\n<p>[Временная диаграмма; скоро будет заменена лучшей диаграммой.]</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Может показаться удивительным, если кто-нибудь из фона дизайна, что CSS не имеет встроенной сетки, и вместо этого мы, похоже, используем множество субоптимальных методов для создания сетчатых конструкций. Как вы узнаете в последней части этой статьи, это изменится, однако вам, вероятно, понадобятся существующие методы создания гридов в течение некоторого времени.</p>\n</div></div></section><section aria-labelledby="использование_grid_system_в_ваших_проектах"><h2 id="использование_grid_system_в_ваших_проектах"><a>Использование "grid system" в ваших проектах</a></h2><div class="section-content"><p>Чтобы обеспечить постоянный опыт на вашем сайте или в приложении, основываясь на системе сетки с самого начала, вам не нужно думать о том, насколько широкий элемент имеет отношение к другим элементам. Ваш выбор ограничен «количеством столбцов сетки, которые этот элемент будет охватывать».</p>\n<p>Ваша «сеточная система» может быть просто решением, принятым в процессе проектирования, для использования регулярной сетки. Если ваши проекты начнутся в приложении для редактирования графики, например Photoshop, вы можете создать сетку для ссылки во время этого процесса, как описано в <a class="external" target="_blank">A better Photoshop grid for responsive web design</a> by Elliot Jay Stocks.</p>\n<p>Ваша сетевая система также может быть структурой - либо третьей стороной, либо созданной вами только для вашего проекта, - которую вы используете для обеспечения сетки с помощью CSS.</p></div></section><section aria-labelledby="создание_простых_рамок_сетки"><h2 id="создание_простых_рамок_сетки"><a>Создание простых рамок сетки</a></h2><div class="section-content"><p>Мы начнём с рассмотрения того, как вы можете создать простую сетку для вашего проекта.</p>\n<p>В настоящее время большинство макетов типа grid создаются с использованием поплавков (floats). Если вы прочитали <a>нашу предыдущую статью о поплавках,</a> вы уже видели, как мы можем использовать эту технику для создания раскладки нескольких столбцов, что является сущностью любой сетки, использующей этот метод.</p>\n<p>Самый простой тип структуры сетки для создания фиксированной ширины — нам просто нужно выяснить, сколько общей ширины мы хотим для нашего дизайна, сколько столбцов мы хотим и насколько широки должны быть желоба и столбцы. Если бы вместо этого мы решили выложить наш проект на сетке со столбцами, которые растут и сокращаются в соответствии с шириной браузера, нам нужно будет рассчитать процентную ширину для столбцов и желобов между ними.</p>\n<p>В следующих разделах мы рассмотрим, как создать оба. Мы создадим сетку с 12 столбцами - очень общий выбор, который, как видно, очень адаптируется к различным ситуациям, учитывая, что 12 прекрасно делится на 6, 4, 3 и 2.</p></div></section><section aria-labelledby="простая_сетка_с_фиксированной_шириной"><h3 id="простая_сетка_с_фиксированной_шириной"><a>Простая сетка с фиксированной шириной</a></h3><div class="section-content"><p>Давайте сначала создадим сетку, использующую столбцы фиксированной ширины.</p>\n<p>Начните с создания локальной копии нашего образца <a class="external" target="_blank">simple-grid.html</a> файла, который содержит следующую разметку в своём теле.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="wrapper">\n  <div class="row">\n    <div class="col">1</div>\n    <div class="col">2</div>\n    <div class="col">3</div>\n    <div class="col">4</div>\n    <div class="col">5</div>\n    <div class="col">6</div>\n    <div class="col">7</div>\n    <div class="col">8</div>\n    <div class="col">9</div>\n    <div class="col">10</div>\n    <div class="col">11</div>\n    <div class="col">12</div>\n  </div>\n  <div class="row">\n    <div class="col span1">13</div>\n    <div class="col span6">14</div>\n    <div class="col span3">15</div>\n    <div class="col span2">16</div>\n  </div>\n</div>\n</pre></div>\n<p>Цель состоит в том, чтобы превратить это в демонстрационную сетку из двух рядов на двенадцать столбцов сетки (grid) - верхний ряд, демонстрирующий размер отдельных столбцов, второй ряд - некоторые области разного размера в сетке.</p>\n<p>\n  \n</p>\n<p>В элементе <a><code>&lt;style&gt;</code></a> добавьте следующий код, который даёт контейнеру ширину 980 пикселей с отступом с правой стороны 20 пикселей. Это даёт нам 960 пикселей для нашей общей ширины столбца/желоба - в этом случае отступы вычитаются из общей ширины содержимого, потому что мы установили <a><code>box-sizing</code></a> в рамку по всем элементам на сайте (см. <a>Changing the box model completely</a> для большего объяснения).</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">* {\n  box-sizing: border-box;\n}\n\nbody {\n  width: 980px;\n  margin: 0 auto;\n}\n\n.wrapper {\n  padding-right: 20px;\n}\n</pre></div>\n<p>Теперь используйте контейнер строк, который обёрнут вокруг каждой строки сетки, чтобы очистить одну строку от другой. Добавьте следующее правило ниже предыдущего:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.row {\n  clear: both;\n}\n</pre></div>\n<p>Применение этого клиринга означает, что нам не нужно полностью заполнять каждую строку элементами, составляющими полные двенадцать столбцов. Строки будут разделены и не будут мешать друг другу.</p>\n<p>Желоба между колоннами шириной 20 пикселей. Мы создаём эти желоба в качестве поля в левой части каждого столбца, включая первый столбец, чтобы сбалансировать 20 пикселей прокладки в правой части контейнера. Таким образом, у нас есть 12 водосточных желобов - 12 x 20 = 240.</p>\n<p>Нам нужно вычесть это из нашей общей ширины 960 пикселей, что даёт нам 720 пикселей для наших столбцов. Если мы разделим это на 12, мы знаем, что каждый столбец должен быть 60 пикселей в ширину. Наш следующий шаг - создать правило для класса <code>.col</code>, плавающее влево, предоставив ему <a><code>margin-left</code></a> из 20 пикселей для формирования желоба и <a><code>width</code></a> из 60 пикселей. Добавьте нижеследующее правило в CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.col {\n  float: left;\n  margin-left: 20px;\n  width: 60px;\n  background: rgb(255, 150, 150);\n}\n</pre></div>\n<p>Верхний ряд отдельных столбцов теперь будет аккуратно размещаться в виде сетки.</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Мы также дали каждому столбцу светло-красный цвет, чтобы вы могли точно видеть, сколько места занимает каждый.</p>\n</div>\n<p>В контейнерах макетов, которые мы хотим разместить более одного столбца, нужно предоставить специальные классы, чтобы скорректировать их значения <a><code>width</code></a> до необходимого количества столбцов (плюс желоба между ними). Нам нужно создать дополнительный класс, чтобы контейнеры могли охватывать от 2 до 12 столбцов. Каждая ширина является результатом сложения ширины столбца этого количества столбцов плюс ширины желоба, который всегда будет набирать номер меньше, чем число столбцов.</p>\n<p>Добавьте нижеследующую часть вашего CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">/\n  *\n  Ширина\n  двух\n  колонок\n  (120 пикселей)\n  плюс\n  одна\n  ширина\n  желоба\n  (20 пикселей)\n  */\n  .col.span2 {\n  width: 140px;\n}\n/\n  *\n  Три\n  ширины\n  столбца\n  (180 пикселей)\n  плюс\n  две\n  ширины\n  желоба\n  (40 пикселей)\n  *\n  /\n  .col.span3 {\n  width: 220px;\n}\n/* И так далее... */\n.col.span4 {\n  width: 300px;\n}\n.col.span5 {\n  width: 380px;\n}\n.col.span6 {\n  width: 460px;\n}\n.col.span7 {\n  width: 540px;\n}\n.col.span8 {\n  width: 620px;\n}\n.col.span9 {\n  width: 700px;\n}\n.col.span10 {\n  width: 780px;\n}\n.col.span11 {\n  width: 860px;\n}\n.col.span12 {\n  width: 940px;\n}\n</pre></div>\n<p>С помощью этих классов мы можем теперь выкладывать разные столбцы ширины в сетке. Попробуйте сохранить и загрузить страницу в своём браузере, чтобы увидеть эффекты.</p>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Если вам не удаётся заставить приведённый выше пример работать, попробуйте сравнить его с нашей <a class="external" target="_blank">готовой версией</a> на GitHub (см. также <a class="external" target="_blank">запуск в режиме реального времени</a>).</p>\n</div>\n<p>Попробуйте изменить классы на своих элементах или даже добавить и удалить некоторые контейнеры, чтобы увидеть, как вы можете изменять макет. Например, вы можете сделать вторую строку следующим образом:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css"><div class="row">\n  <div class="col span8">13</div>\n  <div class="col span4">14</div>\n</div>\n</pre></div>\n<p>Теперь у вас работает сетка, вы можете просто определить строки и количество столбцов в каждой строке, а затем заполнить каждый контейнер своим необходимым контентом. Отлично!</p></div></section><section aria-labelledby="создание_fluid_grid"><h3 id="создание_fluid_grid"><a>Создание fluid grid</a></h3><div class="section-content"><p>Наша сетка работает красиво, но имеет фиксированную ширину. Нам очень нужна гибкая (жидкая) сетка, которая будет расти и сокращаться с доступным пространством в браузере <a>viewport</a>. Для этого мы можем использовать опорные пиксельные ширины и превратить их в проценты</p>\n<p>Уравнение, которое превращает фиксированную ширину в гибкую, основанную на процентах, выглядит следующим образом.</p>\n<pre compile="false" disable="true" language="css">target / context = result\n</pre>\n<p>Для нашей ширины столбца наша <strong>целевая ширина</strong> составляет 60 пикселей, а наш <strong>контекст</strong> 960 пикселей. Для расчёта процента мы можем использовать следующее.</p>\n<pre compile="false" disable="true" language="css">60 / 960 = 0.0625\n</pre>\n<p>Затем мы перемещаем десятичные точки на 2 места, давая нам процент от 6,25%. Таким образом, в нашем CSS мы можем заменить ширину столбца 60 пикселей на 6,25%.</p>\n<p>Мы должны сделать то же самое с нашей шириной желоба:</p>\n<pre compile="false" disable="true" language="css">20 / 960 = 0.02083333333\n</pre>\n<p>Поэтому нам нужно заменить 20 пикселей <a><code>margin-left</code></a> на наше правило <code>.col</code> 20 пикселей <a><code>padding-right</code></a> на <code>.wrapper</code> с 2.08333333%.</p>\n<h4 id="обновление_нашей_сетки">Обновление нашей сетки</h4>\n<p>Чтобы начать работу в этом разделе, создайте новую копию предыдущей страницы примера или создайте локальную копию нашего кода <a class="external" target="_blank">simple-grid-finished.html</a>, который будет использоваться в качестве отправной точки.</p>\n<p>Обновите второе правило CSS (с помощью селектора <code>.wrapper</code>) следующим образом:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">body {\n  width: 90%;\n  max-width: 980px;\n  margin: 0 auto;\n}\n\n.wrapper {\n  padding-right: 2.08333333%;\n}\n</pre></div>\n<p>Мы не только дали нам процент <a><code>width</code></a>, мы также добавили свойство <a><code>max-width</code></a>, чтобы остановить распространение макета.</p>\n<p>Затем обновите четвёртое правило CSS (с селектором <code>.col</code>) следующим образом:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">.col {\n  float: left;\n  margin-left: 2.08333333%;\n  width: 6.25%;\n  background: rgb(255, 150, 150);\n}\n</pre></div>\n<p>Теперь идёт немного более трудоёмкая часть - нам нужно обновить все наши правила <code>.col.span</code>, чтобы использовать проценты, а не ширину пикселей. Это занимает немного времени с калькулятором; чтобы сэкономить вам немного усилий, мы сделали это для вас ниже.</p>\n<p>Обновите нижний блок правил CSS следующим образом:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">/* Two column widths (12.5%) plus one gutter width (2.08333333%) */\n.col.span2 {\n  width: 14.58333333%;\n}\n/* Three column widths (18.75%) plus two gutter widths (4.1666666) */\n.col.span3 {\n  width: 22.91666666%;\n}\n/* And so on... */\n.col.span4 {\n  width: 31.24999999%;\n}\n.col.span5 {\n  width: 39.58333332%;\n}\n.col.span6 {\n  width: 47.91666665%;\n}\n.col.span7 {\n  width: 56.24999998%;\n}\n.col.span8 {\n  width: 64.58333331%;\n}\n.col.span9 {\n  width: 72.91666664%;\n}\n.col.span10 {\n  width: 81.24999997%;\n}\n.col.span11 {\n  width: 89.5833333%;\n}\n.col.span12 {\n  width: 97.91666663%;\n}\n</pre></div>\n<p>Теперь сохраните свой код, загрузите его в браузере и попробуйте изменить ширину видового экрана - вы должны увидеть, что ширины столбцов хорошо меняются. Отлично!</p>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> Если вам не удаётся заставить приведённый выше пример работать, попробуйте сравнить его с нашей <a class="external" target="_blank">готовой версией на GitHub</a> (см. также <a class="external" target="_blank">запуск в режиме реального времени</a>).</p>\n</div></div></section><section aria-labelledby="более_простые_вычисления_с_использованием_функции_calc"><h3 id="более_простые_вычисления_с_использованием_функции_calc"><a>Более простые вычисления с использованием функции calc()</a></h3><div class="section-content"><p>Вы можете использовать функцию <a class="page-not-created" title="Документация об этом ещё не написана. Пожалуйста, поспособствуйте её написанию!"><code>calc ()</code></a> для выполнения математики прямо внутри вашего CSS - это позволяет вставлять простые математические уравнения в ваши значения CSS, чтобы рассчитать, какое значение должно быть. Это особенно полезно, когда необходимо выполнить сложную математику и вы даже можете сделать расчёт, который использует разные единицы, например «Я хочу, чтобы высота этого элемента всегда была на 100% от высоты родителя, минус 50 пикселей». См. <a>этот пример из учебника API MediaRecorder</a>.</p>\n<p>В любом случае, вернёмся к нашим сетям! Любой столбец, который охватывает более одного столбца нашей сетки, имеет общую ширину 6,25%, умноженную на количество столбцов, спаренных плюс 2.08333333%, умноженное на количество желобов (которые всегда будут числом столбцов минус 1). Функция <code>calc()</code> позволяет нам делать это вычисление прямо внутри значения ширины, поэтому для любого элемента, охватывающего 4 столбца, мы можем это сделать, например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.col.span4 {\n  width: calc((6.25% * 4) + (2.08333333% * 3));\n}\n</pre></div>\n<p>Попробуйте заменить нижний блок правил следующим, а затем перезагрузите его в браузере, чтобы узнать, получаете ли вы тот же результат:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.col.span2 {\n  width: calc((6.25% * 2) + 2.08333333%);\n}\n.col.span3 {\n  width: calc((6.25% * 3) + (2.08333333% * 2));\n}\n.col.span4 {\n  width: calc((6.25% * 4) + (2.08333333% * 3));\n}\n.col.span5 {\n  width: calc((6.25% * 5) + (2.08333333% * 4));\n}\n.col.span6 {\n  width: calc((6.25% * 6) + (2.08333333% * 5));\n}\n.col.span7 {\n  width: calc((6.25% * 7) + (2.08333333% * 6));\n}\n.col.span8 {\n  width: calc((6.25% * 8) + (2.08333333% * 7));\n}\n.col.span9 {\n  width: calc((6.25% * 9) + (2.08333333% * 8));\n}\n.col.span10 {\n  width: calc((6.25% * 10) + (2.08333333% * 9));\n}\n.col.span11 {\n  width: calc((6.25% * 11) + (2.08333333% * 10));\n}\n.col.span12 {\n  width: calc((6.25% * 12) + (2.08333333% * 11));\n}\n</pre></div>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> вы можете увидеть нашу законченную версию в файле <a class="external" target="_blank">liquid-grid-calc.html</a> (также см. её <a class="external" target="_blank">в режиме реального времени</a>).</p>\n</div>\n<div class="notecard note" id="sect6">\n  <p><strong>Примечание:</strong> Если вы не можете заставить это работать, возможно, это связано с тем, что ваш браузер не поддерживает функцию <code>calc ()</code>, хотя он довольно хорошо поддерживается в браузерах - ещё в IE9.</p>\n</div></div></section><section aria-labelledby="семантические_и_несемантические_сетчатые_системы"><h3 id="семантические_и_несемантические_сетчатые_системы"><a>Семантические и "несемантические" сетчатые системы</a></h3><div class="section-content"><p>Добавление классов в вашу разметку для определения макета означает, что ваш контент и разметка привязаны к его визуальному представлению. Иногда вы слышите это использование классов CSS, описанных как «несемантические», - описывая, как выглядит контент, а не семантическое использование классов, описывающих контент. Это относится к классам <code>span2</code>, <code>span3</code> и т. Д.</p>\n<p>Это не единственный подход. Вместо этого вы можете выбрать свою сетку, а затем добавить информацию о размерах в правила для существующих семантических классов. Например, если у вас есть <a><code>&lt;div&gt;</code></a> с классом <code>content</code> в нем, который вы хотите разбить на 8 столбцов, вы можете скопировать по ширине из класса <code>span8</code>, предоставив вам следующее правило:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.content {\n  width: calc((6.25% * 8) + (2.08333333% * 7));\n}\n</pre></div>\n<div class="notecard note" id="sect7">\n  <p><strong>Примечание:</strong> Если вы использовали препроцессор, такой как <a class="external" target="_blank">Sass</a>, вы могли бы создать простой mixin, чтобы вставить это значение для вас.</p>\n</div></div></section><section aria-labelledby="включение_офсетных_контейнеров_в_нашей_сетке"><h3 id="включение_офсетных_контейнеров_в_нашей_сетке"><a>Включение офсетных контейнеров в нашей сетке</a></h3><div class="section-content"><p>Сетка, которую мы создали, работает хорошо, пока мы хотим запустить все контейнеры заподлицо с левой стороны сетки. Если бы мы хотели оставить пустое пространство столбца перед первым контейнером - или между контейнерами - нам нужно было бы создать класс смещения, чтобы добавить левое поле на наш сайт, чтобы визуально визуализировать его по сетке. Больше математики!</p>\n<p>Давайте попробуем это.</p>\n<p>Начните с предыдущего кода или используйте наш файл <a class="external" target="_blank">fluid-grid.html</a> в качестве отправной точки.</p>\n<p>Давайте создадим класс в нашем CSS, который будет смещать элемент контейнера на одну ширину столбца. Добавьте нижеследующую часть вашего CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.offset-by-one {\n  margin-left: calc(6.25% + (2.08333333% * 2));\n}\n</pre></div>\n<p>Или если вы предпочитаете самостоятельно рассчитать проценты, используйте это:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.offset-by-one {\n  margin-left: 10.41666666%;\n}\n</pre></div>\n<p>Теперь вы можете добавить этот класс в любой контейнер, в котором вы хотите оставить пустое пространство с одним столбцом в левой части окна. Например, если у вас есть это в вашем HTML:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="col span6">14</div>\n</pre></div>\n<p>Попробуйте заменить его на</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="col span5 offset-by-one">14</div>\n</pre></div>\n<div class="notecard note" id="sect8">\n  <p><strong>Примечание:</strong> Обратите внимание, что вам необходимо уменьшить количество столбцов, чтобы освободить место для смещения!</p>\n</div>\n<p>Попытайтесь загрузить и обновить, чтобы увидеть разницу или посмотрите наш пример <a class="external" target="_blank">fluid-grid-offset.html</a> (см. <a class="external" target="_blank">также «live»</a>). Готовый пример должен выглядеть так:</p>\n<p>\n  \n</p>\n<div class="notecard note" id="sect9">\n  <p><strong>Примечание:</strong> В качестве дополнительного упражнения вы можете реализовать класс «смещение на два»?</p>\n</div></div></section><section aria-labelledby="ограничения_с_плавающей_сеткой"><h3 id="ограничения_с_плавающей_сеткой"><a>Ограничения с плавающей сеткой</a></h3><div class="section-content"><p>При использовании такой системы вам необходимо позаботиться о том, чтобы ваша общая ширина была правильно вставлена и что вы не включаете элементы в строку, которая содержит больше столбцов, чем может содержать строка. Из-за того, как работают поплавки, если количество столбцов сетки становится слишком большим для сетки, элементы на конце будут опускаться до следующей строки, разбивая сетку.</p>\n<p>Также имейте в виду, что если содержимое элементов становится шире, чем занимаемые им строки, оно будет переполняться и выглядит как беспорядок.</p>\n<p>Самое большое ограничение этой системы состоит в том, что она по существу одномерна. Мы имеем дело со столбцами и охватываем элементы по столбцам, но не по строкам. С помощью этих старых методов компоновки очень сложно контролировать высоту элементов без явной установки высоты, и это тоже очень негибкий подход - он работает только, если вы можете гарантировать, что ваш контент будет определённой высоты.</p></div></section><section aria-labelledby="flexbox_grids"><h2 id="flexbox_grids"><a>Flexbox grids?</a></h2><div class="section-content"><p>Если вы прочтёте нашу предыдущую статью о <a>flexbox</a>, вы можете подумать, что flexbox - идеальное решение для создания сетчатой системы. В настоящее время доступно множество систем gridbox на основе flexbox и flexbox может решить многие из проблем, которые мы уже обнаружили при создании нашей сетки выше.</p>\n<p>Однако flexbox никогда не разрабатывался как сетчатая система и создаёт новый набор проблем при использовании в качестве одного. В качестве простого примера мы можем использовать тот же пример разметки, который мы использовали выше, и использовать следующий CSS для стилей классов-оболочек (<code>wrapper</code>), <code>row</code> и <code>col</code> классов:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">body {\n  width: 90%;\n  max-width: 980px;\n  margin: 0 auto;\n}\n\n.wrapper {\n  padding-right: 2.08333333%;\n}\n\n.row {\n  display: flex;\n}\n\n.col {\n  margin-left: 2.08333333%;\n  margin-bottom: 1em;\n  width: 6.25%;\n  flex: 1 1 auto;\n  background: rgb(255, 150, 150);\n}\n</pre></div>\n<p>Вы можете попробовать сделать эти замены в своём собственном примере или посмотреть на наш пример кода <a class="external" target="_blank">flexbox-grid.html</a> (см. также <a class="external" target="_blank">он работает в режиме реального времени</a>).</p>\n<p>Здесь мы превращаем каждую строку в гибкий контейнер. С сеткой на основе flexbox нам все ещё нужны строки, чтобы мы могли иметь элементы, которые составляют менее 100%. Мы установили этот контейнер для <code>display: flex</code>.</p>\n<p>На <code>.col</code> мы устанавливаем первое значение свойства <a><code>flex</code></a> (<a><code>flex-grow</code></a>) до 1, чтобы наши объекты могли расти, второе значение (<a class="page-not-created" title="Документация об этом ещё не написана. Пожалуйста, поспособствуйте её написанию!"><code> flex-shrink </code></a>) до 1, поэтому элементы могут сокращаться, а третье значение (<a class="page-not-created" title="Документация об этом ещё не написана. Пожалуйста, поспособствуйте её написанию!"><code> flex-basis </code></a>) - <code>auto</code>. Поскольку наш элемент имеет набор <a><code>width</code></a>, <code>auto</code> будет использовать эту ширину в качестве базового значения flex (<code>flex-basis</code>).</p>\n<p>В верхней строке мы получаем двенадцать аккуратных коробок на сетке, и они растут и сжимаются одинаково, когда мы меняем ширину окна просмотра. Однако на следующей строке у нас есть только четыре элемента, и они также растут и сокращаются с 60px. Только с четырьмя из них они могут расти намного больше, чем элементы в строке выше, в результате они все занимают одну и ту же ширину во второй строке.</p>\n<p>\n  \n</p>\n<p>Чтобы исправить это, нам всё равно нужно включить наши классы <code>span</code>, чтобы обеспечить ширину, которая заменит значение, используемое <code>flex-basis</code> для этого элемента.</p>\n<p>Они также не уважают сетку, используемую выше, потому что они ничего не знают об этом.</p>\n<p>Flexbox является <strong>одномерным</strong> по дизайну. Он имеет дело с одним измерением - со строкой или столбцом. Мы не можем создать строгую сетку для столбцов и строк, что означает, что если мы будем использовать flexbox для нашей сетки, нам всё равно нужно рассчитать проценты, как для плавающего макета.</p>\n<p>В вашем проекте вы всё равно можете использовать сетку flexbox из-за дополнительных возможностей выравнивания и распределения пространства. Flexbox обеспечивает надплавки. Однако вам следует помнить, что вы все ещё используете инструмент для чего-то другого, кроме того, для чего он предназначен. Таким образом, вы можете почувствовать, что он заставляет вас прыгать через дополнительные обручи, чтобы получить конечный результат, который вы хотите.</p></div></section><section aria-labelledby="системы_сторонних_сетей"><h2 id="системы_сторонних_сетей"><a>Системы сторонних сетей</a></h2><div class="section-content"><p>Теперь, когда мы понимаем математику за нашими расчётами в сетке, мы находимся в хорошем месте, чтобы взглянуть на некоторые из сторонних сетевых систем, которые используются совместно. Если вы ищете «CSS Grid framework» в Интернете, вы найдёте огромный список вариантов на выбор. В популярных структурах, таких как <a class="external" target="_blank">Bootstrap</a> и <a class="external" target="_blank">Foundation</a>, есть сетка. Существуют также автономные сетчатые системы, разработанные с использованием CSS или с использованием препроцессоров.</p>\n<p>Давайте рассмотрим одну из этих автономных систем, поскольку она демонстрирует общие методы работы с сеткой. Сетка, которую мы будем использовать, является частью Skeleton, простой CSS-структуры.</p>\n<p>Для начала посетите <a class="external" target="_blank">веб-сайт Skeleton</a> и выберите «Загрузить», чтобы загрузить ZIP-файл. Разархивируйте это и скопируйте файлы skeleton.css и normalize.css в новый каталог.</p>\n<p>Сделайте копию нашего файла <a class="external" target="_blank">html-skeleton.html</a> и сохраните его в том же каталоге, что и скелет, и нормализовать CSS.</p>\n<p>Включите скелет и нормализуйте CSS на странице HTML, добавив следующее в голову:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><link href="normalize.css" rel="stylesheet">\n<link href="skeleton.css" rel="stylesheet">\n</pre></div>\n<p>Скелет включает в себя больше, чем сетку - он также содержит CSS для типографики и других элементов страницы, которые вы можете использовать в качестве отправной точки. На данный момент мы оставим их по умолчанию, но именно эта сетка нас действительно интересует.</p>\n<div class="notecard note" id="sect10">\n  <p><strong>Примечание:</strong> Нормализация - очень полезная небольшая библиотека CSS, написанная Николасом Галлахером, которая автоматически делает некоторые полезные основные исправления макета и делает стиль элементов по умолчанию более согласованным в разных браузерах.</p>\n</div>\n<p>Мы будем использовать аналогичный HTML для нашего предыдущего примера. Добавьте в свой HTML-код следующее:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="container">\n  <div class="row">\n    <div class="col">1</div>\n    <div class="col">2</div>\n    <div class="col">3</div>\n    <div class="col">4</div>\n    <div class="col">5</div>\n    <div class="col">6</div>\n    <div class="col">7</div>\n    <div class="col">8</div>\n    <div class="col">9</div>\n    <div class="col">10</div>\n    <div class="col">11</div>\n    <div class="col">12</div>\n  </div>\n  <div class="row">\n    <div class="col">13</div>\n    <div class="col">14</div>\n    <div class="col">15</div>\n    <div class="col">16</div>\n  </div>\n</div>\n</pre></div>\n<p>Чтобы начать использовать Skeleton, нам нужно предоставить оболочку <a><code>&lt;div&gt;</code></a> класс <code>container</code> - это уже включено в наш HTML. Это центрирует контент с максимальной шириной 960 пикселей. Вы можете видеть, как теперь коробки не становятся шире, чем 960 пикселей.</p>\n<p>Вы можете посмотреть в файле skeleton.css, чтобы увидеть CSS, который используется, когда мы применяем этот класс. <code>&lt;div&gt;</code> центрируется с использованием <code>auto</code> левого и правого полей, а отступы в 20 пикселей применяются слева и справа. Скелет также устанавливает свойство <a><code>box-sizing</code></a> в <code>border-box</code>, как мы делали это раньше, поэтому дополнение и границы этого элемента будут включены в общую ширину.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.container {\n  position: relative;\n  width: 100%;\n  max-width: 960px;\n  margin: 0 auto;\n  padding: 0 20px;\n  box-sizing: border-box;\n}\n</pre></div>\n<p>Элементы могут быть только частью сетки, если они находятся внутри строки, так как в нашем предыдущем примере нам нужен дополнительный <code>&lt;div&gt;</code> или другой элемент с классом строки (<code>row</code>), вложенным между <code>content</code> <code>&lt;div&gt;</code> и нашим контейнером фактического содержимого <code>&lt;div&gt;</code>. Мы уже это сделали.</p>\n<p>Теперь давайте выложим контейнеры. Скелет основан на сетке из 12 столбцов. В верхних строках нужны классы из <code>one column</code>, чтобы они охватывали один столбец.</p>\n<p>Добавьте их сейчас, как показано в следующем фрагменте:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="container">\n  <div class="row">\n    <div class="one column">1</div>\n    <div class="one column">2</div>\n    <div class="one column">3</div>\n    /* and so on */\n  </div>\n</div>\n</pre></div>\n<p>Затем дайте контейнеры во втором классе классов, объясняющие количество столбцов, которые они должны охватывать, например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="row">\n  <div class="one column">13</div>\n  <div class="six columns">14</div>\n  <div class="three columns">15</div>\n  <div class="two columns">16</div>\n</div>\n</pre></div>\n<p>Попробуйте сохранить свой HTML-файл и загрузить его в свой браузер, чтобы увидеть эффект.</p>\n<div class="notecard note" id="sect11">\n  <p><strong>Примечание:</strong> Примечание. Если вам не удаётся заставить этот пример работать, попробуйте сравнить его с нашим <a class="external" target="_blank">html-skeleton-finished.html</a> - файлом (см. также <a class="external" target="_blank">в режиме реального времени</a>).</p>\n</div>\n<p>Если вы посмотрите в файле skeleton.css, вы увидите, как это работает. Например, у Skeleton определены следующие элементы стиля с добавленными к ним классами «три столбца».</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.three.columns {\n  width: 22%;\n}\n</pre></div>\n<p>Весь Skeleton (или любая другая структура сетки) выполняет настройку предопределённых классов, которые вы можете использовать, добавив их в свою разметку. Это точно так же, как если бы вы сами делали расчёт этих процентов.</p>\n<p>Как вы можете видеть, нам нужно написать очень мало CSS при использовании Skeleton. Он касается всех плавающих для нас, когда мы добавляем классы в нашу разметку. Именно эта способность нести ответственность за компоновку над чем-то ещё, что делает использование рамки для сетчатой системы неотразимым выбором!</p>\n<p>Skeleton - это более простая сетка, чем некоторые из структур, с которыми вы можете столкнуться. Сетки в больших рамках, таких как Bootstrap и Foundation, предлагают больше функциональности и дополнительные точки останова для различной ширины экрана. Тем не менее, все они работают аналогичным образом - добавив определённые классы в свою разметку, вы можете контролировать, как элемент выложен с использованием предопределённой сетки.</p></div></section><section aria-labelledby="родные_css_сетки_с_grid_layout"><h2 id="родные_css_сетки_с_grid_layout"><a>Родные CSS Сетки с Grid Layout</a></h2><div class="section-content"><p>В начале этой статьи мы сказали, что CSS ранее не имел реальной системы для создания макетов сетки, но это изменится. Хотя мы ещё не можем использовать встроенную сетевую систему CSS, в следующем году мы увидим поддержку браузера для модуля компоновки сетки CSS (<a>CSS Grid Layout Module</a>).</p>\n<p>В настоящее время вы можете использовать только те методы, которые мы покажем вам в браузерах, которые реализуют макет сетки CSS «за флагом» - это означает, что он в настоящее время реализован, но в экспериментальном состоянии, которое вам нужно включить.</p>\n<p>В Firefox, например, вам нужно перейти к URL-адресу <code>about: config</code>, выполнить поиск по предпочтению <code>layout.css.grid.enabled</code> и дважды щёлкнуть его, чтобы включить CSS-сетки. Вы можете узнать, как использовать его в других браузерах, посетив <a class="external" target="_blank">Grid by Example</a>.</p>\n<p>Мы рассмотрели структуру Скелетной сетки выше - как и другие сторонние решётки и даже ручные сетки, для этого требуется добавить <code>&lt;div&gt;</code> для формирования строк, а затем указать количество столбцов, которые будут охватывать элементы в этих рядах.</p>\n<p>С помощью CSS Grid Layout вы можете полностью указать свою сетку в CSS, не добавляя эти вспомогательные классы в разметку вообще. Давайте рассмотрим наш простой пример и посмотрим, как мы будем создавать тот же макет с помощью CSS Grid Layout.</p></div></section><section aria-labelledby="создание_собственной_сетки"><h3 id="создание_собственной_сетки"><a>Создание собственной сетки</a></h3><div class="section-content"><p>Сначала начните с создания локальной копии файла <a class="external" target="_blank">css-grid.html</a>. Он содержит следующую разметку:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="wrapper">\n  <div class="col">1</div>\n  <div class="col">2</div>\n  <div class="col">3</div>\n  <div class="col">4</div>\n  <div class="col">5</div>\n  <div class="col">6</div>\n  <div class="col">7</div>\n  <div class="col">8</div>\n  <div class="col">9</div>\n  <div class="col">10</div>\n  <div class="col">11</div>\n  <div class="col">12</div>\n  <div class="col">13</div>\n  <div class="col span6">14</div>\n  <div class="col span3">15</div>\n  <div class="col span2">16</div>\n</div>\n</pre></div>\n<p>На этот раз у нас есть родительский <code>&lt;div&gt;</code> с классом обёртки (<code>wrapper</code>), а затем все дочерние элементы просто появляются непосредственно внутри обёртки - никаких элементов строки. Мы добавили класс к элементам, которые должны охватывать более одного столбца.</p>\n<p>Теперь добавьте следующее в элемент <a><code>&lt;style&gt;</code></a>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.wrapper {\n  width: 90%;\n  max-width: 960px;\n  margin: 0 auto;\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  grid-gap: 20px;\n}\n\n.col {\n  background: rgb(255, 150, 150);\n}\n</pre></div>\n<p>Здесь мы устанавливаем правило <code>.wrapper</code>, поэтому оно составляет 90% от ширины тела, с центром и имеет <a><code>max-width</code></a> 960px.</p>\n<p>Теперь для свойств сетки CSS. Мы можем объявить сетку, используя значение <code>grid</code> свойства <a><code>display</code></a>, установить жёлоб с свойством <a class="only-in-en-us" title="Currently only available in English (US)"><code>grid-gap</code> <small>(en-US)</small></a>, а затем создать сетку из 12 столбцов равной ширине, используя <a><code>grid-template-columns</code></a>, новую функцию <code>repeat()</code> и новую единицу, определённую для макета сетки - блок <code>fr</code>.</p>\n<p>Блок <code>fr</code> представляет собой блок фракции - он описывает долю доступного пространства в контейнере сетки. Если все столбцы равны <code>1fr</code>, каждый из них занимает равное количество места. Это устраняет необходимость вычислять проценты для создания гибкой сетки.</p>\n<p>Создав сетку, правила автоматического размещения сетки немедленно выведут наши коробки в этой сетке, и мы получим гибкую сетку с двенадцатью столбцами.</p>\n<p>\n  \n</p>\n<p>Чтобы создать контейнеры, которые охватывают несколько треков столбцов в сетке, мы можем использовать свойство <a><code>grid-column</code></a>. Чтобы охватить 6 столбцов, например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.span6 {\n  grid-column: auto / span 6;\n}\n</pre></div>\n<p>И для span 3:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.span3 {\n  grid-column: auto / span 3;\n}\n</pre></div>\n<p>Значение перед косой чертой - это начальная строка - в этом случае мы явно не устанавливаем это и не позволяем браузеру размещать элемент на следующей доступной строке. Затем мы можем установить его на 6, 3 или сколько угодно строк.</p>\n<p>Добавьте нижеследующую часть вашего CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.span2 {\n  grid-column: auto / span 2;\n}\n.span3 {\n  grid-column: auto / span 3;\n}\n.span4 {\n  grid-column: auto / span 4;\n}\n.span5 {\n  grid-column: auto / span 5;\n}\n.span6 {\n  grid-column: auto / span 6;\n}\n.span7 {\n  grid-column: auto / span 7;\n}\n.span8 {\n  grid-column: auto / span 8;\n}\n.span9 {\n  grid-column: auto / span 9;\n}\n.span10 {\n  grid-column: auto / span 10;\n}\n.span11 {\n  grid-column: auto / span 11;\n}\n.span12 {\n  grid-column: auto / span 12;\n}\n</pre></div>\n<p>Попробуйте сохранить и обновить, и вы увидите, что контейнеры охватывают несколько столбцов, если это необходимо. Круто!</p>\n<p>Сетки CSS являются <strong>двумерными</strong>, так как макет растёт и сжимается, элементы остаются выровненными по горизонтали и по вертикали.</p>\n<p>Вы можете проверить это, заменив последние 4 col <code>&lt;div&gt;</code> s следующим:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css"><div class="col">13some<br>content</div>\n<div class="col span6">14this<br>is<br>more<br>content</div>\n<div class="col span3">15this<br>is<br>less</div>\n<div class="col span2">16</div>\n</pre></div>\n<p>Здесь мы намеренно добавили некоторые фрагменты строки (<a><code>&lt;br&gt;</code></a>), чтобы заставить некоторые из столбцов стать выше других. Если вы попытаетесь сохранить и обновить, вы увидите, что столбцы регулируют их высоту, как самый высокий контейнер, поэтому все остаётся аккуратным.</p>\n<p>Окончательный макет выглядит так:</p>\n<p>\n  \n</p>\n<div class="notecard note" id="sect12">\n  <p><strong>Примечание:</strong> Если вам не удаётся заставить этот пример работать, вы можете проверить свой код на нашу <a class="external" target="_blank">законченную версию</a> (также смотрите, как она <a class="external" target="_blank">работает в прямом эфире</a>).</p>\n</div></div></section><section aria-labelledby="другие_полезные_функции_сетки_css"><h3 id="другие_полезные_функции_сетки_css"><a>Другие полезные функции сетки CSS</a></h3><div class="section-content"><p>С сетками CSS нам не нужно толкать вещи вдоль полей, чтобы их компенсировать. Попробуйте внести эти изменения в свой CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.content {\n  grid-column: 2 / 8;\n}\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="col span2 content">16</div>\n</pre></div>\n<p>Контейнер 16 теперь будет охватывать столбцы с 2 по 8, в следующей доступной строке, где он может поместиться.</p>\n<p>Мы можем так же легко группировать строки так же, как и столбцы:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.content {\n  grid-column: 2 / 8;\n  grid-row: 3 / 5;\n}\n</pre></div>\n<p>Контейнер 16 теперь будет охватывать строки с 3 по 5, а также столбцы с 2 по 8.</p>\n<p>Нам также не нужно использовать маржу для фальшивых желобов или явно рассчитать их ширину - сетка CSS имеет эту функциональность, встроенную прямо в свойство <code>grid-gap</code>.</p>\n<p>Мы просто касаемся поверхности того, что возможно с помощью CSS Grid Layout, но главное, что нужно понять в контексте этой статьи, это то, что вам не нужно создавать сетку с сеткой - она одна. Вы можете написать CSS, который помещает элемент непосредственно в предопределённую сетку. Это первый раз, когда это было возможно с помощью CSS и это улучшится, когда поддержка браузера закрепится.</p></div></section><section aria-labelledby="активное_обучение_напишите_свою_собственную_простую_сетку"><h3 id="активное_обучение_напишите_свою_собственную_простую_сетку"><a>Активное обучение: Напишите свою собственную простую сетку</a></h3><div class="section-content"><p>В макете «<a>Введение в CSS</a>» мы включили раздел о <a>CSS-таблицах</a>, который включал простой пример формы (см. Пример <a class="external" target="_blank">css-tables-example.html live</a> и <a class="external" target="_blank">исходный код</a>). Мы хотели бы, чтобы вы взяли копию этого примера и выполните следующие действия:</p>\n<ol>\n  <li>Удалите элементы <code>&lt;div&gt;</code> внутри <code>&lt;form&gt;</code> - вам больше не нужны эти данные, поскольку CSS-сетки могут обрабатывать размещение содержимого по строкам и столбцам для вас.</li>\n  <li>Используйте свойства сетки CSS, чтобы создать макет для вашей формы как можно ближе к оригиналу. Вам нужно будет установить ширину на содержащем элементе и подумать о том, как установить пробелы в столбцах, а также пробелы в строке.</li>\n</ol>\n<div class="notecard note" id="sect13">\n  <p><strong>Примечание:</strong> Сначала выполните это и если вы действительно застряли, вы можете проверить свой код на примере <a class="external" target="_blank">css-tables-as-grid.html</a>. Не обманывайте - сначала попробуйте упражнение!</p>\n</div></div></section><section aria-labelledby="резюме"><h2 id="резюме"><a>Резюме</a></h2><div class="section-content"><p>Прочитав эту статью, вы должны теперь понять, как grid-схемы и grid-структуры работают в CSS. Вы также заглянули в будущее сетки CSS и теперь должны понимать, что используемые нами grid-сетки - это, по сути, стоп-решение, пока у нас не будет широко распространённого способа достижения этого в CSS.</p></div></section><section aria-labelledby="in_this_module"><h2 id="in_this_module"><a>In this module</a></h2><div class="section-content"><ul>\n  <li><a>Introduction to CSS layout</a></li>\n  <li><a>Floats</a></li>\n  <li><a>Positioning</a></li>\n  <li><a>Practical positioning examples</a></li>\n  <li><a>Flexbox</a></li>\n  <li><a aria-current="page">Grids</a></li>\n</ul></div></section>',
					works: [],
				},
				{
					title: 'Float',
					chapter: 2.37,
					content:
						'<header><h1>Float</h1></header><div class="section-content">\n<p>Первоначально используемое для "обтекания" картинок текстом, свойство <a><code>float</code></a> стало одним из наиболее часто используемых инструментов для создания макетов из нескольких столбцов на веб-страницах. С появлением flexbox и grid оно снова используется как задумывалось в начале, о чем подробнее в этой статье.</p>\n</div><section aria-labelledby="общие_сведения_о_float"><h2 id="общие_сведения_о_float"><a>Общие сведения о float</a></h2><div class="section-content"><p>Свойство <a><code>float</code></a> вводилось для того, чтобы разработчики могли включать изображение, с обтеканием текста вокруг него слева или справа, как это часто используется в газетах.</p>\n<p>Но разработчики быстро осознали, что можно обтекать всё что угодно, не только изображения, поэтому использование float расширилось, например для вёрстки забавных эффектов таких как <a class="external" target="_blank">drop-caps</a> (буквица).</p>\n<p>Floats очень часто использовались для создания макетов целых веб-страниц, отображающих несколько колонок информации, обтекаемых так, что колонки располагаются друг за другом (поведение по умолчанию предполагает, что колонки должны располагаются друг за другом, в том же порядке в котором они появляются в источнике). Доступны более новые, лучшие методы и поэтому использование floats для этих целей следует рассматривать как <a class="only-in-en-us" title="Currently only available in English (US)">устаревшей техникой <small>(en-US)<small></small></small></a>.</p>\n<p>В этой статье мы сконцентрируемся только на надлежащем использовании floats.</p></div></section><section aria-labelledby="простой_пример_float"><h2 id="простой_пример_float"><a>Простой пример float</a></h2><div class="section-content"><p>Давайте выясним как использовать floats. Мы начнём с очень простого примера включающего обтекание элемента блоком текста. Вы можете следовать за нами создав новый <code>index.html</code> файл на вашем компьютере, заполнив его <a class="external" target="_blank">простым шаблоном HTML</a>, и вставив код ниже в подходящее место. В конце раздела вы можете увидеть живой пример того, как должен выглядеть финальный код.</p>\n<p>Во-первых, мы начнём с некоторого простого HTML — добавьте следующее в body вашего HTML, удалив всё что там было до этого:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><h1>Simple float example</h1>\n\n<div class="box">Float</div>\n\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus aliquam\n  dolor, eu lacinia lorem placerat vulputate. Duis felis orci, pulvinar id metus\n  ut, rutrum luctus orci. Cras porttitor imperdiet nunc, at ultricies tellus\n  laoreet sit amet.\n</p>\n\n<p>\n  Sed auctor cursus massa at porta. Integer ligula ipsum, tristique sit amet\n  orci vel, viverra egestas ligula. Curabitur vehicula tellus neque, ac ornare\n  ex malesuada et. In vitae convallis lacus. Aliquam erat volutpat. Suspendisse\n  ac imperdiet turpis. Aenean finibus sollicitudin eros pharetra congue. Duis\n  ornare egestas augue ut luctus. Proin blandit quam nec lacus varius commodo et\n  a urna. Ut id ornare felis, eget fermentum sapien.\n</p>\n\n<p>\n  Nam vulputate diam nec tempor bibendum. Donec luctus augue eget malesuada\n  ultrices. Phasellus turpis est, posuere sit amet dapibus ut, facilisis sed\n  est. Nam id risus quis ante semper consectetur eget aliquam lorem. Vivamus\n  tristique elit dolor, sed pretium metus suscipit vel. Mauris ultricies lectus\n  sed lobortis finibus. Vivamus eu urna eget velit cursus viverra quis\n  vestibulum sem. Aliquam tincidunt eget purus in interdum. Cum sociis natoque\n  penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n</p>\n</pre></div>\n<p>А теперь примените следующий CSS для вашего HTML (используя элемент <a><code>&lt;style&gt;</code></a> или <a><code>&lt;link&gt;</code></a> на отдельный файл <code>.css</code> — на ваше усмотрение):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">body {\n  width: 90%;\n  max-width: 900px;\n  margin: 0 auto;\n  font:\n    0.9em/1.2 Arial,\n    Helvetica,\n    sans-serif;\n}\n\n.box {\n  width: 150px;\n  height: 100px;\n  border-radius: 5px;\n  background-color: rgb(207, 232, 220);\n  padding: 1em;\n}\n</pre></div>\n<p>Если вы сохраните и обновите сейчас, то вы увидите нечто похожее на то, чего ожидаете — блок располагается выше текста, при нормальном потоке. Для того чтобы текст обтекал его вокруг добавьте два свойства к правилу <code>.box</code>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.box {\n  float: left;\n  margin-right: 15px;\n  width: 150px;\n  height: 100px;\n  border-radius: 5px;\n  background-color: rgb(207, 232, 220);\n  padding: 1em;\n}\n</pre></div>\n<p>Если вы сохраните и обновите сейчас, то вы увидите нечто похожее на следующее:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Simple float example</h1>\n\n<div class="box">Float</div>\n\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus aliquam\n  dolor, eu lacinia lorem placerat vulputate.\n</p>\n\n<p>\n  Duis felis orci, pulvinar id metus ut, rutrum luctus orci. Cras porttitor\n  imperdiet nunc, at ultricies tellus laoreet sit amet. Sed auctor cursus massa\n  at porta. Integer ligula ipsum, tristique sit amet orci vel, viverra egestas\n  ligula. Curabitur vehicula tellus neque, ac ornare ex malesuada et. In vitae\n  convallis lacus. Aliquam erat volutpat. Suspendisse ac imperdiet turpis.\n  Aenean finibus sollicitudin eros pharetra congue. Duis ornare egestas augue ut\n  luctus. Proin blandit quam nec lacus varius commodo et a urna. Ut id ornare\n  felis, eget fermentum sapien.\n</p>\n\n<p>\n  Nam vulputate diam nec tempor bibendum. Donec luctus augue eget malesuada\n  ultrices. Phasellus turpis est, posuere sit amet dapibus ut, facilisis sed\n  est. Nam id risus quis ante semper consectetur eget aliquam lorem. Vivamus\n  tristique elit dolor, sed pretium metus suscipit vel. Mauris ultricies lectus\n  sed lobortis finibus. Vivamus eu urna eget velit cursus viverra quis\n  vestibulum sem. Aliquam tincidunt eget purus in interdum. Cum sociis natoque\n  penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 90%;\n  max-width: 900px;\n  margin: 0 auto;\n  font:\n    0.9em/1.2 Arial,\n    Helvetica,\n    sans-serif;\n}\n\n.box {\n  float: left;\n  margin-right: 15px;\n  width: 150px;\n  height: 150px;\n  border-radius: 5px;\n  background-color: rgb(207, 232, 220);\n  padding: 1em;\n}\n</pre></div><div class="code-example" id="sect1"><div class="example-header" id="sect2"></div></div>\n<p>Итак, давайте подумаем над тем, как работает float — элемент с установленным float (элемент <a><code>&lt;div&gt;</code></a> в данном случае) изымается из нормального потока документа и крепится с левой стороны от родительского контейнера (элемент <a><code>&lt;body&gt;</code></a> в данном случае). Любой контент, который следует ниже за обтекаемым элементом в макете при нормальном потоке теперь будет оборачивать его вокруг, заполняя пространство справа от него начиная на той же высоте что и вершина обтекаемого элемента. Там он остановится.</p>\n<p>Обтекание контента справа имеет точно такой же эффект, но наоборот — обтекаемый элемент будет прилипать справа, а контент будет оборачивать вокруг слева. Попробуйте изменить значение на <code>right</code> и замените <a><code>margin-right</code></a> на <a><code>margin-left</code></a> в последнем наборе правил, чтобы увидеть каков результат.</p>\n<p>В то время как мы можем добавлять margin к обтекаемому элементу чтобы оттолкнуть текст от него, мы не можем добавлять margin к тексту чтобы отодвинуть его от обтекаемого элемента. так происходит потому, что обтекаемые элементы изъяты из нормального потока, а следующие за ним блоки фактически располагаются за обтекаемым элементом. Вы можете продемонстрировать это, внеся некоторые изменения в ваш пример.</p>\n<p>Добавьте класс <code>special</code> к первому параграфу текста, тот который непосредственно следует за обтекаемым блоком, далее добавьте следующие правила в ваш CSS. Они дадут нашему параграфу цвет фона.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.special {\n  background-color: rgb(79, 185, 227);\n  padding: 10px;\n  color: #fff;\n}\n</pre></div>\n<p>Чтобы эффект был лучше виден, измените <code>margin-right</code> обтекаемого объекта на <code>margin</code>, так вы получите пространство вокруг него. Вы сможете увидеть фон параграфа располагающегося прям под обтекаемым блоком, как на примере ниже.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Simple float example</h1>\n\n<div class="box">Float</div>\n\n<p class="special">\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus aliquam\n  dolor, eu lacinia lorem placerat vulputate.\n</p>\n\n<p>\n  Duis felis orci, pulvinar id metus ut, rutrum luctus orci. Cras porttitor\n  imperdiet nunc, at ultricies tellus laoreet sit amet. Sed auctor cursus massa\n  at porta. Integer ligula ipsum, tristique sit amet orci vel, viverra egestas\n  ligula. Curabitur vehicula tellus neque, ac ornare ex malesuada et. In vitae\n  convallis lacus. Aliquam erat volutpat. Suspendisse ac imperdiet turpis.\n  Aenean finibus sollicitudin eros pharetra congue. Duis ornare egestas augue ut\n  luctus. Proin blandit quam nec lacus varius commodo et a urna. Ut id ornare\n  felis, eget fermentum sapien.\n</p>\n\n<p>\n  Nam vulputate diam nec tempor bibendum. Donec luctus augue eget malesuada\n  ultrices. Phasellus turpis est, posuere sit amet dapibus ut, facilisis sed\n  est. Nam id risus quis ante semper consectetur eget aliquam lorem. Vivamus\n  tristique elit dolor, sed pretium metus suscipit vel. Mauris ultricies lectus\n  sed lobortis finibus. Vivamus eu urna eget velit cursus viverra quis\n  vestibulum sem. Aliquam tincidunt eget purus in interdum. Cum sociis natoque\n  penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 90%;\n  max-width: 900px;\n  margin: 0 auto;\n  font:\n    0.9em/1.2 Arial,\n    Helvetica,\n    sans-serif;\n}\n\n.box {\n  float: left;\n  margin: 15px;\n  width: 150px;\n  height: 150px;\n  border-radius: 5px;\n  background-color: rgb(207, 232, 220);\n  padding: 1em;\n}\n\n.special {\n  background-color: rgb(79, 185, 227);\n  padding: 10px;\n  color: #fff;\n}\n</pre></div><div class="code-example" id="sect3"><div class="example-header" id="sect4"></div></div>\n<p><a>Линейные блоки</a> нашего последующего элемента были сокращены так что текст располагается вокруг обтекаемого объекта, но из-за того, что обтекаемый объект удаляется из нормального потока блок вокруг параграфа все ещё остаётся в полную ширину.</p></div></section><section aria-labelledby="очистка_обтекания"><h2 id="очистка_обтекания"><a>Очистка обтекания</a></h2><div class="section-content"><p>Мы увидели, что обтекаемый объект удалён из нормального потока и что другие элементы будут располагаться за ним, поэтому если мы хотим остановить перемещение следующего элемента нам необходимо очистить его; что достигается при помощи свойства <a><code>clear</code></a>.</p>\n<p>Добавьте класс <code>cleared</code> ко второму параграфу после обтекаемого элемента в ваш HTML из предыдущего примера. Далее добавьте следующий CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.cleared {\n  clear: left;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Simple float example</h1>\n\n<div class="box">Float</div>\n\n<p class="special">\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus aliquam\n  dolor, eu lacinia lorem placerat vulputate.\n</p>\n\n<p class="cleared">\n  Duis felis orci, pulvinar id metus ut, rutrum luctus orci. Cras porttitor\n  imperdiet nunc, at ultricies tellus laoreet sit amet. Sed auctor cursus massa\n  at porta. Integer ligula ipsum, tristique sit amet orci vel, viverra egestas\n  ligula. Curabitur vehicula tellus neque, ac ornare ex malesuada et. In vitae\n  convallis lacus. Aliquam erat volutpat. Suspendisse ac imperdiet turpis.\n  Aenean finibus sollicitudin eros pharetra congue. Duis ornare egestas augue ut\n  luctus. Proin blandit quam nec lacus varius commodo et a urna. Ut id ornare\n  felis, eget fermentum sapien.\n</p>\n\n<p>\n  Nam vulputate diam nec tempor bibendum. Donec luctus augue eget malesuada\n  ultrices. Phasellus turpis est, posuere sit amet dapibus ut, facilisis sed\n  est. Nam id risus quis ante semper consectetur eget aliquam lorem. Vivamus\n  tristique elit dolor, sed pretium metus suscipit vel. Mauris ultricies lectus\n  sed lobortis finibus. Vivamus eu urna eget velit cursus viverra quis\n  vestibulum sem. Aliquam tincidunt eget purus in interdum. Cum sociis natoque\n  penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 90%;\n  max-width: 900px;\n  margin: 0 auto;\n  font:\n    0.9em/1.2 Arial,\n    Helvetica,\n    sans-serif;\n}\n\n.box {\n  float: left;\n  margin: 15px;\n  width: 150px;\n  height: 150px;\n  border-radius: 5px;\n  background-color: rgb(207, 232, 220);\n  padding: 1em;\n}\n\n.special {\n  background-color: rgb(79, 185, 227);\n  padding: 10px;\n  color: #fff;\n}\n\n.cleared {\n  clear: left;\n}\n</pre></div><div class="code-example" id="sect5"><div class="example-header" id="sect6"></div></div>\n<p>Вы должны увидеть, что следующий параграф очищает float элемента и больше не появляется рядом с ним. Свойство <code>clear</code> принимает следующие значения:</p>\n<ul>\n  <li><code>left</code>: очищает объекты, обтекаемые слева.</li>\n  <li><code>right</code>: очищает объекты, обтекаемые справа.</li>\n  <li><code>both</code>: очищает любые обтекаемые объекты, слева или справа.</li>\n</ul></div></section><section aria-labelledby="очистка_блоков_обёрнутых_вокруг_обтекаемых_элементов"><h2 id="очистка_блоков_обёрнутых_вокруг_обтекаемых_элементов"><a>Очистка блоков обёрнутых вокруг обтекаемых элементов</a></h2><div class="section-content"><p>Вы теперь знаете, как очистить что-либо следующее за обтекаемым элементом, но давайте посмотрим, что происходит если у вас имеется высокий обтекаемый объект и короткий параграф с блоком, оборачивающим оба элемента. Измените ваш документ так чтоб первый параграф и наш обтекаемый блок были обёрнуты в <a><code>&lt;div&gt;</code></a> с классом <code>wrapper</code>.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="wrapper">\n  <div class="box">Float</div>\n\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n    aliquam dolor, eu lacinia lorem placerat vulputate.\n  </p>\n</div>\n</pre></div>\n<p>В вашем CSS добавьте следующее правило для класса <code>.wrapper</code> и обновите страницу:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.wrapper {\n  background-color: rgb(79, 185, 227);\n  padding: 10px;\n  color: #fff;\n}\n</pre></div>\n<p>В добавок удалите класс <code>.cleared</code>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.cleared {\n  clear: left;\n}\n</pre></div>\n<p>Вы увидите, что, точно так же как и в примере где мы устанавливаем цвет фона для параграфа, цвет фона располагается за обтекаемым объектом.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Simple float example</h1>\n<div class="wrapper">\n  <div class="box">Float</div>\n\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n    aliquam dolor, eu lacinia lorem placerat vulputate.\n  </p>\n</div>\n\n<p class="cleared">\n  Duis felis orci, pulvinar id metus ut, rutrum luctus orci. Cras porttitor\n  imperdiet nunc, at ultricies tellus laoreet sit amet. Sed auctor cursus massa\n  at porta. Integer ligula ipsum, tristique sit amet orci vel, viverra egestas\n  ligula. Curabitur vehicula tellus neque, ac ornare ex malesuada et. In vitae\n  convallis lacus. Aliquam erat volutpat. Suspendisse ac imperdiet turpis.\n  Aenean finibus sollicitudin eros pharetra congue. Duis ornare egestas augue ut\n  luctus. Proin blandit quam nec lacus varius commodo et a urna. Ut id ornare\n  felis, eget fermentum sapien.\n</p>\n\n<p>\n  Nam vulputate diam nec tempor bibendum. Donec luctus augue eget malesuada\n  ultrices. Phasellus turpis est, posuere sit amet dapibus ut, facilisis sed\n  est. Nam id risus quis ante semper consectetur eget aliquam lorem. Vivamus\n  tristique elit dolor, sed pretium metus suscipit vel. Mauris ultricies lectus\n  sed lobortis finibus. Vivamus eu urna eget velit cursus viverra quis\n  vestibulum sem. Aliquam tincidunt eget purus in interdum. Cum sociis natoque\n  penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 90%;\n  max-width: 900px;\n  margin: 0 auto;\n  font:\n    0.9em/1.2 Arial,\n    Helvetica,\n    sans-serif;\n}\n\n.wrapper {\n  background-color: rgb(79, 185, 227);\n  padding: 10px;\n  color: #fff;\n}\n\n.box {\n  float: left;\n  margin: 15px;\n  width: 150px;\n  height: 150px;\n  border-radius: 5px;\n  background-color: rgb(207, 232, 220);\n  padding: 1em;\n}\n</pre></div><div class="code-example" id="sect7"><div class="example-header" id="sect8"></div></div>\n<p>И ещё раз, так происходит потому, что обтекаемый объект изымается из нормального потока. Очистка следующего элемента не помогает с этой проблемой очистки блока, где вы хотите, чтобы нижняя часть блока обернула обтекаемый объект и оборачивающий контент даже если контент короче. Существует три потенциальных способа разобраться с этой проблемой, два из которых работают во всех браузерах, но при этом немного хитры и третий новый способ, который правильно справляется с этой ситуацией.</p></div></section><section aria-labelledby="clearfix_hack"><h3 id="clearfix_hack"><a>Clearfix hack</a></h3><div class="section-content"><p>Традиционно эта ситуация решалась с помощью так называемого «clearfix hack». Это включает вставку некоторого сгенерированного контента после блока, содержащего обтекаемый объект и обёрточный контент, а также настройки для очистки обоих.</p>\n<p>Добавьте следующий CSS в наш пример:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.wrapper::after {\n  content: "";\n  clear: both;\n  display: block;\n}\n</pre></div>\n<p>Теперь перезагрузите страницу и блок должен быть очищенным. По сути, это то же самое, как если бы вы добавили HTML-элемент такой как <code>&lt;div&gt;</code> ниже объекта и установили <code>clear: both</code>.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Simple float example</h1>\n<div class="wrapper">\n  <div class="box">Float</div>\n\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n    aliquam dolor, eu lacinia lorem placerat vulputate.\n  </p>\n</div>\n<p class="cleared">\n  Duis felis orci, pulvinar id metus ut, rutrum luctus orci. Cras porttitor\n  imperdiet nunc, at ultricies tellus laoreet sit amet. Sed auctor cursus massa\n  at porta. Integer ligula ipsum, tristique sit amet orci vel, viverra egestas\n  ligula. Curabitur vehicula tellus neque, ac ornare ex malesuada et. In vitae\n  convallis lacus. Aliquam erat volutpat. Suspendisse ac imperdiet turpis.\n  Aenean finibus sollicitudin eros pharetra congue. Duis ornare egestas augue ut\n  luctus. Proin blandit quam nec lacus varius commodo et a urna. Ut id ornare\n  felis, eget fermentum sapien.\n</p>\n\n<p>\n  Nam vulputate diam nec tempor bibendum. Donec luctus augue eget malesuada\n  ultrices. Phasellus turpis est, posuere sit amet dapibus ut, facilisis sed\n  est. Nam id risus quis ante semper consectetur eget aliquam lorem. Vivamus\n  tristique elit dolor, sed pretium metus suscipit vel. Mauris ultricies lectus\n  sed lobortis finibus. Vivamus eu urna eget velit cursus viverra quis\n  vestibulum sem. Aliquam tincidunt eget purus in interdum. Cum sociis natoque\n  penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 90%;\n  max-width: 900px;\n  margin: 0 auto;\n  font:\n    0.9em/1.2 Arial,\n    Helvetica,\n    sans-serif;\n}\n\n.wrapper {\n  background-color: rgb(79, 185, 227);\n  padding: 10px;\n  color: #fff;\n}\n\n.box {\n  float: left;\n  margin: 15px;\n  width: 150px;\n  height: 150px;\n  border-radius: 5px;\n  background-color: rgb(207, 232, 220);\n  padding: 1em;\n}\n\n.wrapper::after {\n  content: "";\n  clear: both;\n  display: block;\n}\n</pre></div><div class="code-example" id="sect9"><div class="example-header" id="sect10"></div></div></div></section><section aria-labelledby="использование_overflow"><h3 id="использование_overflow"><a>Использование overflow</a></h3><div class="section-content"><p>Альтернативный метод — это задать свойство <a><code>overflow</code></a> для обёртки (wrapper) на значение отличное от <code>visible</code>.</p>\n<p>Удалите clearfix CSS который вы добавляли в предыдущей секции и вместо него добавьте <code>overflow: auto</code> к правилу для обёртки. Блок снова должен быть очищен.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.wrapper {\n  background-color: rgb(79, 185, 227);\n  padding: 10px;\n  color: #fff;\n  overflow: auto;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Simple float example</h1>\n<div class="wrapper">\n  <div class="box">Float</div>\n\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n    aliquam dolor, eu lacinia lorem placerat vulputate.\n  </p>\n</div>\n<p class="cleared">\n  Duis felis orci, pulvinar id metus ut, rutrum luctus orci. Cras porttitor\n  imperdiet nunc, at ultricies tellus laoreet sit amet. Sed auctor cursus massa\n  at porta. Integer ligula ipsum, tristique sit amet orci vel, viverra egestas\n  ligula. Curabitur vehicula tellus neque, ac ornare ex malesuada et. In vitae\n  convallis lacus. Aliquam erat volutpat. Suspendisse ac imperdiet turpis.\n  Aenean finibus sollicitudin eros pharetra congue. Duis ornare egestas augue ut\n  luctus. Proin blandit quam nec lacus varius commodo et a urna. Ut id ornare\n  felis, eget fermentum sapien.\n</p>\n\n<p>\n  Nam vulputate diam nec tempor bibendum. Donec luctus augue eget malesuada\n  ultrices. Phasellus turpis est, posuere sit amet dapibus ut, facilisis sed\n  est. Nam id risus quis ante semper consectetur eget aliquam lorem. Vivamus\n  tristique elit dolor, sed pretium metus suscipit vel. Mauris ultricies lectus\n  sed lobortis finibus. Vivamus eu urna eget velit cursus viverra quis\n  vestibulum sem. Aliquam tincidunt eget purus in interdum. Cum sociis natoque\n  penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 90%;\n  max-width: 900px;\n  margin: 0 auto;\n  font:\n    0.9em/1.2 Arial,\n    Helvetica,\n    sans-serif;\n}\n\n.wrapper {\n  background-color: rgb(79, 185, 227);\n  padding: 10px;\n  color: #fff;\n  overflow: auto;\n}\n\n.box {\n  float: left;\n  margin: 15px;\n  width: 150px;\n  height: 150px;\n  border-radius: 5px;\n  background-color: rgb(207, 232, 220);\n  padding: 1em;\n}\n</pre></div><div class="code-example" id="sect11"><div class="example-header" id="sect12"></div></div>\n<p>Этот пример работает путём создания того, что известно как <strong>Блочный Контекст Форматирования (block formatting context</strong> (BFC)<strong>).</strong> Это как мини макет внутри вашей страницы, внутри которого содержится все, следовательно наш обтекаемый элемент находится внутри BFC и фон располагается за обоими элементами. Обычно это будет срабатывать, однако, в определённых случаях вы можете обнаружить нежелательную полосу прокрутки или обрезанные тени из-за непреднамеренный последствий использования overflow.</p></div></section><section aria-labelledby="display_flow-root"><h3 id="display_flow-root"><a>display: flow-root</a></h3><div class="section-content"><p>Современный способ решения этой проблемы — это использование значения <code>flow-root</code> свойства <code>display</code>. Он существует только для создания BFC без использования хака — не будет возникать непреднамеренных последствий, когда вы используете его. Удалите <code>overflow: auto</code> из вашего правила <code>.wrapper</code> и добавьте <code>display: flow-root</code>. Если предположить, что у вас <a>поддерживающий браузер</a>, блок будет очищаться.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.wrapper {\n  background-color: rgb(79, 185, 227);\n  padding: 10px;\n  color: #fff;\n  display: flow-root;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Simple float example</h1>\n<div class="wrapper">\n  <div class="box">Float</div>\n\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n    aliquam dolor, eu lacinia lorem placerat vulputate.\n  </p>\n</div>\n<p class="cleared">\n  Duis felis orci, pulvinar id metus ut, rutrum luctus orci. Cras porttitor\n  imperdiet nunc, at ultricies tellus laoreet sit amet. Sed auctor cursus massa\n  at porta. Integer ligula ipsum, tristique sit amet orci vel, viverra egestas\n  ligula. Curabitur vehicula tellus neque, ac ornare ex malesuada et. In vitae\n  convallis lacus. Aliquam erat volutpat. Suspendisse ac imperdiet turpis.\n  Aenean finibus sollicitudin eros pharetra congue. Duis ornare egestas augue ut\n  luctus. Proin blandit quam nec lacus varius commodo et a urna. Ut id ornare\n  felis, eget fermentum sapien.\n</p>\n\n<p>\n  Nam vulputate diam nec tempor bibendum. Donec luctus augue eget malesuada\n  ultrices. Phasellus turpis est, posuere sit amet dapibus ut, facilisis sed\n  est. Nam id risus quis ante semper consectetur eget aliquam lorem. Vivamus\n  tristique elit dolor, sed pretium metus suscipit vel. Mauris ultricies lectus\n  sed lobortis finibus. Vivamus eu urna eget velit cursus viverra quis\n  vestibulum sem. Aliquam tincidunt eget purus in interdum. Cum sociis natoque\n  penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 90%;\n  max-width: 900px;\n  margin: 0 auto;\n  font:\n    0.9em/1.2 Arial,\n    Helvetica,\n    sans-serif;\n}\n\n.wrapper {\n  background-color: rgb(79, 185, 227);\n  padding: 10px;\n  color: #fff;\n  display: flow-root;\n}\n\n.box {\n  float: left;\n  margin: 15px;\n  width: 150px;\n  height: 150px;\n  border-radius: 5px;\n  background-color: rgb(207, 232, 220);\n  padding: 1em;\n}\n</pre></div><div class="code-example" id="sect13"><div class="example-header" id="sect14"></div></div></div></section><section aria-labelledby="проверьте_свои_навыки!"><h2 id="проверьте_свои_навыки!"><a>Проверьте свои навыки!</a></h2><div class="section-content"><p>Вы достигли конца этой статьи, но помните ли вы самую важную информацию? Вы можете найти дополнительные тесты, чтобы убедиться, что вы усвоили эту информацию, прежде чем двигаться дальше — см. <a>Проверка ваших навыков: Floats</a>.</p></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Теперь вы знаете все, что нужно знать о float в современной веб-разработке. См. Статью об <a class="only-in-en-us" title="Currently only available in English (US)">устаревших методах макета <small>(en-US)<small></small></small></a> устаревших методах макета для получения информации о том, как они использовались раньше, что может быть полезно, если вы работаете над старыми проектами.</p></div></section>',
					works: [],
				},
				{
					title: 'Позиционирование',
					chapter: 2.38,
					content:
						'<header><h1>Позиционирование</h1></header><div class="section-content">\n<p>Позиционирование позволяет вам изымать элементы из нормального потока макета документа и заставить их вести себя по-другому; например, располагаться друг на друге или всегда оставаться на одном и том же месте внутри окна просмотра браузера. Эта статья объясняет разные значения <a><code>position</code></a> и как их использовать.</p>\n\n<p>Нам бы хотелось чтобы вы следовали за нами с упражнениями на вашем локальном ПК, если возможно возьмите копию <a class="external" target="_blank"><code>0_basic-flow.html</code></a> из нашего GitHub репозитория (<a class="external" target="_blank">исходный код здесь</a>) и используйте его как отправную точку.</p></div><section aria-labelledby="введение_в_позиционирование"><h2 id="введение_в_позиционирование"><a>Введение в позиционирование</a></h2><div class="section-content"><p>Вся идея позиционирования заключается в том, чтобы позволить нам переопределять поведение базового потока документа, описанного выше, для того чтобы производить интересные эффекты. Что если вам захочется слегка изменить позицию каких-либо блоков внутри макета относительно их позиции в потоке макета по умолчанию? Ваш инструмент - позиционирование. Или если вы хотите создать элемент пользовательского интерфейса, который плавает над другими частями страницы и/или всегда располагается на одном и том же месте в окне браузера не зависимо от того сколько прокручивалась страница? Позиционирование делает возможным работу таких макетов.</p>\n<p>Существует несколько разных типов позиционирования, которые вы можете применить к элементам HTML. Для активации специфического типа позиционирования у элемента, мы используем свойство <a><code>position</code></a>.</p></div></section><section aria-labelledby="статическое_позиционирование"><h3 id="статическое_позиционирование"><a>Статическое позиционирование</a></h3><div class="section-content"><p>Статическое позиционирование — это умолчание, которое получает каждый элемент, что всего лишь значит "поставить элемент в его нормальное положение в потоке макета документа — ничего особенного для рассмотрения".</p>\n<p>Чтобы продемонстрировать это и настроить ваш образец для будущих разделов, сначала добавьте <code>class</code> <code>positioned</code> ко второму <a><code>&lt;p&gt;</code></a> в HTML:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p class="positioned">...</p>\n</pre></div>\n<p>А теперь добавьте следующее правило в конец вашего CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.positioned {\n  position: static;\n  background: yellow;\n}\n</pre></div>\n<p>И если вы сейчас сохраните и обновите, то вы не увидите никаких изменений, не считая обновлённого цвета фона 2-го параграфа. Это нормально, как мы и говорили ранее, статическое позиционирование является поведением по умолчанию!</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> вы можете посмотреть живой пример на данном этапе на <a class="external" target="_blank"><code>1_static-positioning.html</code></a> (<a class="external" target="_blank">см. исходный код</a>).</p>\n</div></div></section><section aria-labelledby="относительное_позиционирование"><h3 id="относительное_позиционирование"><a>Относительное позиционирование</a></h3><div class="section-content"><p>Относительное позиционирование первый тип позиции, который мы рассмотрим. Оно очень похоже на статическое позиционирование, за исключением того что вы можете модифицировать окончательное положение позиционируемого объекта занявшего своё место в макете нормального потока, в том числе заставлять его перекрывать другие элементы на странице. Двигайтесь далее и обновите объявление <code>position</code> в вашем коде:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">position: relative;\n</pre></div>\n<p>Если вы сохраните и обновите на данном этапе, в результате вы совсем не увидите изменений. Так как же вам модифицировать положение? Вам необходимо использовать свойства <a><code>top</code></a>, <a><code>bottom</code></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>left</code> <small>(en-US)</small></a>, и <a><code>right</code></a> которые мы объясним в следующем разделе.</p></div></section><section aria-labelledby="введение_в_top_bottom_left_и_right"><h3 id="введение_в_top_bottom_left_и_right"><a>Введение в top, bottom, left, и right</a></h3><div class="section-content"><p><a><code>top</code></a>, <a><code>bottom</code></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>left</code> <small>(en-US)</small></a>, и <a><code>right</code></a> используются вместе с <a><code>position</code></a> чтобы указать куда именно перемещать позиционируемый элемент. Для того чтобы попробовать, добавьте следующее объявление к правилу <code>.positioned</code> в вашем CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">top: 30px;\nleft: 30px;\n</pre></div>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> значения этих свойств могут принимать любые <a>единицы</a> которые вы ожидаете по логике: пиксели, мм, rems, %, и т.д.</p>\n</div>\n<p>Если вы сейчас сохраните и обновите, вы получите примерно такой результат:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Relative positioning</h1>\n\n<p>\n  I am a basic block level element. My adjacent block level elements sit on new\n  lines below me.\n</p>\n\n<p class="positioned">\n  By default we span 100% of the width of our parent element, and we are as tall\n  as our child content. Our total width and height is our content + padding +\n  border width/height.\n</p>\n\n<p>\n  We are separated by our margins. Because of margin collapsing, we are\n  separated by the width of one of our margins, not both.\n</p>\n\n<p>\n  inline elements <span>like this one</span> and <span>this one</span> sit on\n  the same line as one another, and adjacent text nodes, if there is space on\n  the same line. Overflowing inline elements\n  <span>wrap onto a new line if possible — like this one containing text</span>,\n  or just go on to a new line if not, much like this image will do:\n  <img src="long.jpg">\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 500px;\n  margin: 0 auto;\n}\n\np {\n  background: aqua;\n  border: 3px solid blue;\n  padding: 10px;\n  margin: 10px;\n}\n\nspan {\n  background: red;\n  border: 1px solid black;\n}\n\n.positioned {\n  position: relative;\n  background: yellow;\n  top: 30px;\n  left: 30px;\n}\n</pre></div><div class="code-example" id="sect3"><div class="example-header" id="sect4"></div></div>\n<p>Круто, правда? Хорошо, вероятно это не то, чего вы ожидали — почему он переместился вниз и вправо, когда мы указали вверх и влево? Как бы нелогично это ни звучало это всего лишь способ того как работает позиционирование — вам надо думать о невидимой силе толкающей указанную сторону позиционируемого блока, перемещая его в противоположную сторону. Так, например, если вы указали <code>top: 30px;</code>, сила толкает блок, заставляя его перемещаться вниз на 30px.</p>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> вы можете посмотреть пример на этом этапе на <a class="external" target="_blank"><code>2_relative-positioning.html</code></a> (<a class="external" target="_blank">см. исходный код</a>).</p>\n</div></div></section><section aria-labelledby="абсолютное_позиционирование"><h3 id="абсолютное_позиционирование"><a>Абсолютное позиционирование</a></h3><div class="section-content"><p>Абсолютное позиционирование даёт совершенно другие результаты. Давайте попробуем изменить объявление позиции в вашем коде как показано ниже:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">position: absolute;\n</pre></div>\n<p>Если вы сохраните и обновите, то вы должны увидеть нечто подобное:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Absolute positioning</h1>\n\n<p>\n  I am a basic block level element. My adjacent block level elements sit on new\n  lines below me.\n</p>\n\n<p class="positioned">\n  By default we span 100% of the width of our parent element, and we are as tall\n  as our child content. Our total width and height is our content + padding +\n  border width/height.\n</p>\n\n<p>\n  We are separated by our margins. Because of margin collapsing, we are\n  separated by the width of one of our margins, not both.\n</p>\n\n<p>\n  inline elements <span>like this one</span> and <span>this one</span> sit on\n  the same line as one another, and adjacent text nodes, if there is space on\n  the same line. Overflowing inline elements\n  <span>wrap onto a new line if possible — like this one containing text</span>,\n  or just go on to a new line if not, much like this image will do:\n  <img src="long.jpg">\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 500px;\n  margin: 0 auto;\n}\n\np {\n  background: aqua;\n  border: 3px solid blue;\n  padding: 10px;\n  margin: 10px;\n}\n\nspan {\n  background: red;\n  border: 1px solid black;\n}\n\n.positioned {\n  position: absolute;\n  background: yellow;\n  top: 30px;\n  left: 30px;\n}\n</pre></div><div class="code-example" id="sect6"><div class="example-header" id="sect7"></div></div>\n<p>В первую очередь обратите внимание на то, что интервал там, где должен быть позиционируемый элемент в потоке документа теперь отсутствует — первый и третий элементы сблизились так будто, он больше не существует! Ну, в каком-то смысле это правда. Абсолютно позиционированный элемент больше не существует в нормальном потоке макета документа. Вместо этого он располагается на своём собственном слое отдельно от всего остального. Это очень полезно: это значит, что мы можем создавать изолированные функции пользовательского интерфейса, которые не влияют на макет других элементов страницы. Например, всплывающие информационные блоки и меню управления; опрокидывающиеся панели; функции пользовательского интерфейса, которые можно перетаскивать в любом месте страницы; и так далее...</p>\n<p>Во-вторых, обратите внимание, что позиция элемента изменилась — это потому, что <a><code>top</code></a>, <a><code>bottom</code></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>left</code> <small>(en-US)</small></a>, и <a><code>right</code></a> ведут себя по-другому с абсолютным позиционированием. Вместо того, чтобы позиционировать элемент на основе его относительного положения в обычном потоке макета документа, они определяют расстояние, на котором элемент должен находиться от каждой из сторон содержащего элемента. Поэтому в этом случае мы говорим, что абсолютно позиционированный элемент должен располагаться в 30px от верха "содержащего элемента" и 30px от левого края (В этом случае "содержащий элемент" является <strong>исходным содержащим блоком</strong>. См. раздел ниже для дополнительной информации).</p>\n<div class="notecard note" id="sect8">\n  <p><strong>Примечание:</strong> вы можете использовать <a><code>top</code></a>, <a><code>bottom</code></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>left</code> <small>(en-US)</small></a>, и <a><code>right</code></a> для изменения размера элемента если вам надо. Попробуйте установить <code>top: 0; bottom: 0; left: 0; right: 0;</code> и <code>margin: 0;</code> для вашего позиционируемого элемента и посмотрите, что произойдёт! Потом снова все верните...</p>\n</div>\n<div class="notecard note" id="sect9">\n  <p><strong>Примечание:</strong> Да, margin-ы все ещё влияют на позиционируемый элемент. Однако, схлопывания margin не происходит.</p>\n</div>\n<div class="notecard note" id="sect10">\n  <p><strong>Примечание:</strong> вы можете посмотреть пример на этом этапе на <a class="external" target="_blank"><code>3_absolute-positioning.html</code></a> (<a class="external" target="_blank">см. исходный код</a>).</p>\n</div></div></section><section aria-labelledby="контекст_позиционирования"><h3 id="контекст_позиционирования"><a>Контекст позиционирования</a></h3><div class="section-content"><p>Какой элемент является "содержащим" относительно абсолютно позиционируемого элемента? Это очень сильно зависит от свойства позиции предка позиционируемого элемента (см. <a>Определение содержащего блока</a>).</p>\n<p>Если никакие из элементов предков не имеют конкретно заданного свойства позиции, то по умолчанию все элементы предков будут иметь статическую позицию. В результате этого абсолютно позиционируемый элемент будет содержаться в <strong>исходным содержащем блоке</strong>. Исходный содержащий блок имеет размеры области просмотра, а также является блоком, содержащим элемент <a><code>&lt;html&gt;</code></a>. Проще говоря, абсолютно позиционируемый элемент будет отображаться за пределами элемента <a><code>&lt;html&gt;</code></a> и будет расположен относительно исходного окна просмотра.</p>\n<p>Позиционируемый элемент вложен в <a><code>&lt;body&gt;</code></a> в исходном HTML, но в конечном макете он расположен на 30px от верхнего и левого края страницы. Мы можем изменить <strong>контекст</strong> <strong>позиционирования</strong> — относительно какого элемента позиционируется позиционируемый элемент. Это делается путём установки позиционирования на одном из предков элемента — на один из элементов, внутри которого он вложен (вы не можете позиционировать его относительно элемента, внутри которого он НЕ вложен). Чтобы продемонстрировать это, добавьте следующее объявление в правило вашего <code>body</code>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">position: relative;\n</pre></div>\n<p>Это должно дать следующий результат:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Positioning context</h1>\n\n<p>\n  I am a basic block level element. My adjacent block level elements sit on new\n  lines below me.\n</p>\n\n<p class="positioned">\n  Now I\'m absolutely positioned relative to the\n  <code>&lt;body&gt;</code> element, not the <code>&lt;html&gt;</code> element!\n</p>\n\n<p>\n  We are separated by our margins. Because of margin collapsing, we are\n  separated by the width of one of our margins, not both.\n</p>\n\n<p>\n  inline elements <span>like this one</span> and <span>this one</span> sit on\n  the same line as one another, and adjacent text nodes, if there is space on\n  the same line. Overflowing inline elements\n  <span>wrap onto a new line if possible — like this one containing text</span>,\n  or just go on to a new line if not, much like this image will do:\n  <img src="long.jpg">\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 500px;\n  margin: 0 auto;\n  position: relative;\n}\n\np {\n  background: aqua;\n  border: 3px solid blue;\n  padding: 10px;\n  margin: 10px;\n}\n\nspan {\n  background: red;\n  border: 1px solid black;\n}\n\n.positioned {\n  position: absolute;\n  background: yellow;\n  top: 30px;\n  left: 30px;\n}\n</pre></div><div class="code-example" id="sect11"><div class="example-header" id="sect12"></div></div>\n<p>Позиционируемый элемент теперь располагается относительно элемента <a><code>&lt;body&gt;</code></a>.</p>\n<div class="notecard note" id="sect13">\n  <p><strong>Примечание:</strong> вы можете посмотреть живой пример на этом этапе на <a class="external" target="_blank"><code>4_positioning-context.html</code></a> (<a class="external" target="_blank">см. исходный код</a>).</p>\n</div></div></section><section aria-labelledby="введение_в_z-index"><h3 id="введение_в_z-index"><a>Введение в z-index</a></h3><div class="section-content"><p>Все это абсолютное позиционирование — хорошее развлечение, но кое-что чего мы ещё не рассмотрели — когда элементы начинают перекрываться, что определяет который из элементов будет появляться поверх другого элемента? В примере, который мы видели все это время, у нас имеется только один позиционируемый элемент в контексте позиционирования, и он появляется сверху поскольку позиционируемые элементы "побеждают" не позиционированные элементы. Что же насчёт того, когда мы имеем более одного?</p>\n<p>Попробуйте добавить следующий CSS, чтобы сделать первый параграф так же абсолютно позиционированным:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p:nth-of-type(1) {\n  position: absolute;\n  background: lime;\n  top: 10px;\n  right: 30px;\n}\n</pre></div>\n<p>На этом этапе вы увидите, что первый параграф окрашенный в лаймовый изъят из потока документа и помещён чуточку выше того места, где он был исходно. А также он расположен под оригинальным параграфом <code>.positioned</code>, где они оба перекрываются. Это потому что параграф <code>.positioned</code> является вторым параграфом по порядку в источнике и позже позиционируемые элементы в порядке источника выигрывают над ранее позиционируемыми элементами в порядке источника.</p>\n<p>Можете ли вы изменить порядок наложения? Да, можете, используя свойство <a><code>z-index</code></a>. "z-index" это ссылка к z-оси. Вы можете вспомнить из предыдущих этапов в этом курсе, где мы обсуждали использование горизонтальных (x-ось) и вертикальных (y-оси) координат веб-страницами для определения позиции для таких вещей, как фоновые изображения и смещение теней. (0,0) находится наверху слева страницы (или элемента) и оси x- и y- направляются направо и вниз страницы (во всяком случае, для языков, направленных слева на право).</p>\n<p>У веб-страниц также имеется z-ось: воображаемая линия, которая направляется от поверхности вашего экрана к вашему лицу (или что ещё вам нравится иметь перед экраном). Значения <a><code>z-index</code></a> влияют на то где позиционируемый элемент располагается на этой оси; положительные значения перемещают их выше по наложению, а отрицательные значения перемещают их ниже по наложению. По умолчанию все позиционируемые элементы имеют <code>z-index</code> <code>auto</code>, что фактически равно 0.</p>\n<p>Для того чтобы изменить порядок наложения, попробуйте объявить для вашего <code>p:nth-of-type(1)</code> правила:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">z-index: 1;\n</pre></div>\n<p>Теперь вы должны видеть законченный пример, с параграфом лаймового цвета сверху:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>z-index</h1>\n\n<p>\n  I am a basic block level element. My adjacent block level elements sit on new\n  lines below me.\n</p>\n\n<p class="positioned">\n  Now I\'m absolutely positioned relative to the\n  <code>&lt;body&gt;</code> element, not the <code>&lt;html&gt;</code> element!\n</p>\n\n<p>\n  We are separated by our margins. Because of margin collapsing, we are\n  separated by the width of one of our margins, not both.\n</p>\n\n<p>\n  inline elements <span>like this one</span> and <span>this one</span> sit on\n  the same line as one another, and adjacent text nodes, if there is space on\n  the same line. Overflowing inline elements\n  <span>wrap onto a new line if possible — like this one containing text</span>,\n  or just go on to a new line if not, much like this image will do:\n  <img src="long.jpg">\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 500px;\n  margin: 0 auto;\n  position: relative;\n}\n\np {\n  background: aqua;\n  border: 3px solid blue;\n  padding: 10px;\n  margin: 10px;\n}\n\nspan {\n  background: red;\n  border: 1px solid black;\n}\n\n.positioned {\n  position: absolute;\n  background: yellow;\n  top: 30px;\n  left: 30px;\n}\n\np:nth-of-type(1) {\n  position: absolute;\n  background: lime;\n  top: 10px;\n  right: 30px;\n  z-index: 1;\n}\n</pre></div><div class="code-example" id="sect14"><div class="example-header" id="sect15"></div></div>\n<p>Обратите внимание что <code>z-index</code> принимает значения индекса только без единиц измерения; вы не можете задавать значения, что хотите, чтобы какой-то элемент был на 23 пикселя выше по z-оси — это так не работает. Более высокие значения будут располагаться над меньшими значениями и от вас зависит какие значения вы используете. Используя 2 и 3, вы получите тот же эффект что и 300 и 40000.</p>\n<div class="notecard note" id="sect16">\n  <p><strong>Примечание:</strong> вы можете посмотреть живой пример на этом этапе на <a class="external" target="_blank"><code>5_z-index.html</code></a> (<a class="external" target="_blank">см. исходный код</a>).</p>\n</div></div></section><section aria-labelledby="фиксированное_позиционированиее"><h3 id="фиксированное_позиционированиее"><a>Фиксированное позиционированиее</a></h3><div class="section-content"><p>А теперь давайте посмотрим на фиксированное позиционирование. Оно работает точно также как и абсолютное позиционирование, одним ключевым отличием: в то время как абсолютное позиционирование фиксирует элемент в месте относительно его ближайшего позиционированного предка (исходный содержащий блок если нет иного), <strong>фиксированное позиционирование</strong> <em>обычно</em> фиксирует элемент в месте относительно видимой части области просмотра, кроме случаев, когда один из его потомков является фиксированным блоком из-за того, что его <a>свойству transform</a> отличается от none. Это значит, что вы можете создать элементы пользовательского интерфейса, которые зафиксированы на месте, как постоянные меню навигации, которые всегда видимы вне зависимости от того сколько прокручивается страница.</p>\n<p>Давайте составим простой пример, чтобы показать, что мы имеем в виду. Во-первых, удалите существующие правила <code>p:nth-of-type(1)</code> и <code>.positioned</code> из вашего CSS.</p>\n<p>А теперь, обновите правило <code>body</code> удалив объявление <code>position: relative;</code> и добавьте фиксированную высоту как тут:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">body {\n  width: 500px;\n  height: 1400px;\n  margin: 0 auto;\n}\n</pre></div>\n<p>Теперь мы собираемся дать элементу <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a> <code>position: fixed;</code>, а также заставить его располагаться на верху окна просмотра. Добавьте следующее правило в ваш CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">h1 {\n  position: fixed;\n  top: 0;\n  width: 500px;\n  margin-top: 0;\n  background: white;\n  padding: 10px;\n}\n</pre></div>\n<p><code>top: 0;</code> необходим чтобы приклеить его к верху экрана. мы дали заголовку ту же ширину что и колонкам с контентом и затем даём ему белый фон и немного padding и margin, чтобы контент не был видимым под ним.</p>\n<p>Если вы сохраните и обновите сейчас, вы увидите маленький забавный эффект, при котором заголовок останется неизменным, а содержимое будет прокручиваться вверх и исчезать под ним. Но мы можем улучшить это — в данный момент некоторый контент начинается под заголовком. Это из-за того, что позиционируемый заголовок больше не появляется в потоке документа, поэтому остальное содержимое поднимается наверх. Нам надо сдвинуть все это немного вниз; мы можем сделать это установив немного верхнего margin к первому параграфу. Добавьте его сейчас:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p:nth-of-type(1) {\n  margin-top: 60px;\n}\n</pre></div>\n<p>Теперь вы должны видеть законченный пример:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Fixed positioning</h1>\n\n<p>\n  I am a basic block level element. My adjacent block level elements sit on new\n  lines below me.\n</p>\n\n<p class="positioned">I\'m not positioned any more...</p>\n\n<p>\n  We are separated by our margins. Because of margin collapsing, we are\n  separated by the width of one of our margins, not both.\n</p>\n\n<p>\n  inline elements <span>like this one</span> and <span>this one</span> sit on\n  the same line as one another, and adjacent text nodes, if there is space on\n  the same line. Overflowing inline elements\n  <span>wrap onto a new line if possible — like this one containing text</span>,\n  or just go on to a new line if not, much like this image will do:\n  <img src="long.jpg">\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 500px;\n  height: 1400px;\n  margin: 0 auto;\n}\n\np {\n  background: aqua;\n  border: 3px solid blue;\n  padding: 10px;\n  margin: 10px;\n}\n\nspan {\n  background: red;\n  border: 1px solid black;\n}\n\nh1 {\n  position: fixed;\n  top: 0px;\n  width: 500px;\n  background: white;\n  padding: 10px;\n}\n\np:nth-of-type(1) {\n  margin-top: 60px;\n}\n</pre></div><div class="code-example" id="sect17"><div class="example-header" id="sect18"></div></div>\n<div class="notecard note" id="sect19">\n  <p><strong>Примечание:</strong> вы можете посмотреть живой пример на этом этапе на <a class="external" target="_blank"><code>6_fixed-positioning.html</code></a> (<a class="external" target="_blank">см. исходный код</a>).</p>\n</div></div></section><section aria-labelledby="position_sticky"><h3 id="position_sticky"><a>position: sticky</a></h3><div class="section-content"><p>Доступно другое значение позиции называемое <code>position: sticky</code>, которое несколько новее чем другие. По сути, это гибрид относительной и фиксированной позиции, который позволяет позиционируемому элементу вести себя как будто он относительно позиционирован, до тех пор пока он не будет прокручен до определённой пороговой точки (например, 10px от вершины окна просмотра), после чего он становится фиксированным. Это можно использовать, например, чтобы заставить панель навигации прокручиваться вместе со страницей до определённой точки, а затем задерживать в верхней части страницы.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Sticky positioning</h1>\n\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus aliquam\n  dolor, eu lacinia lorem placerat vulputate. Duis felis orci, pulvinar id metus\n  ut, rutrum luctus orci. Cras porttitor imperdiet nunc, at ultricies tellus\n  laoreet sit amet. Sed auctor cursus massa at porta. Integer ligula ipsum,\n  tristique sit amet orci vel, viverra egestas ligula. Curabitur vehicula tellus\n  neque, ac ornare ex malesuada et. In vitae convallis lacus. Aliquam erat\n  volutpat. Suspendisse ac imperdiet turpis. Aenean finibus sollicitudin eros\n  pharetra congue. Duis ornare egestas augue ut luctus. Proin blandit quam nec\n  lacus varius commodo et a urna. Ut id ornare felis, eget fermentum sapien.\n</p>\n\n<div class="positioned">Sticky</div>\n\n<p>\n  Nam vulputate diam nec tempor bibendum. Donec luctus augue eget malesuada\n  ultrices. Phasellus turpis est, posuere sit amet dapibus ut, facilisis sed\n  est. Nam id risus quis ante semper consectetur eget aliquam lorem. Vivamus\n  tristique elit dolor, sed pretium metus suscipit vel. Mauris ultricies lectus\n  sed lobortis finibus. Vivamus eu urna eget velit cursus viverra quis\n  vestibulum sem. Aliquam tincidunt eget purus in interdum. Cum sociis natoque\n  penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n</p>\n\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus aliquam\n  dolor, eu lacinia lorem placerat vulputate. Duis felis orci, pulvinar id metus\n  ut, rutrum luctus orci. Cras porttitor imperdiet nunc, at ultricies tellus\n  laoreet sit amet. Sed auctor cursus massa at porta. Integer ligula ipsum,\n  tristique sit amet orci vel, viverra egestas ligula. Curabitur vehicula tellus\n  neque, ac ornare ex malesuada et. In vitae convallis lacus. Aliquam erat\n  volutpat. Suspendisse ac imperdiet turpis. Aenean finibus sollicitudin eros\n  pharetra congue. Duis ornare egestas augue ut luctus. Proin blandit quam nec\n  lacus varius commodo et a urna. Ut id ornare felis, eget fermentum sapien.\n</p>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 500px;\n  margin: 0 auto;\n}\n\n.positioned {\n  background: rgba(255, 84, 104, 0.3);\n  border: 2px solid rgb(255, 84, 104);\n  padding: 10px;\n  margin: 10px;\n  border-radius: 5px;\n}\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.positioned {\n  position: sticky;\n  top: 30px;\n  left: 30px;\n}\n</pre></div><div class="code-example" id="sect20"><div class="example-header" id="sect21"></div></div>\n<p>Интересное и общее использование <code>position: sticky</code> заключается в создании индексных страниц с прокруткой, где разные заголовки липнут к верху страницы, когда они достигают его. Разметка такого примера может выглядеть так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><h1>Sticky positioning</h1>\n\n<dl>\n  <dt>A</dt>\n  <dd>Apple</dd>\n  <dd>Ant</dd>\n  <dd>Altimeter</dd>\n  <dd>Airplane</dd>\n  <dt>B</dt>\n  <dd>Bird</dd>\n  <dd>Buzzard</dd>\n  <dd>Bee</dd>\n  <dd>Banana</dd>\n  <dd>Beanstalk</dd>\n  <dt>C</dt>\n  <dd>Calculator</dd>\n  <dd>Cane</dd>\n  <dd>Camera</dd>\n  <dd>Camel</dd>\n  <dt>D</dt>\n  <dd>Duck</dd>\n  <dd>Dime</dd>\n  <dd>Dipstick</dd>\n  <dd>Drone</dd>\n  <dt>E</dt>\n  <dd>Egg</dd>\n  <dd>Elephant</dd>\n  <dd>Egret</dd>\n</dl>\n</pre></div>\n<p>CSS может выглядеть как показано ниже. В нормальном потоке элементы <a><code>&lt;dt&gt;</code></a> будут прокручиваться вместе с контентом. Когда мы добавляем <code>position: sticky</code> к элементу <a><code>&lt;dt&gt;</code></a>, вместе со значением <a><code>top</code></a> 0, поддерживающие браузеры будут приклеивать заголовки к вершине окна просмотра когда они будут достигать той позиции. каждый последующий заголовок будет затем заменять предыдущий при его прокрутке вверх к той позиции.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">dt {\n  background-color: black;\n  color: white;\n  padding: 10px;\n  position: sticky;\n  top: 0;\n  left: 0;\n  margin: 1em 0;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 500px;\n  height: 1400px;\n  margin: 0 auto;\n}\n\ndt {\n  background-color: black;\n  color: white;\n  padding: 10px;\n  position: sticky;\n  top: 0;\n  left: 0;\n  margin: 1em 0;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h1>Sticky positioning</h1>\n\n<dl>\n  <dt>A</dt>\n  <dd>Apple</dd>\n  <dd>Ant</dd>\n  <dd>Altimeter</dd>\n  <dd>Airplane</dd>\n  <dt>B</dt>\n  <dd>Bird</dd>\n  <dd>Buzzard</dd>\n  <dd>Bee</dd>\n  <dd>Banana</dd>\n  <dd>Beanstalk</dd>\n  <dt>C</dt>\n  <dd>Calculator</dd>\n  <dd>Cane</dd>\n  <dd>Camera</dd>\n  <dd>Camel</dd>\n  <dt>D</dt>\n  <dd>Duck</dd>\n  <dd>Dime</dd>\n  <dd>Dipstick</dd>\n  <dd>Drone</dd>\n  <dt>E</dt>\n  <dd>Egg</dd>\n  <dd>Elephant</dd>\n  <dd>Egret</dd>\n</dl>\n</pre></div><div class="code-example" id="sect22"><div class="example-header" id="sect23"></div></div>\n<p>Липкие элементы являются "липкими" относительно ближайшего предка с "прокручивающимся механизмом", который определяется свойством <a>позиции</a> его предка.</p>\n<div class="notecard note" id="sect24">\n  <p><strong>Примечание:</strong> вы можете посмотреть живой пример на этом этапе на <a class="external" target="_blank"><code>7_sticky-positioning.html</code></a> (<a class="external" target="_blank">см. исходный код</a>).</p>\n</div></div></section><section aria-labelledby="проверь_свои_навыки!"><h2 id="проверь_свои_навыки!"><a>Проверь свои навыки!</a></h2><div class="section-content"><p>Вы достигли конца этой статьи, но помните ли вы самую важную информацию? Вы можете найти дальнейшую проверку что вы усвоили эту информацию прежде чем, отправитесь дальше — см. <a>Проверьте свои навыки: Позиционирование</a>.</p></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Я уверен, что вы повеселились с основами позиционирования; хотя это не является методом, который вы бы использовали для целого макета, всё же как вы видите, существует много задач, подходящих для него.</p></div></section>',
					works: [],
				},
				{
					title: 'Макет с несколькими столбцами',
					chapter: 2.39,
					content:
						'<header><h1>Макет с несколькими столбцами</h1></header><div class="section-content">\n<p>Спецификация макет с несколькими столбцами даёт вам метод вёрстки контента по столбцам, точно также как вы можете видеть в газете. Эта статья объясняет, как использовать эту функцию.</p>\n</div><section aria-labelledby="базовый_пример"><h2 id="базовый_пример"><a>Базовый пример</a></h2><div class="section-content"><p>Сейчас мы будем изучать как использовать макет с несколькими столбцами, часто называемый <em>multicol.</em> Вы можете следовать за нами <a class="external" target="_blank">скачав файл отправной точки multicol</a> и добавлять CSS в соответствующие места. В конце раздела вы можете посмотреть живой пример того, как конечный код должен выглядеть.</p>\n<p>Наша отправная точка содержит немного очень простого HTML; обёртка с классом <code>container</code> внутри которого имеется заголовок и несколько параграфов.</p>\n<p><a><code>&lt;div&gt;</code></a> с классом контейнер станет нашим multicol контейнером. Мы включаем multicol используя одно из двух свойств <a><code>column-count</code></a> или <a class="only-in-en-us" title="Currently only available in English (US)"><code>column-width</code> <small>(en-US)</small></a>. Какое значение вы дадите свойству <code>column-count</code> столько столбцов он и создаст, поэтому если вы добавите следующий CSS в ваши стили и перезагрузите страницу, то получите три столбца:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.container {\n  column-count: 3;\n}\n</pre></div>\n<p>Колонки, которые вы создаёте имеют гибкую ширину — браузер решает какое пространство назначить каждому столбцу.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 90%;\n  max-width: 900px;\n  margin: 2em auto;\n  font:\n    0.9em/1.2 Arial,\n    Helvetica,\n    sans-serif;\n}\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="container">\n  <h1>Simple multicol example</h1>\n\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n    aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci,\n    pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc, at\n    ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta. Integer\n    ligula ipsum, tristique sit amet orci vel, viverra egestas ligula. Curabitur\n    vehicula tellus neque, ac ornare ex malesuada et. In vitae convallis lacus.\n    Aliquam erat volutpat. Suspendisse ac imperdiet turpis. Aenean finibus\n    sollicitudin eros pharetra congue. Duis ornare egestas augue ut luctus.\n    Proin blandit quam nec lacus varius commodo et a urna. Ut id ornare felis,\n    eget fermentum sapien.\n  </p>\n\n  <p>\n    Nam vulputate diam nec tempor bibendum. Donec luctus augue eget malesuada\n    ultrices. Phasellus turpis est, posuere sit amet dapibus ut, facilisis sed\n    est. Nam id risus quis ante semper consectetur eget aliquam lorem. Vivamus\n    tristique elit dolor, sed pretium metus suscipit vel. Mauris ultricies\n    lectus sed lobortis finibus. Vivamus eu urna eget velit cursus viverra quis\n    vestibulum sem. Aliquam tincidunt eget purus in interdum. Cum sociis natoque\n    penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n  </p>\n</div>\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.container {\n  column-count: 3;\n}\n</pre></div><div class="code-example" id="sect1"><div class="example-header" id="sect2"></div></div>\n<p>Измените ваш CSS чтобы использовать следующий <code>column-width</code>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.container {\n  column-width: 200px;\n}\n</pre></div>\n<p>Теперь браузер будет давать столько столбцов размером, который вы определили, сколько он сможет; любое оставшееся пространство далее делится между существующими столбцами. Это значит, что вы не получите точную ширину, которую вы задали, только если ваш контейнер не делится точно на эту ширину.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 90%;\n  max-width: 900px;\n  margin: 2em auto;\n  font:\n    0.9em/1.2 Arial,\n    Helvetica,\n    sans-serif;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><div class="container">\n  <h1>Simple multicol example</h1>\n\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n    aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci,\n    pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc, at\n    ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta. Integer\n    ligula ipsum, tristique sit amet orci vel, viverra egestas ligula. Curabitur\n    vehicula tellus neque, ac ornare ex malesuada et. In vitae convallis lacus.\n    Aliquam erat volutpat. Suspendisse ac imperdiet turpis. Aenean finibus\n    sollicitudin eros pharetra congue. Duis ornare egestas augue ut luctus.\n    Proin blandit quam nec lacus varius commodo et a urna. Ut id ornare felis,\n    eget fermentum sapien.\n  </p>\n\n  <p>\n    Nam vulputate diam nec tempor bibendum. Donec luctus augue eget malesuada\n    ultrices. Phasellus turpis est, posuere sit amet dapibus ut, facilisis sed\n    est. Nam id risus quis ante semper consectetur eget aliquam lorem. Vivamus\n    tristique elit dolor, sed pretium metus suscipit vel. Mauris ultricies\n    lectus sed lobortis finibus. Vivamus eu urna eget velit cursus viverra quis\n    vestibulum sem. Aliquam tincidunt eget purus in interdum. Cum sociis natoque\n    penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n  </p>\n</div>\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.container {\n  column-width: 200px;\n}\n</pre></div><div class="code-example" id="sect3"><div class="example-header" id="sect4"></div></div></div></section><section aria-labelledby="стилизация_столбцов"><h2 id="стилизация_столбцов"><a>Стилизация столбцов</a></h2><div class="section-content"><p>Столбцы, созданные при помощи multicol не могут быть стилизованы по одному. Нет способа сделать один столбец больше, чем другие, или изменить фон или цвет текста одного столбца. У вас есть две возможности изменить способ отображения столбцов:</p>\n<ul>\n  <li>Изменение размера отступов между столбцами используя <a><code>column-gap</code></a>.</li>\n  <li>Добавление линейки между столбцами при помощи <a><code>column-rule</code></a>.</li>\n</ul>\n<p>Используя ваш пример выше, измените размер отступа добавлением свойства <code>column-gap</code>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.container {\n  column-width: 200px;\n  column-gap: 20px;\n}\n</pre></div>\n<p>Вы можете поиграть с разными значениями — свойство принимает любые единицы измерения длины. Теперь добавьте линейку между столбцами при помощи <code>column-rule</code>. Таким же способом как и свойство <a><code>border</code></a> с которым вы сталкивались в предыдущих уроках, <code>column-rule</code> — это короткая запись <a><code>column-rule-color</code></a>, <a><code>column-rule-style</code></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>column-rule-width</code> <small>(en-US)</small></a> и принимает те же значения что и <code>border</code>.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.container {\n  column-count: 3;\n  column-gap: 20px;\n  column-rule: 4px dotted rgb(79, 185, 227);\n}\n</pre></div>\n<p>Попробуйте добавить линейки других стилей и цветов.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 90%;\n  max-width: 900px;\n  margin: 2em auto;\n  font:\n    0.9em/1.2 Arial,\n    Helvetica,\n    sans-serif;\n}\n.container {\n  column-count: 3;\n  column-gap: 20px;\n  column-rule: 4px dotted rgb(79, 185, 227);\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><div class="container">\n  <h1>Simple multicol example</h1>\n\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n    aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci,\n    pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc, at\n    ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta. Integer\n    ligula ipsum, tristique sit amet orci vel, viverra egestas ligula. Curabitur\n    vehicula tellus neque, ac ornare ex malesuada et. In vitae convallis lacus.\n    Aliquam erat volutpat. Suspendisse ac imperdiet turpis. Aenean finibus\n    sollicitudin eros pharetra congue. Duis ornare egestas augue ut luctus.\n    Proin blandit quam nec lacus varius commodo et a urna. Ut id ornare felis,\n    eget fermentum sapien.\n  </p>\n\n  <p>\n    Nam vulputate diam nec tempor bibendum. Donec luctus augue eget malesuada\n    ultrices. Phasellus turpis est, posuere sit amet dapibus ut, facilisis sed\n    est. Nam id risus quis ante semper consectetur eget aliquam lorem. Vivamus\n    tristique elit dolor, sed pretium metus suscipit vel. Mauris ultricies\n    lectus sed lobortis finibus. Vivamus eu urna eget velit cursus viverra quis\n    vestibulum sem. Aliquam tincidunt eget purus in interdum. Cum sociis natoque\n    penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n  </p>\n</div>\n</pre></div><div class="code-example" id="sect5"><div class="example-header" id="sect6"></div></div>\n<p>Следует обратить внимание на то, что линейка не занимает никакой ширины. Она располагается в промежутках, которые вы создали при помощи <code>column-gap</code>. Чтобы придать больше пространства по обе стороны от линейки, вам нужно увеличить размер <code>column-gap</code>.</p></div></section><section aria-labelledby="свойств_column-span"><h2 id="свойств_column-span"><a>Свойств column-span</a></h2><div class="section-content"><p>Вы можете заставить элемент растянуться через все столбцы. В этом случае контент разрывается, когда сталкивается со spanning элементом и продолжается ниже, создавая новый набор блоков столбцов. Чтобы растянуть элемент через все столбцы используйте свойство <a class="only-in-en-us" title="Currently only available in English (US)"><code>column-span</code> <small>(en-US)</small></a> установленное на значение <code>all</code>.</p>\n<div class="notecard note" id="sect7">\n  <p><strong>Примечание:</strong> Обратите внимание что невозможно растянуть элемент через несколько столбцов. Это свойство может иметь либо значение <code>none</code> (по умолчанию) либо <code>all</code>.</p>\n</div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 90%;\n  max-width: 900px;\n  margin: 2em auto;\n  font:\n    0.9em/1.2 Arial,\n    Helvetica,\n    sans-serif;\n}\n.container {\n  column-count: 3;\n  column-gap: 20px;\n  column-rule: 4px dotted rgb(79, 185, 227);\n}\nh2 {\n  column-span: all;\n  background-color: rgb(79, 185, 227);\n  color: white;\n  padding: 0.5em;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><div class="container">\n  <h1>Simple multicol example</h1>\n\n  <p> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus aliquam dolor, eu lacinia lorem placerat vulputate.\n  Duis felis orci, pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc, at ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta. Integer ligula ipsum, tristique sit amet orci vel, viverra egestas ligula.\n\n  </p><h2>Spanning subhead</h2>\n  Curabitur vehicula tellus neque, ac ornare ex malesuada et. In vitae convallis lacus. Aliquam erat volutpat. Suspendisse\n  ac imperdiet turpis. Aenean finibus sollicitudin eros pharetra congue. Duis ornare egestas augue ut luctus. Proin blandit\n  quam nec lacus varius commodo et a urna. Ut id ornare felis, eget fermentum sapien.<p></p>\n\n  <p>Nam vulputate diam nec tempor bibendum. Donec luctus augue eget malesuada ultrices. Phasellus turpis est, posuere sit amet dapibus ut, facilisis sed est. Nam id risus quis ante semper consectetur eget aliquam lorem. Vivamus tristique\n  elit dolor, sed pretium metus suscipit vel. Mauris ultricies lectus sed lobortis finibus. Vivamus eu urna eget velit\n  cursus viverra quis vestibulum sem. Aliquam tincidunt eget purus in interdum. Cum sociis natoque penatibus et magnis\n  dis parturient montes, nascetur ridiculus mus.</p>\n</div>\n</pre></div><div class="code-example" id="sect8"><div class="example-header" id="sect9"></div></div></div></section><section aria-labelledby="столбцы_и_фрагментация"><h2 id="столбцы_и_фрагментация"><a>Столбцы и фрагментация</a></h2><div class="section-content"><p>Содержимое макета нескольких столбцов является фрагментированным. По сути, он ведёт себя так же, как контент в постраничных медиа — так же, как когда вы печатаете веб-страницы. Когда вы переводите ваш контент в multicol контейнер он фрагментируется на столбцы и контент разбивается чтобы позволить этому произойти.</p>\n<p>Порой это разрывание происходит в местах, мешающих чтению. В живом примере ниже, я использовал multicol чтобы разместить несколько блоков, каждый из которых имеет заголовок и немного текста внутри. Заголовок отделяется от текста, если столбцы разделяются между ними.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 90%;\n  max-width: 900px;\n  margin: 2em auto;\n  font:\n    0.9em/1.2 Arial,\n    Helvetica,\n    sans-serif;\n}\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="container">\n  <div class="card">\n    <h2>I am the heading</h2>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n      aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci,\n      pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc,\n      at ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta.\n      Integer ligula ipsum, tristique sit amet orci vel, viverra egestas ligula.\n    </p>\n  </div>\n\n  <div class="card">\n    <h2>I am the heading</h2>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n      aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci,\n      pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc,\n      at ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta.\n      Integer ligula ipsum, tristique sit amet orci vel, viverra egestas ligula.\n    </p>\n  </div>\n\n  <div class="card">\n    <h2>I am the heading</h2>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n      aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci,\n      pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc,\n      at ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta.\n      Integer ligula ipsum, tristique sit amet orci vel, viverra egestas ligula.\n    </p>\n  </div>\n  <div class="card">\n    <h2>I am the heading</h2>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n      aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci,\n      pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc,\n      at ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta.\n      Integer ligula ipsum, tristique sit amet orci vel, viverra egestas ligula.\n    </p>\n  </div>\n\n  <div class="card">\n    <h2>I am the heading</h2>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n      aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci,\n      pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc,\n      at ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta.\n      Integer ligula ipsum, tristique sit amet orci vel, viverra egestas ligula.\n    </p>\n  </div>\n\n  <div class="card">\n    <h2>I am the heading</h2>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n      aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci,\n      pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc,\n      at ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta.\n      Integer ligula ipsum, tristique sit amet orci vel, viverra egestas ligula.\n    </p>\n  </div>\n\n  <div class="card">\n    <h2>I am the heading</h2>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n      aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci,\n      pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc,\n      at ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta.\n      Integer ligula ipsum, tristique sit amet orci vel, viverra egestas ligula.\n    </p>\n  </div>\n</div>\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.container {\n  column-width: 250px;\n  column-gap: 20px;\n}\n\n.card {\n  background-color: rgb(207, 232, 220);\n  border: 2px solid rgb(79, 185, 227);\n  padding: 10px;\n  margin: 0 0 1em 0;\n}\n</pre></div><div class="code-example" id="sect10"><div class="example-header" id="sect11"></div></div>\n<p>Для того чтобы управлять этим поведением мы можем использовать свойства из спецификации <a class="only-in-en-us" title="Currently only available in English (US)">CSS Фрагментации <small>(en-US)<small></small></small></a>. Эта спецификация даёт нам свойства для управления разрывами контента в multicol и постраничных медиа. Например, добавьте свойство <a class="only-in-en-us" title="Currently only available in English (US)"><code>break-inside</code> <small>(en-US)</small></a> со значением <code>avoid</code> к правилам <code>.card</code>. Это контейнер заголовка и текста и поэтому мы не хотим фрагментировать этот блок.</p>\n<p>В настоящее время также стоит добавлять старое свойство <code>page-break-inside: avoid</code> для лучшей поддержки старых браузеров.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.card {\n  break-inside: avoid;\n  page-break-inside: avoid;\n  background-color: rgb(207, 232, 220);\n  border: 2px solid rgb(79, 185, 227);\n  padding: 10px;\n  margin: 0 0 1em 0;\n}\n</pre></div>\n<p>Перезагрузите страницу и ваши блоки должны остаться в целости.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  width: 90%;\n  max-width: 900px;\n  margin: 2em auto;\n  font:\n    0.9em/1.2 Arial,\n    Helvetica,\n    sans-serif;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><div class="container">\n  <div class="card">\n    <h2>I am the heading</h2>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n      aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci,\n      pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc,\n      at ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta.\n      Integer ligula ipsum, tristique sit amet orci vel, viverra egestas ligula.\n    </p>\n  </div>\n\n  <div class="card">\n    <h2>I am the heading</h2>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n      aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci,\n      pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc,\n      at ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta.\n      Integer ligula ipsum, tristique sit amet orci vel, viverra egestas ligula.\n    </p>\n  </div>\n\n  <div class="card">\n    <h2>I am the heading</h2>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n      aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci,\n      pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc,\n      at ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta.\n      Integer ligula ipsum, tristique sit amet orci vel, viverra egestas ligula.\n    </p>\n  </div>\n  <div class="card">\n    <h2>I am the heading</h2>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n      aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci,\n      pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc,\n      at ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta.\n      Integer ligula ipsum, tristique sit amet orci vel, viverra egestas ligula.\n    </p>\n  </div>\n\n  <div class="card">\n    <h2>I am the heading</h2>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n      aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci,\n      pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc,\n      at ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta.\n      Integer ligula ipsum, tristique sit amet orci vel, viverra egestas ligula.\n    </p>\n  </div>\n\n  <div class="card">\n    <h2>I am the heading</h2>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n      aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci,\n      pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc,\n      at ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta.\n      Integer ligula ipsum, tristique sit amet orci vel, viverra egestas ligula.\n    </p>\n  </div>\n\n  <div class="card">\n    <h2>I am the heading</h2>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus\n      aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci,\n      pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc,\n      at ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta.\n      Integer ligula ipsum, tristique sit amet orci vel, viverra egestas ligula.\n    </p>\n  </div>\n</div>\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.container {\n  column-width: 250px;\n  column-gap: 20px;\n}\n\n.card {\n  break-inside: avoid;\n  page-break-inside: avoid;\n  background-color: rgb(207, 232, 220);\n  border: 2px solid rgb(79, 185, 227);\n  padding: 10px;\n  margin: 0 0 1em 0;\n}\n</pre></div><div class="code-example" id="sect12"><div class="example-header" id="sect13"></div></div></div></section><section aria-labelledby="проверь_свои_навыки!"><h2 id="проверь_свои_навыки!"><a>Проверь свои навыки!</a></h2><div class="section-content"><p>Вы достигли конца этой статьи, но помните ли вы самую важную информацию? Вы можете найти дальнейшие тесты для проверки того, что вы усвоили эту информацию прежде чем, отправитесь дальше — см. <a>Поверьте свои навыки: Макет с несколькими столбцами</a>.</p></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Вы теперь знаете, как использовать базовые функции макета с несколькими столбцами, ещё один инструмент в вашем распоряжении при выборе метода макета для дизайна который вы строите.</p></div></section>',
					works: [],
				},
				{
					title: 'Отзывчивый дизайн',
					chapter: 2.4,
					content:
						'<header><h1>Отзывчивый дизайн</h1></header><div class="section-content">\n<p>На заре веб-дизайна страницы создавались для экрана определённого размера. Если у пользователя был экран большего или меньшего размера чем ожидал дизайнер, то результат мог быть от нежелательных полос прокрутки, до слишком длинной строки и плохого использования пространства. Поскольку становились доступны много различных размеров экранов, появилась концепция <em>отзывчивого (адаптивного) веб-дизайна</em> <em>(responsive web design</em> (RWD)) — набор методов, которые позволяют веб-страницам менять свой макет и внешний вид в соответствии с разной шириной экрана, разрешением и т.д. Это та самая, идея которая изменила подход к дизайну веба для множества устройств, и в этой статье мы поможем вам понять основные методы, которые вам необходимо знать, чтобы освоить его.</p>\n</div><section aria-labelledby="исторические_макеты_сайтов"><h2 id="исторические_макеты_сайтов"><a>Исторические макеты сайтов</a></h2><div class="section-content"><p>В какой-то момент истории при разработке веб-сайта у вас было два варианта:</p>\n<ul>\n  <li>Вы могли создать <em>жидкий</em> сайт, который будет растягиваться чтобы заполнить окно браузера</li>\n  <li>или сайт с <em>фиксированной шириной</em>, который будет иметь фиксированный размер в пикселях.</li>\n</ul>\n<p>Эти два подхода, как правило, приводили к тому, что веб-сайт лучше всего выглядел на экране человека, создавшего сайт! Жидкий сайт приводил к раздавленному дизайну на маленьких экранах (как видно ниже) и не читаемо длинным строкам на больших.</p>\n<p>\n  \n</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Посмотрите этот простой жидкий макет: <a class="external" target="_blank">пример</a>, <a class="external" target="_blank">исходный код</a>. При просмотре примера, растягивайте и сжимайте окно браузера чтобы увидеть, как это выглядит при разных размерах.</p>\n</div>\n<p>Сайт с фиксированной шириной рисковал иметь горизонтальную полосу прокрутки на экранах меньших чем ширина сайта (как видно ниже) и много белого пространства на краях дизайна на больших экранах.</p>\n<p>\n  \n</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Посмотрите этот простой макет с фиксированной шириной: <a class="external" target="_blank">пример</a>, <a class="external" target="_blank">исходный код</a>. Снова изучите результат по мере изменения размера окна браузера.</p>\n</div>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Скриншоты выше сделаны используя <a class="external" target="_blank">Responsive Design Mode</a> в Firefox DevTools.</p>\n</div>\n<p>Когда мобильный веб стал становиться реальностью с первыми функциональными телефонами, компании желающие охватить мобильники начали создавать в основном специальные мобильные версии своих сайтов, с различными URL (часто что-то наподобие <em>m.example.com</em> или <em>example.mobi</em>). Это означало, что необходимо было разрабатывать и поддерживать в актуальном состоянии две отдельные версии сайта.</p>\n<p>Кроме того, эти мобильные сайты часто предлагали очень урезанный вариант. Поскольку мобильные гаджеты стали мощнее и способными отображать целые веб-сайты, пользователей мобильных устройств раздражало, что они обнаруживали себя запертыми в мобильной версии сайта, неспособные получить доступ к информации, которая, как они знали, есть в полнофункциональной версии сайта.</p></div></section><section aria-labelledby="гибкий_макет_до_отзывчивого_дизайна"><h2 id="гибкий_макет_до_отзывчивого_дизайна"><a>Гибкий макет до отзывчивого дизайна</a></h2><div class="section-content"><p>Было разработано несколько подходов чтобы попытаться разрешить недостатки построения веб-сайтов жидким методом или методом с фиксированной шириной. В 2004 году Камерон Адамс написал пост <a class="external" target="_blank">Resolution dependent layout</a>, описывающий метод создания дизайна который мог бы адаптироваться к разным разрешениям экрана. Этот подход требовал, чтобы JavaScript узнавал разрешение экрана и загружал корректный CSS.</p>\n<p>Зои Миккели Гилленвотер сыграла важную роль в свой работе описав и формализовав различные способы посредствам которых могут быть созданы гибкие сайты, пытаясь найти золотую середину между заполнением экрана или полностью фиксированным размером.</p></div></section><section aria-labelledby="отзывчивый_дизайн"><h2 id="отзывчивый_дизайн"><a>Отзывчивый дизайн</a></h2><div class="section-content"><p>Термин адаптивный дизайн был <a class="external" target="_blank">Придуман Итаном Маркоттом в 2010 году</a> и описывал использование трёх методов в сочетании.</p>\n<ol>\n  <li>Первой была идея жидких сеток, нечто что уже исследовала Гилленвотер, что можно прочитать в статье Маркотта - <a class="external" target="_blank">Fluid Grids</a> (опубликовано в 2009 в A List Apart).</li>\n  <li>Вторым методом была идея <a class="external" target="_blank">жидких изображений</a>. Используя очень простой метод настройки свойства <code>max-width</code> на <code>100%</code>, изображения будут становиться меньше если содержащий столбец становится уже чем изначальный размер изображения, но никогда не становится больше. Это позволяет изображению уменьшаться чтобы соответствовать столбцу гибких размеров, а не перекрываться с ним, но не расти и становиться пиксельным если столбец становится шире изображения.</li>\n  <li>Третьим ключевым компонентом были <a>медиавыражения</a>. Медиавыражения позволяют переключать тип макета применяя только CSS то, что Камерон Адамс исследовал, используя JavaScript. Вместо того чтобы иметь один макет для всех размеров экранов, макет мог изменяться. Боковые панели можно перемещать для маленьких экранов, либо отображать альтернативную навигацию.</li>\n</ol>\n<p>Очень важно понять, что <strong>адаптивный веб-дизайн</strong> — <strong>это не отдельная технология</strong>, это термин используемый, чтобы описать подход к веб-дизайну или набор лучших практик, используемых для создания макета, который может реагировать на используемое устройство для просмотра контента. В первоначальном исследовании Маркотта это означало гибкие сетки (с использованием floats) и медиавыражения, однако почти за 10 лет, прошедших с момента написания этой статьи, адаптивная работа стала стандартом по умолчанию. Современные методы макета CSS отзывчивы по своей сути, и у нас есть новые штучки, встроенные в веб-платформу для того, чтобы делать дизайн отзывчивых сайтов проще.</p>\n<p>Остальная часть этой статьи укажет вам на различные функции веб-платформы, которые вы, возможно, захотите использовать при создании адаптивного сайта.</p></div></section><section aria-labelledby="медиавыражения"><h2 id="медиавыражения"><a>Медиавыражения</a></h2><div class="section-content"><p>Отзывчивый дизайн появился благодаря медиавыражениям (media queries). Спецификация Media Queries Level 3 стала Рекомендованным Кандидатом в 2009 году, что означает, что она была признана готовой к реализации в браузерах. Медиавыражения позволяют нам проводить серию тестов (например, является ли экран пользователя больше, чем определённая ширина или разрешение) и выборочно применять CSS к стилю страницы соответственно с нуждами пользователя.</p>\n<p>Например, следующее медиавыражение проверяет отображается ли текущая страница как экранная медиа (а не как печатный документ) и имеет ли область просмотра ширину как минимум 800 px. CSS будет применяться к селектору <code>.container</code> только если эти две вещи истины.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">@media screen and (min-width: 800px) {\n  .container {\n    margin: 1em 2em;\n  }\n}\n</pre></div>\n<p>Вы можете добавлять несколько медиавыражений в пределах одной таблицы стилей, подстраивая весь ваш макет или его части так, чтобы наилучшим образом соответствовать разным размерам экрана. Точки, в которых применяются медиавыражения и меняется макет, известны как <em>контрольные точки.</em></p>\n<p>Общим подходом при использовании медиавыражений является создание простого одноколоночного макета для устройств с узкими экранами (например, мобильные телефоны), затем проверка для больших экранов и применение макета с несколькими столбцам, когда вы знаете, что у вас достаточно ширины экрана, чтобы уместить все. Такой подход часто называют <strong>mobile first</strong> дизайном.</p>\n<p>Узнать больше о <a>медиавыражениях</a> можно в документации MDN.</p></div></section><section aria-labelledby="гибкие_сетки"><h2 id="гибкие_сетки"><a>Гибкие сетки</a></h2><div class="section-content"><p>Отзывчивые сайты не просто меняют свой макет между контрольными точками, они построены на гибких сетках. Гибкая сетка подразумевает что вам не надо заботиться о каждом возможном существующем размере устройства и строить для них идеальный макет в пикселях. Такой подход был бы невозможен имея широкое множество существующих устройств разных размеров, как и факт того, что даже на ПК люди не всегда используют браузер с развёрнутым до максимума окном.</p>\n<p>Используя гибкую сетку, вам всего лишь надо добавить контрольную точку и изменить дизайн в точке, когда ваш контент начинает выглядеть плохо. Например, если длина строки становится нечитаемо длинной при увеличении размера экрана, или блок становится сдавленным с двумя словами в каждой строке при сужении экрана.</p>\n<p>В первые дни отзывчивого дизайна, нашим единственным вариантом выполнения было использование <a>floats</a>. Гибкий обтекаемый макет достигался путём присвоения каждому элементу процентной ширины удостоверившись, что итоговые значения в макете не превышают 100%. В своей оригинальной статье о плавучих сетках Маркотт подробно описал формулу для преобразования макета, созданного с использованием пикселей, в проценты.</p>\n<pre compile="false" disable="true" language="css">target / context = result\n</pre>\n<p>Например, если размер нашего целевого столбца — 60 пикселей, а контекст (или контейнер) в котором он находится — 960 пикселей, то мы делим 60 на 960 чтобы получить значение которое мы можем использовать в нашем CSS, после переноса десятичной точки вправо на 2 цифры.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">.col {\n  width: 6.25%; /* 60 / 960 = 0.0625 */\n}\n</pre></div>\n<p>Этот подход сегодня можно найти во многих местах в Интернете и он задокументирован здесь в разделе макетов в нашей статье <a class="only-in-en-us" title="Currently only available in English (US)">Устаревших методов макетов <small>(en-US)<small></small></small></a>. В вашей работе вероятно, что вы столкнётесь с веб-сайтами, использующими этот подход, поэтому стоит понимать его, даже если вы не будете строить современные сайты используя гибкие сетки основанные на float.</p>\n<p>Следующий пример демонстрирует простой отзывчивый дизайн, с использованием медиавыражений и гибких сеток. На узких экранах макет отображает блоки, расположенные друг над другом:</p>\n<p>\n  \n</p>\n<p>На более широких экранах они перемещаются в два столбца:</p>\n<p>\n  \n</p>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> вы можете найти <a class="external" target="_blank">живой пример</a> и <a class="external" target="_blank">исходный код</a> этого примера на GitHub.</p>\n</div></div></section><section aria-labelledby="современные_технологии_макетов"><h2 id="современные_технологии_макетов"><a>Современные технологии макетов</a></h2><div class="section-content"><p>Современные методы макетов такие как <a>Макет с несколькими столбцами</a>, <a>Flexbox</a>, и <a>Grid</a> являются отзывчивыми по умолчанию. Они все предполагают, что вы пытаетесь создать гибкую сетку и дают вам более лёгкий способ сделать так.</p></div></section><section aria-labelledby="multicol"><h3 id="multicol"><a>Multicol</a></h3><div class="section-content"><p>Самый старый из этих методов — это multicol, когда вы задаёте <code>column-count</code>, это отражает то на сколько столбцов вы хотите разбить ваш контент. Далее браузер рассчитывает их размер, размер, который изменится согласно размеру экрана.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.container {\n  column-count: 3;\n}\n</pre></div>\n<p>Если вместо этого вы зададите <code>column-width</code>, то вы определите <em>минимальную</em> ширину. Браузер создаст столько столбцов той ширины, сколько будет комфортно умещаться в контейнер, а затем поделит оставшееся пространство между всеми столбцами. Поэтому число столбцов будет меняться согласно тому сколько имеется места.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.container {\n  column-width: 10em;\n}\n</pre></div></div></section><section aria-labelledby="flexbox"><h3 id="flexbox"><a>Flexbox</a></h3><div class="section-content"><p>В Flexbox, в качестве исходного поведения, flex элементы будут сжиматься и распределять пространство между элементами в соответствии с пространством в их контейнере. Изменяя значения <code>flex-grow</code> и <code>flex-shrink</code> вы можете указать, как вы хотите, чтобы предметы вели себя когда они сталкиваются с большим или меньшим пространством вокруг себя.</p>\n<p>В примере ниже каждый flex элемент будет принимать равное количество пространства во flex контейнере используя запись <code>flex: 1</code> как описано в главе <a>Flexbox: Гибкое изменение размеров flex элементов</a>.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.container {\n  display: flex;\n}\n\n.item {\n  flex: 1;\n}\n</pre></div>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> В качестве примера мы перестроили простой отзывчивый макет выше, в этот раз используя flexbox. Вы видите что нас больше не надо использовать странные процентные значения для подсчёта размера столбцов: <a class="external" target="_blank">пример</a>, <a class="external" target="_blank">исходный код</a>.</p>\n</div></div></section><section aria-labelledby="css_grid"><h3 id="css_grid"><a>CSS grid</a></h3><div class="section-content"><p>В макете CSS Grid единицы измерения <code>fr</code> позволяют распределять доступное пространство между дорожками сетки. Следующий пример создаёт grid контейнер с тремя дорожками размером <code>1fr</code>. Это создаст три вертикальные дорожки, каждая занимающая одну часть свободного пространства в контейнере. Вы можете узнать больше об этом подходе к созданию сетки в теме Изучение Макета Grid в разделе <a>Гибкие grids с единицами fr</a>.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">.container {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n}\n</pre></div>\n<div class="notecard note" id="sect6">\n  <p><strong>Примечание:</strong> версия grid макета ещё проще, поскольку мы можем определить столбцы в .wrapper: <a class="external" target="_blank">пример</a>, <a class="external" target="_blank">исходный код</a>.</p>\n</div></div></section><section aria-labelledby="отзывчивые_изображения"><h2 id="отзывчивые_изображения"><a>Отзывчивые изображения</a></h2><div class="section-content"><p>Самый простой подход к отзывчивым изображениям был описан в ранних статьях Маркотта по отзывчивому дизайну. По сути, вы берёте изображение максимального размера, которое могло понадобиться, и уменьшаете его. Этот подход до сих пор используется и в большинстве таблиц стилей вы найдёте следующий CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">img {\n  max-width: 100%;\n}\n</pre></div>\n<p>Существуют очевидные недостатки к этому подходу. Изображение может быть изображено намного меньше своего исходного размера, что является пустой тратой пропускной способности — пользователь мобильных может загружать изображение, в несколько раз превышающее размер того, что он фактически видит в окне браузера. Кроме того, вам может не понадобиться такое же соотношение сторон изображения на мобильном устройстве, как на компьютере. Либо, учитывая меньший размер изображения на мобильном телефоне, вы можете захотеть показать совсем другое изображение, которое легче понять на маленьком экране. Такие вещи можно достичь, просто уменьшая изображение.</p>\n<p>Отзывчивые изображения, используя элемент <a><code>&lt;picture&gt;</code></a> и атрибуты <code>srcset</code> и <code>sizes</code> элемента <a><code>&lt;img&gt;</code></a> оба решают эти проблемы. Вы можете указать несколько размеров вместе с «подсказками» (метаданные, описывающие размер экрана и разрешение, для которых изображение лучше всего подходит), и браузер выберет наиболее подходящее изображение для каждого устройства, гарантируя, что пользователь загрузит изображение подходящего размера для устройства, которое они используют.</p>\n<p>Вы также можете напрямую использовать изображения разных размеров, обеспечивая разное кадрирование или совершенно другое изображение для разных размеров экрана.</p>\n<p>Вы можете найти подробное <a>руководство по отзывчивым изображениям в разделе изучения HTML</a> на MDN.</p></div></section><section aria-labelledby="отзывчивая_типографика"><h2 id="отзывчивая_типографика"><a>Отзывчивая типографика</a></h2><div class="section-content"><p>Элементом отзывчивого дизайна, не освещённого ранее в работе, была идея отзывчивой типографики. Главным образом, она описывает изменение размеров шрифта в зависимости от ширины экрана при помощи медиавыражений.</p>\n<p>В этом примере, мы хотим задать нашему заголовку первого уровня <code>4rem</code>, что значит, что он будет в четыре раза больше нашего базового размера шрифта. Это очень большой заголовок! Мы хотим этот гигантский заголовок только на экранах больших размеров, поэтому мы сначала создаём меньший заголовок, а затем используем медиавыржаение, чтобы переписать его для больших экранов, если мы знаем, что у пользователя есть экран размером как минимум <code>1200px</code>.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">html {\n  font-size: 1em;\n}\n\nh1 {\n  font-size: 2rem;\n}\n\n@media (min-width: 1200px) {\n  h1 {\n    font-size: 4rem;\n  }\n}\n</pre></div>\n<p>Мы отредактировали наш приведённый выше пример отзывчивой сетки grid, чтобы он также включал в себя адаптивный тип, используя описанный метод. Вы можете видеть, как заголовок меняет размеры, когда макет переходит в версию с двумя столбцами.</p>\n<p>В мобильных версиях заголовок меньше:</p>\n<p>\n  \n</p>\n<p>На компьютерах, однако, мы видим больший размер заголовка:</p>\n<p>\n  \n</p>\n<div class="notecard note" id="sect7">\n  <p><strong>Примечание:</strong> смотрите этот пример в действии: <a class="external" target="_blank">пример</a>, <a class="external" target="_blank">исходный код</a>.</p>\n</div>\n<p>Такой подход к типографике показывает, что вам не нужно ограничиваться в использовании медиавыражений только изменением макета страницы. Они могут быть использоваться для настройки любого элемента, чтобы сделать его более удобным или привлекательным при других размерах экрана.</p></div></section><section aria-labelledby="using_viewport_units_for_responsive_typography"><h3 id="using_viewport_units_for_responsive_typography"><a>Using viewport units for responsive typography</a></h3><div class="section-content"><p>An interesting approach is to use the viewport unit <code>vw</code> to enable responsive typography. <code>1vw</code> is equal to one percent of the viewport width, meaning that if you set your font size using <code>vw</code>, it will always relate to the size of the viewport.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">h1 {\n  font-size: 6vw;\n}\n</pre></div>\n<p>The problem with doing the above is that the user loses the ability to zoom any text set using the <code>vw</code> unit, as that text is always related to the size of the viewport. <strong>Therefore you should never set text using viewport units alone</strong>.</p>\n<p>There is a solution, and it involves using <a><code>calc()</code></a>. If you add the <code>vw</code> unit to a value set using a fixed size such as <code>em</code>s or <code>rem</code>s then the text will still be zoomable. Essentially, the <code>vw</code> unit adds on top of that zoomed value:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">h1 {\n  font-size: calc(1.5rem + 3vw);\n}\n</pre></div>\n<p>This means that we only need to specify the font size for the heading once, rather than set it up for mobile and redefine it in the media queries. The font then gradually increases as you increase the size of the viewport.</p>\n<div class="notecard note" id="sect8">\n  <p><strong>Примечание:</strong> See an example of this in action: <a class="external" target="_blank">example</a>, <a class="external" target="_blank">source code</a>.</p>\n</div></div></section><section aria-labelledby="the_viewport_meta_tag"><h2 id="the_viewport_meta_tag"><a>The viewport meta tag</a></h2><div class="section-content"><p>If you look at the HTML source of a responsive page, you will usually see the following <a><code>&lt;meta&gt;</code></a> tag in the <code>&lt;head&gt;</code> of the document.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><meta name="viewport" content="width=device-width,initial-scale=1">\n</pre></div>\n<p>This meta tag tells mobile browsers that they should set the width of the viewport to the device width, and scale the document to 100% of its intended size, which shows the document at the mobile-optimized size that you intended.</p>\n<p>Why is this needed? Because mobile browsers tend to lie about their viewport width.</p>\n<p>This meta tag exists because when the original iPhone launched and people started to view websites on a small phone screen, most sites were not mobile optimized. The mobile browser would, therefore, set the viewport width to 960 pixels, render the page at that width, and show the result as a zoomed-out version of the desktop layout. Other mobile browsers (e.g. on Google Android) did the same thing. Users could zoom in and pan around the website to view the bits they were interested in, but it looked bad. You will still see this today if you have the misfortune to come across a site that does not have a responsive design.</p>\n<p>The trouble is that your responsive design with breakpoints and media queries won\'t work as intended on mobile browsers. If you\'ve got a narrow screen layout that kicks in at 480px viewport width or less, and the viewport is set at 960px, you\'ll never see your narrow screen layout on mobile. By setting <code>width=device-width</code> you are overriding Apple\'s default <code>width=960px</code> with the actual width of the device, so your media queries will work as intended.</p>\n<p><strong>So you should <em>always</em> include the above line of HTML in the head of your documents.</strong></p>\n<p>There are other settings you can use with the viewport meta tag, however in general the above line is what you will want to use.</p>\n<ul>\n  <li><code>initial-scale</code>: Sets the initial zoom of the page, which we set to 1.</li>\n  <li><code>height</code>: Sets a specific height for the viewport.</li>\n  <li><code>minimum-scale</code>: Sets the minimum zoom level.</li>\n  <li><code>maximum-scale</code>: Sets the maximum zoom level.</li>\n  <li><code>user-scalable</code>: Prevents zooming if set to <code>no</code>.</li>\n</ul>\n<p>You should avoid using <code>minimum-scale</code>, <code>maximum-scale</code>, and in particular setting <code>user-scalable</code> to <code>no</code>. Users should be allowed to zoom as much or as little as they need to; preventing this causes accessibility problems.</p></div></section><section aria-labelledby="summary"><h2 id="summary"><a>Summary</a></h2><div class="section-content"><p>Responsive design refers to a site or application design that responds to the environment in which it is viewed. It encompasses a number of CSS and HTML features and techniques and is now essentially just how we build websites by default. Consider the sites that you visit on your phone — it is probably fairly unusual to come across a site that is the desktop version scaled down, or where you need to scroll sideways to find things. This is because the web has moved to this approach of designing responsively.</p>\n<p>It has also become much easier to achieve responsive designs with the help of the layout methods you have learned in these lessons. If you are new to web development today you have many more tools at your disposal than in the early days of responsive design. It is therefore worth checking the age of any materials you are referencing. While the historical articles are still useful, modern use of CSS and HTML makes it far easier to create elegant and useful designs, no matter what device your visitor views the site with.</p></div></section><section aria-labelledby="in_this_module"><h2 id="in_this_module"><a>In this module</a></h2><div class="section-content"><ul>\n  <li><a>Introduction to CSS layout</a></li>\n  <li><a>Normal flow</a></li>\n  <li><a>Flexbox</a></li>\n  <li><a>Grid</a></li>\n  <li><a>Floats</a></li>\n  <li><a>Positioning</a></li>\n  <li><a>Multiple-column layout</a></li>\n  <li><a aria-current="page">Responsive design</a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)">Beginner\'s guide to media queries <small>(en-US)<small></small></small></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)">Legacy layout methods <small>(en-US)<small></small></small></a></li>\n  <li><a class="only-in-en-us" title="Currently only available in English (US)">Supporting older browsers <small>(en-US)<small></small></small></a></li>\n  <li><a>Fundamental layout comprehension assessment</a></li>\n</ul></div></section>',
					works: [],
				},
				{
					title: 'Фундаментальное понимание раскладки',
					chapter: 2.41,
					content:
						'<header><h1>Фундаментальное понимание раскладки</h1></header><div class="section-content"><p>Если вы проработали этот модуль, то уже имеете базовое представление о том, что вам нужно знать, чтобы создавать современную CSS раскладку и работать с более старым CSS. Это задание проверит некоторые из ваших знаний путём разработки раскладки для простой веб-страницы, используя различные техники.</p>\n</div><section aria-labelledby="резюме_проекта"><h2 id="резюме_проекта"><a>Резюме проекта</a></h2><div class="section-content"><p>Вам предоставили некоторый html, базовый css и изображения — ваша задача, создать раскладку для дизайна, который должен выглядеть как на изображении ниже.</p>\n<p>\n  \n</p></div></section><section aria-labelledby="базовые_настройки"><h3 id="базовые_настройки"><a>Базовые настройки</a></h3><div class="section-content"><p>Вы можете скачать HTML, CSS, и набор из шести изображений <a class="external" target="_blank">тут</a>.</p>\n<p>Сохраните HTML документ и css стили внутри директории на вашем компьютере и добавьте изображения внутрь папки с именем <code>images</code>. Открыв <code>index.html</code> файл в браузере, вы должны получить страницу с базовой стилизацией, но без раскладки, что должно выглядеть как на изображении ниже.</p>\n<p>Эта отправная точка и всё содержимое отображается браузером в нормальном потоке.</p>\n<p>\n  \n</p></div></section><section aria-labelledby="ваши_задачи"><h3 id="ваши_задачи"><a>Ваши задачи</a></h3><div class="section-content"><p>Теперь вам нужно реализовать раскладку. Задачи, которые вам необходимо выполнить:</p>\n<ol>\n  <li>Отобразить пункты навигации в строку, с одинаковым количеством пространства между элементами.</li>\n  <li>Панель навигации должна прокручиваться вместе с содержимым страницы и закрепляться вверху видимой области документа в рамках экрана.</li>\n  <li>Изображение, которое находится внутри статьи, должно обтекаться текстом вокруг него.</li>\n  <li><a><code>&lt;article&gt;</code></a> и <a><code>&lt;aside&gt;</code></a> элементы должны отображаться как двухколоночная раскладка. Колонки должны иметь гибкий размер, если окно браузера уменьшится, колонки должны стать более узкими.</li>\n  <li>Фотографии должны отображаться как двухколоночная сетка с отступом в 1px между изображениями.</li>\n</ol>\n<p>Вам нет необходимости изменять HTML для создания этой раскладки и техник, которые вы должны использовать:</p>\n<ul>\n  <li>Позиционирование</li>\n  <li>Раскладка на Float</li>\n  <li>Раскладка на Flexbox</li>\n  <li>Раскладка на CSS Grid</li>\n</ul>\n<p>Есть множество способов, как выполнить некоторые из этих задач и часто не существует одного правильного или неправильного способа это сделать. Попробуйте несколько разных способов и увидите, какой работает лучше. Делайте заметки о ваших экспериментах и вы всегда сможете обсудить ваш способ в отдельной дискуссии для этого задания или на <a>#mdn</a> IRC канале.</p></div></section><section aria-labelledby="оценка_работы"><h2 id="оценка_работы"><a>Оценка работы</a></h2><div class="section-content"><p>Если вы проходите эту аттестацию как часть организованного курса, вы должны быть в состоянии дать свою работу вашему учителю/наставнику для оценки. Если вы занимаетесь самообучением, тогда вы легко можете получить руководство по оценке работы, задавая вопросы в <a class="external" target="_blank">отдельной дискуссии для этого задания</a> или на <a>#mdn</a> IRC канале в <a class="external" target="_blank">Mozilla IRC</a>. Сначала попробуйте выполнить упражнение — нет никаких причин для жульничества!</p></div></section>',
					works: [],
				},
			],
		},
		{
			title: '',
			chapter: 3,
			part: 'javascript',
			content: '',
			parts: [
				{
					title: 'Основы JavaScript',
					chapter: 3.1,
					content:
						'<header><h1>Основы JavaScript</h1></header><div class="section-content">\n<p>JavaScript – это язык программирования, который добавляет интерактивность на ваш веб-сайт (например: игры, отклик при нажатии кнопок или при вводе данных в формы, динамические стили, анимация). Эта статья поможет вам начать работать с этим захватывающим языком и даст вам представление о том, на что он способен.</p></div><section aria-labelledby="что_такое_javascript_на_самом_деле"><h2 id="что_такое_javascript_на_самом_деле"><a>Что такое JavaScript на самом деле?</a></h2><div class="section-content"><p><a>JavaScript</a> ("JS" для краткости) — это полноценный <a class="page-not-created" title="Документация об этом ещё не написана. Пожалуйста, поспособствуйте её написанию!">динамический язык программирования</a>, который применяется к <a>HTML</a> документу, и может обеспечить динамическую интерактивность на веб-сайтах. Его разработал Brendan Eich, сооснователь проекта Mozilla, Mozilla Foundation и Mozilla Corporation.</p>\n<p>JavaScript невероятно универсален и дружелюбен к новичкам. Обладая большим опытом, вы сможете создавать игры, анимированную 2D и 3D графику, полномасштабные приложения с базами данных и многое другое!</p>\n<p>JavaScript сам по себе довольно компактный, но очень гибкий. Разработчиками написано большое количество инструментов поверх основного языка JavaScript, которые разблокируют огромное количество дополнительных функций с очень небольшим усилием. К ним относятся:</p>\n<ul>\n  <li>Программные интерфейсы приложения (<a>API</a>), встроенные в браузеры, обеспечивающие различные функциональные возможности, такие как динамическое создание HTML и установку CSS стилей, захват и манипуляция видеопотоком, работа с веб-камерой пользователя или генерация 3D графики и аудио сэмплов.</li>\n  <li>Сторонние API позволяют разработчикам внедрять функциональность в свои сайты от других разработчиков, таких как Twitter или Facebook.</li>\n  <li>Также вы можете применить к вашему HTML сторонние фреймворки и библиотеки, что позволит вам ускорить создание сайтов и приложений.</li>\n</ul>\n<p>Поскольку эта статья должна быть только лёгким введением в JavaScript, мы не собираемся путать вас на этом этапе, подробно рассказывая о том, какая разница между основным языком JavaScript и различными инструментами, перечисленными выше. Вы можете подробно изучить все это позже, в нашей <a>учебной области JavaScript</a> и в остальной части MDN.</p>\n<p>Ниже мы познакомим вас с некоторыми аспектами основного языка, и вы также будете играть с несколькими функциями API браузера. Веселитесь!</p></div></section><section aria-labelledby="пример_hello_world"><h2 id="пример_hello_world"><a>Пример "hello world"</a></h2><div class="section-content"><p>Предыдущий раздел звучит очень многообещающе, и это на самом деле так — JavaScript является одной из самых перспективных веб-технологий, и когда вы освоитесь и начнёте использовать его, ваши веб-сайты перейдут в новое измерение мощи и креативности.</p>\n<p>Тем не менее, с JavaScript немного более сложно освоиться, чем с HTML и CSS. Вам придётся начать с малого, продолжая изучение небольшими шагами. Для начала мы покажем вам, как добавить некоторые основы JavaScript на вашу страницу, чтобы создать "hello world!" пример (<a class="external" target="_blank">стандарт в начальных примерах программирования</a>).</p>\n<div class="notecard warning" id="sect1">\n  <p><strong>Предупреждение:</strong> <strong>Важно</strong>: Если вы не следили за остальным нашим курсом, <a class="external" target="_blank">скачайте этот пример кода</a> и используйте его в качестве стартовой точки.</p>\n</div>\n<ol>\n  <li>Для начала перейдите на ваш тестовый сайт и создайте папку с именем \'scripts\' (без кавычек). Затем, в новой папке скриптов, которую вы только что создали, создайте новый файл с именем <code>main.js</code>. Сохраните его в вашей папке <code>scripts</code>.</li>\n  <li>Далее перейдите в ваш <code>index.html</code> файл и введите следующий элемент на новой строке прямо перед закрывающим тегом <code>&lt;/body&gt;</code>:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><script src="scripts/main.js"></script>\n</pre></div>\n  </li>\n  <li>В основном этот код выполняет ту же работу, что и элемент <a><code>&lt;link&gt;</code></a> для CSS — добавляет JavaScript на страницу, позволяя ему взаимодействовать с HTML (и CSS, и чем-нибудь ещё на странице).</li>\n  <li>Теперь добавьте следующий код в файл <code>main.js</code>:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">var myHeading = document.querySelector("h1");\nmyHeading.textContent = "Hello world!";\n</pre></div>\n  </li>\n  <li>Теперь убедитесь, что HTML и JavaScript файлы сохранены, и загрузите <code>index.html</code> в браузере. Вы должны увидеть что-то вроде этого: \n    \n  </li>\n</ol>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Причиной, по которой мы поставили элемент <a><code>&lt;script&gt;</code></a> в нижней части HTML файла, является то, что HTML-элементы загружаются браузером в том порядке, в котором они расположены в файле. Поэтому, если JavaScript загружается первым и ему нужно взаимодействовать с HTML ниже его, он не сможет работать, так как JavaScript будет загружен раньше, чем HTML, с которым нужно работать. Поэтому, располагать JavaScript в нижней части HTML страницы считается лучшей стратегией.</p>\n</div></div></section><section aria-labelledby="что_произошло"><h3 id="что_произошло"><a>Что произошло?</a></h3><div class="section-content"><p>Итак, ваш заголовок текста был изменён на "Hello world!" с помощью JavaScript. Мы сделали это с помощью вызова функции <a title="querySelector()"><code>querySelector()</code></a>, захватив ссылку на наш заголовок и сохранив её в переменной, названной <code>myHeading</code>. Это очень похоже на то, что мы делали в CSS с помощью селекторов. Если вы хотите что-то сделать с элементом, то для начала вам нужно его выбрать.</p>\n<p>После этого, вы устанавливаете значение переменной <code>myHeading</code> в <a title="textContent"><code>textContent</code></a> свойство (которое представляет собой контент заголовка) "Hello world!".</p></div></section><section aria-labelledby="ускоренный_курс_по_основам_языка"><h2 id="ускоренный_курс_по_основам_языка"><a>Ускоренный курс по основам языка</a></h2><div class="section-content"><p>Давайте познакомимся с некоторыми основными возможностями языка JavaScript, чтобы дать вам больше понимания, как это всё работает. Более того, эти возможности являются общими для всех языков программирования. Если вы сможете понять эти основы, вы будете в состоянии начать программировать, как ни в чём не бывало!</p>\n<div class="notecard warning" id="sect3">\n  <p><strong>Предупреждение:</strong> <strong>Важно</strong>: В этой статье попробуйте вводить примеры строк кода в вашей JavaScript консоли, чтобы увидеть, что происходит. Для более подробной информации о JavaScript консоли смотрите статью <a>Откройте для себя браузерные инструменты разработчика</a>.</p>\n</div></div></section><section aria-labelledby="переменные"><h3 id="переменные"><a>Переменные</a></h3><div class="section-content"><p><a>Переменные</a> — это контейнеры, внутри которых вы можете хранить значения. Вы начинаете с того, что объявляете переменную с помощью ключевого слова <a><code>var</code></a> (не рекомендуется, продолжайте читать, чтобы получить объяснения) или <a><code>let</code></a>, за которым следует любое имя, которым вы захотите её назвать:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">let myVariable;\n</pre></div>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> Точка с запятой в конце строки указывает, где заканчивается оператор. Точку с запятой нужно обязательно использовать для разеделения операторов, располагающихся на одной строке. Однако некоторые люди считают, что хорошая практика — указывать её в конце каждого оператора. Существуют и другие правила, когда нужно ставить точку с запятой, а когда нет. Смотрите более подробно в статье <a class="external" target="_blank">ваше руководство по точкам с запятой в JavaScript</a>.</p>\n</div>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> вы можете назвать переменную практически как угодно, но есть некоторые ограничения для её имени (смотрите <a class="external" target="_blank">в правилах именования переменных</a>). Если вы не уверены, вы можете <a class="external" target="_blank">проверить имя вашей переменной</a>, чтобы увидеть корректно ли оно.</p>\n</div>\n<div class="notecard note" id="sect6">\n  <p><strong>Примечание:</strong> JavaScript чувствителен к регистру — <code>myVariable</code> отличается от переменной <code>myvariable</code>. Если у вас возникают проблемы в вашем коде, проверьте регистр!</p>\n</div>\n<blockquote>\n  <p>**Примечание:**Для получения более подробной информации о разнице между var и let, смотрите: <a>Разница между var и let</a>.</p>\n</blockquote>\n<p>После объявления переменной вы можете присвоить ей значение:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">myVariable = "Bob";\n</pre></div>\n<p>Вы можете сделать обе эти операции на одной и той же строке, если вы захотите:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">var myVariable = "Bob";\n</pre></div>\n<p>Вы можете получить значение, просто вызвав переменную по имени:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">myVariable;\n</pre></div>\n<p>После установки значения переменной вы можете изменить его позже:</p>\n<pre compile="false" disable="true" language="markup">var myVariable = \'Bob\';\nmyVariable = \'Steve\';\n</pre>\n<p>Обратите внимание, что переменные имеют разные <a>типы данных</a>:</p>\n\n<p>Так для чего нам нужны переменные? Что ж, переменные должны были сделать что-нибудь интересное в программировании. Если значения не могли бы изменяться, то вы не могли бы ничего сделать динамическим, например, персонализировать приветственное сообщение или сменить изображение, отображаемое в галерее изображений.</p></div></section><section aria-labelledby="комментарии"><h3 id="комментарии"><a>Комментарии</a></h3><div class="section-content"><p>Комментарии - это, по сути, короткие фрагменты текста, которые могут быть добавлены в код, и которые игнорируются браузером. Вы можете поместить комментарии в JavaScript-код, так же как вы делали это в CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">/*\nВсё, что находится тут - комментарий.\n*/\n</pre></div>\n<p>Если ваш комментарий не содержит переноса строк, то зачастую легче поставить две косые черты, как тут:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">// Это комментарий\n</pre></div></div></section><section aria-labelledby="операторы"><h3 id="операторы"><a>Операторы</a></h3><div class="section-content"><p><a class="only-in-en-us" title="Currently only available in English (US)">operator <small>(en-US)</small></a> — это математический символ, который производит результат, основанный на двух значениях (или переменных). В приведённой ниже таблице вы можете увидеть некоторые из наиболее простых операторов, наряду с некоторыми примерами, которые опробуете в JavaScript консоли.</p>\n\n<p>Существует намного больше операторов для изучения, но этих пока хватит. Смотрите их полный список в разделе <a>выражения и операторы</a>.</p>\n<div class="notecard note" id="sect7">\n  <p><strong>Примечание:</strong> Смешивание типов данных может привести к некоторым неожиданным результатам при выполнении вычислений, поэтому будьте осторожны, правильно ссылайтесь на ваши переменные, чтобы получать ожидаемые результаты. Например, введите <code>"35" + "25"</code> в вашу консоль. Почему вы не получили результат, который вы ожидали? Потому, что кавычки превратили числа в строки, так что у вас в итоге получилась конкатенация строк, а не сложение чисел. Если вы введёте, <code>35 + 25</code>, то получите правильный результат.</p>\n</div></div></section><section aria-labelledby="условия"><h3 id="условия"><a>Условия</a></h3><div class="section-content"><p>Условия — это конструкции в коде, которые позволяют проверить истинность или ложность выражения и выполнить другой код в зависимости от полученного результата. Самая распространённая форма условия — инструкция <code>if ... else</code>. Например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">var iceCream = "chocolate";\nif (iceCream === "chocolate") {\n  alert("Yay, I love chocolate ice cream!");\n} else {\n  alert("Awwww, but chocolate is my favorite...");\n}\n</pre></div>\n<p>Выражение внутри <code>if ( ... )</code> — это проверка, которая использует тождественный оператор (как описано выше), чтобы сравнить переменную <code>iceCream</code> со строкой <code>chocolate</code> и увидеть равны ли они. Если это сравнение возвращает <code>true</code>, выполнится первый блок кода. Если нет, этот код пропустится и выполнится второй блок кода, после инструкции <code>else</code>.</p></div></section><section aria-labelledby="функции"><h3 id="функции"><a>Функции</a></h3><div class="section-content"><p><a>Функции</a> - способ упаковки функциональности, которую вы хотите использовать повторно. Всякий раз, когда вам нужна определённая процедура, вы можете просто вызвать функцию по её имени, а не переписывать весь код каждый раз. Вы уже видели некоторые функции, описанные выше, например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">var myVariable = document.querySelector("h1");\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">alert("hello!");\n</pre></div>\n<p>Эти функции, <code>document.querySelector</code> и <code>alert</code>, встроены в браузер для того, чтобы вы использовали их всякий раз, когда вам это необходимо.</p>\n<p>Если вы видите что-то, что выглядит как имя переменной, но имеет после него скобки — <code>()</code>, скорее всего, это функция. Функции часто принимают <a>аргументы</a> — биты данных, которые им необходимы для выполнения своей работы. Они находятся в скобках, и разделяются запятыми, если присутствует более одного аргумента.</p>\n<p>Например, функция <code>alert()</code> вызывает всплывающий блок, появляющийся в окне браузера, но мы должны дать ему строку в качестве аргумента, чтобы сказать функции, что писать во всплывающем блоке.</p>\n<p>Хорошая новость заключается в том, что вы можете определить свои собственные функции — в следующем примере мы напишем простую функцию, которая принимает два числа в качестве аргументов и умножает их:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">function multiply(num1, num2) {\n  var result = num1 * num2;\n  return result;\n}\n</pre></div>\n<p>Попробуйте запустить вышеупомянутую функцию в консоли, затем попробуйте изменить аргументы, например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">multiply(4, 7);\nmultiply(20, 20);\nmultiply(0.5, 3);\n</pre></div>\n<div class="notecard note" id="sect8">\n  <p><strong>Примечание:</strong> Инструкция <a><code>return</code></a> сообщает браузеру, что нужно вернуть переменную <code>result</code> из функции, которую можно будет использовать. Это необходимо потому, что переменные, определённые внутри функций, доступны только внутри этих функций. Это называется <a class="only-in-en-us" title="Currently only available in English (US)">областью видимости <small>(en-US)</small></a> переменной. (Читайте <a>больше об области видимости переменных</a>.)</p>\n</div></div></section><section aria-labelledby="события"><h3 id="события"><a>События</a></h3><div class="section-content"><p>Для создания действительной интерактивности на веб-сайте вам необходимы события. События — это структура, которая следит за тем, что происходит в браузере, а затем позволяет вам запускать код в ответ на это. Наиболее очевидным является <a class="only-in-en-us" title="Currently only available in English (US)">событие клика <small>(en-US)<small></small></small></a>, которое вызывается браузером, когда мы щёлкаем по чему-то мышью. Для демонстрации этого события введите следующую команду в вашу консоль, а затем щёлкните по текущей веб-странице:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">document.querySelector("html").onclick = function () {\n  alert("Ouch! Stop poking me!");\n};\n</pre></div>\n<p>Существуют множество способов прикрепить событие к элементу. Здесь мы выбираем <a><code>&lt;html&gt;</code></a> элемент и устанавливаем ему обработчик свойства <a class="only-in-en-us" title="Currently only available in English (US)"><code>onclick</code> <small>(en-US)<small></small></small></a> анонимной функцией (т.е. безымянной) которая содержит код, который мы хотим запустить для события клика.</p>\n<p>Обратите внимание, что</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">document.querySelector("html").onclick = function () {};\n</pre></div>\n<p>эквивалентно</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">var myHTML = document.querySelector("html");\nmyHTML.onclick = function () {};\n</pre></div>\n<p>Просто так короче.</p></div></section><section aria-labelledby="прокачаем_пример_нашего_веб-сайта"><h2 id="прокачаем_пример_нашего_веб-сайта"><a>Прокачаем пример нашего веб-сайта</a></h2><div class="section-content"><p>Теперь, когда мы прошли некоторые основы JavaScript, давайте добавим несколько крутых несложных функций в пример нашего сайта, чтобы дать вам некоторое представление о принципах работы.</p></div></section><section aria-labelledby="добавление_смены_изображения"><h3 id="добавление_смены_изображения"><a>Добавление смены изображения</a></h3><div class="section-content"><p>В этом разделе мы добавим ещё одно изображение на наш сайт и добавим некоторый простой JavaScript для переключения между двумя изображениями, когда по ним щёлкнули.</p>\n<ol>\n  <li>В первую очередь найдите другое изображение, которые вы хотели бы показать на вашем сайте. Убедитесь что оно такого же размера, как ваше первое изображение или максимально близкое к нему.</li>\n  <li>Сохраните изображение в вашу папку <code>images</code>.</li>\n  <li>Переименуйте это изображение в \'firefox2.png\' (без кавычек).</li>\n  <li>Перейдите в ваш файл <code>main.js</code> и введите следующий JavaScript. (Если ваш "hello world" JavaScript по-прежнему существует, удалите его.)\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">var myImage = document.querySelector("img");\n\nmyImage.onclick = function () {\n  var mySrc = myImage.getAttribute("src");\n  if (mySrc === "images/firefox-icon.png") {\n    myImage.setAttribute("src", "images/firefox2.png");\n  } else {\n    myImage.setAttribute("src", "images/firefox-icon.png");\n  }\n};\n</pre></div>\n  </li>\n  <li>Сохраните все файлы и загрузите <code>index.html</code> в браузере. Теперь, когда вы щёлкните по изображению, оно должно измениться на другое!</li>\n</ol>\n<p>Итак, мы сохраняем ссылку на наш элемент <a><code>&lt;img&gt;</code></a> в переменной <code>myImage</code>. Далее, мы создаём этой переменной обработчик события <code>onclick</code> с анонимной функцией. Теперь, каждый раз, когда на этот элемент изображения щёлкнут:</p>\n<ol>\n  <li>Мы получаем значение из атрибута <code>src</code> изображения.</li>\n  <li>Мы используем условие для проверки значения <code>src,</code> равен ли путь к исходному изображению:\n    <ol>\n      <li>Если это так, мы меняем значение <code>src</code> на путь ко 2-му изображению, заставляя другое изображение загружаться внутри элемента <a><code>&lt;image&gt;</code></a>.</li>\n      <li>Если это не так (значит, оно должно было уже измениться), мы меняем значение <code>src</code>, возвращаясь к первоначальному пути изображения, каким он был изначально.</li>\n    </ol>\n  </li>\n</ol></div></section><section aria-labelledby="добавление_персонального_приветственного_сообщения"><h3 id="добавление_персонального_приветственного_сообщения"><a>Добавление персонального приветственного сообщения</a></h3><div class="section-content"><p>Далее мы добавим немного другого кода, чтобы изменить заголовок страницы на персонализированное приветственное сообщение, когда пользователь впервые зайдёт на сайт. Это приветственное сообщение будет сохраняться, когда пользователь покинет сайт, а позже вернётся - мы сохраним его с помощью <a>Web Storage API</a>. Мы также включим возможность изменить пользователя и, следовательно, приветственное сообщение, в любое время, когда это будет необходимо.</p>\n<ol>\n  <li>В <code>index.html</code>, добавьте следующую строку перед элементом <a><code>&lt;script&gt;</code></a>:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><button>Change user</button>\n</pre></div>\n  </li>\n  <li>В <code>main.js</code>, добавьте следующий код в конец файла, точно так, как написано - он захватит ссылки на новую кнопку и заголовок, и сохранит их в переменные:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">var myButton = document.querySelector("button");\nvar myHeading = document.querySelector("h1");\n</pre></div>\n  </li>\n  <li>Теперь добавьте следующую функцию для установки персонализированного приветствия - она ничего не будет делать, но мы будем использовать её позже:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">function setUserName() {\n  var myName = prompt("Please enter your name.");\n  localStorage.setItem("name", myName);\n  myHeading.textContent = "Mozilla is cool, " + myName;\n}\n</pre></div>Эта функция содержит функцию <a class="only-in-en-us" title="Currently only available in English (US)"><code>prompt()</code> <small>(en-US)<small></small></small></a>, которая вызывает диалоговое окно, немного похожее на <code>alert()</code> кроме того, что <code>prompt()</code> просит пользователя ввести некоторые данные, и сохраняет эти данные в переменной, после того как пользователь нажимает <strong>OK</strong>. В данном случае, мы просим пользователя ввести его имя. Далее, мы вызываем API под названием <code>localStorage</code>, который позволяет нам хранить данные в браузере и извлекать их позднее. Мы используем функцию <code>setItem()</code> из localStorage для создания и хранения данных в свойстве под названием <code>\'name\'</code>, и устанавливаем это значение в переменную <code>myName</code>, которая содержит имя введённое пользователем. В конце мы устанавливаем <code>textContent</code> заголовку в виде строки и имени пользователя.\n  </li>\n  <li>Затем добавьте блок <code>if ... else</code> - мы могли бы назвать это кодом инициализации, поскольку он структурирует приложение при его первой загрузке:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">if (!localStorage.getItem("name")) {\n  setUserName();\n} else {\n  var storedName = localStorage.getItem("name");\n  myHeading.textContent = "Mozilla is cool, " + storedName;\n}\n</pre></div>Этот блок сначала использует оператор отрицания (логическое НЕ, представленное в виде !) чтобы проверить, существуют ли данные в пункте <code>name</code>. Если нет, то функция <code>setUserName()</code> запускается для их создания. Если данные существуют (то есть, пользователь установил его во время предыдущего посещения), мы извлекаем сохранённое имя, с помощью <code>getItem()</code> и устанавливаем <code>textContent</code> заголовку в виде строки плюс имя пользователя, так же, как мы делали внутри <code>setUserName()</code>.\n  </li>\n  <li>Наконец, установите обработчик события <code>onclick</code> на кнопку. При нажатии кнопки запускается функция <code>setUserName()</code>. Это позволяет пользователю установить новое имя, всякий раз, когда он захочет, нажатием кнопки:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">myButton.onclick = function () {\n  setUserName();\n};\n</pre></div>\n  </li>\n</ol>\n<p>Теперь, когда вы впервые заходите на сайт, он попросит вас указать имя пользователя, а затем предоставит вам персональное сообщение. Вы можете изменить имя в любое время, нажав на кнопку. В качестве дополнительного бонуса, поскольку имя хранится внутри localStorage, оно сохраняется после закрытия сайта, сохраняя при этом персонализированное сообщение при следующем открытии сайта!</p></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Если вы следовали всем инструкциям в этой статье, в конечном итоге вы должны получить страницу, которая выглядит примерно так (вы также можете <a class="external" target="_blank">посмотреть нашу версию здесь</a>):</p>\n<p>\n  \n</p>\n<p>Если вы застряли, вы всегда можете сравнить свою работу с нашим <a class="external" target="_blank">готовым примером кода на Github</a>.</p>\n<p>Здесь мы узнали только самую поверхность JavaScript. Если вам понравился этот язык и вы хотите изучить его поглубже, перейдите к нашему разделу <a>изучение JavaScript</a>.</p></div></section>',
					works: [],
				},
				{
					title: 'Первые шаги в JavaScript',
					chapter: 3.2,
					content:
						'<header><h1>Первые шаги в JavaScript</h1></header><div class="section-content"><p>В нашем первом модуле, прежде чем перейти к практике написания кода на языке JavaScript, сначала мы дадим ответы на некоторые фундаментальные вопросы, а именно: "Что же такое JavaScript?", "Что он из себя представляет?" и "Что он может делать?". После этого мы внимательно рассмотрим некоторые из ключевых элементов, такие как переменные, строки, числа и массивы.</p></div><section aria-labelledby="предисловие"><h2 id="предисловие"><a>Предисловие</a></h2><div class="section-content"><p>Вам не нужно иметь никаких предварительных знаний JavaScript чтобы приступить к этому модулю, но у вас должно быть некоторое представление о HTML и CSS. Рекомендуем ознакомиться со следующими материалами, прежде чем начинать знакомство с JavaScript:</p>\n<ul>\n  <li><a>Начало работы с Web</a> (которое включает в себя общее <a>введение в Javascript</a>)</li>\n  <li><a>Введение в HTML</a></li>\n  <li><a>Введение в CSS</a></li>\n</ul>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Если вы работаете на компьютере, планшете или другом устройстве, где нет возможности полноценно работать с файлами, можете использовать такие онлайн сервисы как <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble</a>, для запуска примеров кода.</p>\n</div></div></section><section aria-labelledby="руководства"><h2 id="руководства"><a>Руководства</a></h2><div class="section-content"><dl>\n  <dt id="что_такое_javascript"><a>Что такое JavaScript?</a></dt>\n  <dd>\n    <p>Добро пожаловать на курс начинающего JavaScript разработчика от MDN! В первой статье мы рассмотрим JavaScript в общем приближении и постараемся ответить на вопросы "Что такое JavaScript?" и "Для чего он предназначен?", и закрепим верное понимание его назначения.</p>\n  </dd>\n  <dt id="первое_погружение_в_javascript"><a>Первое погружение в JavaScript</a></dt>\n  <dd>\n    <p>Теперь, когда вы знаете кое-что о JavaScript, и что он может делать, мы предлагаем вам пройти интенсивный практический урок по базовой функциональности JavaScript. Здесь вы, шаг за шагом, создадите простую игру "Угадай число".</p>\n  </dd>\n  <dt id="что_пошло_не_так_устранение_ошибок_javascript"><a>Что пошло не так? Устранение ошибок JavaScript</a></dt>\n  <dd>\n    <p>В процессе создания игры "Угадай число" из предыдущего урока, вы могли заметить что она не работала. Не стоит унывать - данная статья научит вас беречь собственные нервы, а так же, даст несколько советов о том как решать такие проблемы, искать и исправлять неполадки в JavaScript-коде.</p>\n  </dd>\n  <dt id="хранение_нужной_вам_информации_-_переменные"><a>Хранение нужной вам информации - Переменные</a></dt>\n  <dd>\n    <p>После прочтения предыдущих статей вы должны знать что из себя представляет JavaScript, что он может, как взаимодействует с другими web технологиями, и каковы его основные особенности в общем приближении. В этой статье спустимся к самым основам языка и поработаем с <strong>Переменными</strong>.</p>\n  </dd>\n  <dt id="базовая_математика_в_javascript_—_числа_и_операторы"><a>Базовая математика в JavaScript — числа и операторы</a></dt>\n  <dd>\n    <p>Здесь мы обсуждаем математику в JavaScript - каким образом мы можем манипулировать числами и операторами для работы с ними.</p>\n  </dd>\n  <dt id="работа_с_текстом_—_строки_в_javascript"><a>Работа с текстом — строки в JavaScript</a></dt>\n  <dd>\n    <p>Теперь мы обратим своё внимание на строки - так называются кусочки текста в программировании. В этой статье мы рассмотрим то что действительно необходимо знать про строки в JavaScript: как создать строку, делать escape (экранирование) символов с помощью кавычек, и объединять их.</p>\n  </dd>\n  <dt id="полезные_строковые_методы"><a>Полезные строковые методы</a></dt>\n  <dd>\n    <p>После того как мы рассмотрели основы работы со строками, давайте двинемся дальше и поговорим о том какие полезные операторы и методы существуют для строк, такие как вычисление длины, соединение и разделение строк, замена отдельных символов и многие другие.</p>\n  </dd>\n  <dt id="массивы"><a>Массивы</a></dt>\n  <dd>\n    <p>В последней статье этого модуля мы рассмотрим массивы - изящный способ хранения различных наборов информации в имени всего одной переменной. Здесь мы поговорим о том почему это может быть полезным, рассмотрим как создать массив, получить, добавить или удалить элемент массива, и прочее.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="проверка_полученных_знаний"><h2 id="проверка_полученных_знаний"><a>Проверка полученных знаний</a></h2><div class="section-content"><p>Предложенное тестовое задание проверит ваше понимание основ JavaScript, которые вы получили пройдя предложенные выше уроки.</p>\n<dl>\n  <dt id="генератор_глупых_историй"><a>Генератор глупых историй</a></dt>\n  <dd>\n    <p>Вашим заданием будет применить на практике полученные знания и создать развлекательное приложение которое будет генерировать случайные нелепые истории.</p>\n  </dd>\n</dl></div></section>',
					works: [],
				},
				{
					title: 'Структурные элементы JavaScript',
					chapter: 3.3,
					content:
						'<header><h1>Структурные элементы JavaScript</h1></header><div class="section-content"><p>В данном разделе мы продолжим знакомство с ключевыми основами JavaScript, обратим внимание на часто используемые приёмы программирования, такие как условные выражения, циклы, функции и события. Все они уже встречались вам ранее в данном курсе, но только поверхностно, далее они будут рассмотрены подробнее.</p></div><section aria-labelledby="предварительное_условие"><h2 id="предварительное_условие"><a>Предварительное условие</a></h2><div class="section-content"><p>До начала изучения следующего раздела вам нужно тщательно ознакомиться с основами <a>HTML</a> и <a>CSS</a>, так же обязательно прочтите курс "<a>Первые шаги в JavaScript</a>".</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> если устройство на котором вы изучаете данный курс не позволяет создавать/сохранять файлы, в большинстве случаев примеры кода могут быть запущены в таких онлайн приложениях как <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble</a>.</p>\n</div></div></section><section aria-labelledby="руководства"><h2 id="руководства"><a>Руководства</a></h2><div class="section-content"><dl>\n  <dt id="принятие_решений_в_вашем_коде_—_условные_конструкции"><a>Принятие решений в вашем коде — условные конструкции</a></dt>\n  <dd>\n    <p>В любом языке программирования необходимо принимать решения и совершать действия в зависимости от полученных в процессе исполнения программы или введённых пользователем данных. Например, игра должна завершиться, когда число жизней персонажа игрока достигает нуля. В приложении для прогноза погоды отображается картинка с восходящим солнцем, если смотреть утром, со звёздами и луной — ночью. В данной статье исследуется работа условных конструкций в JavaScript.</p>\n  </dd>\n  <dt id="зацикливание_кода"><a>Зацикливание кода</a></dt>\n  <dd>\n    <p>Иногда требуется, чтобы действие исполнялось несколько раз подряд. Например, при просмотре списка имён. В программировании для данной цели успешно применяются циклы. Здесь мы познакомимся с использованием циклов в JavaScript.</p>\n  </dd>\n  <dt id="функции_—_блоки_кода_используемые_многократно"><a>Функции — блоки кода используемые многократно</a></dt>\n  <dd>\n    <p>Другая необходимая концепция в программировании это <strong>функции</strong>. <strong>Функции</strong> позволяют сохранить часть кода для решения определённой задачи в определённом блоке, и затем вызывать этот код, тогда, когда это тебе необходимо при помощи короткой команды — это намного лучше, чем писать один и тот же код несколько раз. В статье будут рассмотрена фундаментальная концепция функции: основной синтаксис, как вызывать и как определять функции, области видимости и параметры.</p>\n  </dd>\n  <dt id="создай_свою_функцию"><a>Создай свою функцию</a></dt>\n  <dd>\n    <p>В отличие от большинства предыдущих статей, рассматривающих только теорию, эта статья даёт практический опыт. Здесь вы получите практику создания собственных функций. На ряду с возможностями, мы также объясним дополнительные полезные подробности, связанные с функциями.</p>\n  </dd>\n  <dt id="функции_возвращают_значения"><a>Функции возвращают значения</a></dt>\n  <dd>\n    <p>Есть одно из существенных понятий для нас, представленное в этом курсе, которое достойно пристального внимания — возврат значений функции. Некоторые функции не возвращают значений после завершения, но другие делают это. Главное понять, что это за значения, как использовать их в вашем коде, и как заставить Вашу собственную функцию возвратить необходимые значения.</p>\n  </dd>\n  <dt id="введение_в_события"><a>Введение в события</a></dt>\n  <dd>\n    <p>События — это действия или явления, которые происходят в системе во время программирования, о которых система сообщает, и, при желании, на которые можно ответить. Например, когда пользователь кликает на кнопку на странице, возможно вы захотите вывести на экран блок с информацией, как ответ на это событие. В последней статье мы обсудим важные концепции, связанные с событиями, и увидим, как они работают в браузерах.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="проверка_знаний"><h2 id="проверка_знаний"><a>Проверка знаний</a></h2><div class="section-content"><p>Следующая оценка проверит ваше понимание основ JavaScript, описанных в данном руководстве.</p>\n<dl>\n  <dt id="фотогалерея"><a>Фотогалерея</a></dt>\n  <dd>\n    <p>Теперь, когда мы рассмотрели основные блоки JavaScript, мы проверим твои знания о циклах, функциях, регулярных выражениях и событиях, создав довольно общий элемент, который вы увидите на многих сайтах - галерея изображений, работающей с помощью JavaScript.</p>\n  </dd>\n</dl></div></section>',
					works: [],
				},
				{
					title: 'Введение в объекты JavaScript',
					chapter: 3.4,
					content:
						'<header><h1>Введение в объекты JavaScript</h1></header><div class="section-content"><p>В JavaScript большинство сущностей являются объектами, начиная с самой основной функциональности JavaScript, такой как строки (strings) и массивы (array), и заканчивая встроенными в браузер API. Вы можете даже создавать свои собственные объекты, чтобы инкапсулировать связанные между собой функции и переменные в эффективные пакеты и действовать как удобные хранилища данных. Понимание объектно-ориентированной природы JavaScript очень важно, если вы хотите продолжить дальнейшее более углублённое изучение языка. Поэтому мы предоставляем вам данный модуль, чтобы помочь вам разобраться в этом. Здесь мы детально обучим вас теории и синтаксису объектов, а затем рассмотрим, как создавать свои собственные объекты.</p></div><section aria-labelledby="необходимые_знания"><h2 id="необходимые_знания"><a>Необходимые знания</a></h2><div class="section-content"><p>Перед тем, как начать изучение данного модуля, Вы должны иметь некоторое представление о HTML и CSS. Мы советуем вам поработать над разделами <a>Введение в HTML</a> и <a>Введение в CSS</a> перед изучением этого модуля JavaScript.</p>\n<p>Также вам необходимо знать основы JavaScript перед подробным изучением объектов JavaScript. Предварительно поработайте с разделами <a>Первые шаги в JavaScript</a> и <a>Структурные элементы в JavaScript</a> перед началом изучения данного модуля.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Если вы работаете за компьютером/планшетом/другим устройством, на котором у вас нет возможности создавать собственные файлы, постарайтесь поработать с примерами кода на платформах онлайн-программирования, таких, как <a class="external" target="_blank">JSBin</a> or <a class="external" target="_blank">Thimble</a>.</p>\n</div></div></section><section aria-labelledby="руководства"><h2 id="руководства"><a>Руководства</a></h2><div class="section-content"><dl>\n  <dt id="основы_объектов"><a>Основы объектов</a></dt>\n  <dd>\n    <p>В первой статье мы рассмотрим объекты в JavaScript. Мы будем разбирать основы синтаксиса объектов JavaScript и заново изучим некоторые возможности JavaScript, которые мы уже исследовали ранее на курсе, подтвердив тот факт, что большая часть функциональности, с которой мы уже столкнулись, в действительности является объектами.</p>\n  </dd>\n  <dt id="объектно-ориентированный_javascript_для_начинающих"><a class="only-in-en-us" title="Currently only available in English (US)">Объектно-ориентированный JavaScript для начинающих <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Закончив с основами, мы сфокусируемся на объектно-ориентированном JavaScript (OOJS) — эта статья представляет основы теории объектно-ориентированного программирования (ООП). Затем мы изучим, как JavaScript эмулирует классы объектов через конструктор функций, и как создавать экземпляры объектов.</p>\n  </dd>\n  <dt id="прототипы_объектов"><a>Прототипы объектов</a></dt>\n  <dd>\n    <p>Прототипы - это механизм, благодаря которому объекты в JavaScript наследуют функциональность друг друга, но при этом они работают иначе по сравнению с механизмами наследования в классических объектно-ориентированных языках. В этой статье мы изучим эти отличия, объясним, как работает цепочка прототипов, и рассмотрим, как свойство прототипа может быть использовано для добавления методов к существующим конструкторам.</p>\n  </dd>\n  <dt id="наследование_в_javascript"><a>Наследование в JavaScript</a></dt>\n  <dd>\n    <p>После знакомства с самыми жуткими подробностями OOJS, эта статья покажет, как создавать "дочерние" классы объектов (конструкторы), которые наследуют функциональность от своих "родительских" классов. В дополнении, мы дадим вам пару советов о том, где и когда можно использовать OOJS.</p>\n  </dd>\n  <dt id="работа_с_json-данными"><a>Работа с JSON-данными</a></dt>\n  <dd>\n    <p>Представление объектов в JavaScript (JavaScript Object Notation) (JSON) - это стандартный формат для представления структурированных данных в виде объектов JavaScript, который обычно используется для представления и передачи данных на веб-сайтах (т.е. передача некоторых данных от сервера к клиенту - таким образом они могут быть отображены на веб-странице). Вы довольно часто будете с этим сталкиваться, поэтому в данной статье мы предоставим вам все, что необходимо для работы с JSON с помощью JavaScript, в том числе доступ к элементам данных в объекте JSON и написания собственного JSON-кода.</p>\n  </dd>\n  <dt id="практика_построения_объектов"><a>Практика построения объектов</a></dt>\n  <dd>\n    <p>В предыдущих статьях мы рассматривали самые основные моменты в теории и синтаксисе объектов в JavaScript, дав вам твёрдую основу для начала. В этой статье мы погрузимся в практические занятия, получим больше практической работы в построении собственных объектов в JavaScript, чтобы сделать кое-что весёлое и красочное - несколько цветных прыгающих шариков.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="задания"><h2 id="задания"><a>Задания</a></h2><div class="section-content"><dl>\n  <dt id="добавление_функциональности_к_демо_с_прыгающими_шариками"><a>Добавление функциональности к демо с прыгающими шариками</a></dt>\n  <dd>\n    <p>В этом задании, мы ожидаем, что вы, используя демо с прыгающими шариками из предыдущей статьи как отправную точку, добавите немного новой и интересной функциональности в него.</p>\n  </dd>\n</dl></div></section>',
					works: [],
				},
				{
					title: 'Понимание JavaScript-фреймворков для фронтенда',
					chapter: 3.5,
					content:
						'<header><h1>Понимание JavaScript-фреймворков для фронтенда</h1></header><div class="section-content"><p>\n  </p>\n  JavaScript-фреймворки являются неотъемлемой частью современной веб-разработки,предоставляя разработчикам проверенные и протестированные инструменты для создания масштабируемых и интерактивных веб-приложений. Многие современные компании используют фреймворки для своих решений, поэтому многие задачи связанные с разработкой клиентской части веб-приложений теперь требуют опыта работы с ними.\n<p></p>\n<p>Начинающему разработчику веб-интерфейсов может быть трудно понять с чего начать изучение фреймворков — их выбор разнообразен, а новые появляются постоянно. В основном же они работают аналогичным образом, но делают некоторые вещи по-разному, также есть некоторые специфичные вещи, которые следует соблюдать при использовании фреймворков.</p>\n<p>Этим набором статей мы постараемся дать вам удобную отправную точку, чтобы помочь вам начать изучать основы. Мы не стремимся научить вас всему, что вам нужно знать о React/ReactDOM, Vue или каком-то другом конкретном фреймворке. Документация этих фреймворков отлично выполняют эту работу. Вместо этого мы хотим сделать шаг назад и сначала ответить на более фундаментальные вопросы, такие как:</p>\n<ul>\n  <li>Почему я должен использовать фреймворк? Какие проблемы он решит?</li>\n  <li>\n    Какие вопросы я должен задать себе при выборе определённого фреймворка?\n    Нужен ли мне какой-либо из них вовсе?\n  </li>\n  <li>Какими возможностями обладают фреймворки? Как они работают в целом и в чём отличия их имплементаций этих возможностей?</li>\n  <li>Как они связаны с "ванильным" JavaScript, или HTML?</li>\n</ul>\n<p>После этого мы предоставим некоторые учебные пособия, охватывающие основы некоторых фреймворков, чтобы предоставить вам достаточно контекста, чтобы вы могли начать углубляться в этой теме. Мы хотим, чтобы вы изучали фреймворки прагматично, не забывая о фундаментальных практиках веб-разработки, таких как, например, доступность.</p>\n<p><strong><a class="only-in-en-us" title="Currently only available in English (US)">Начните прямо сейчас с "Введение в фронтенд фреймворки" <small>(en-US)<small></small></small></a></strong></p></div><section aria-labelledby="prerequisites"><h2 id="prerequisites"><a>Prerequisites</a></h2><div class="section-content"><p>You should really learn the basics of the core web languages first before attempting to move on to learning client-side frameworks — <a>HTML</a>, <a>CSS</a>, and especially <a>JavaScript</a>.</p>\n<p>Your code will be richer and more professional as a result, and you\'ll be able to troubleshoot problems with more confidence if you understand the fundamental web platform features that the frameworks are building on top of.</p></div></section><section aria-labelledby="introductory_guides"><h2 id="introductory_guides"><a>Introductory guides</a></h2><div class="section-content"><dl>\n  <dt id="1._introduction_to_client-side_frameworks"><a class="only-in-en-us" title="Currently only available in English (US)">1. Introduction to client-side frameworks <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>We begin our look at frameworks with a general overview of the area, looking at a brief history of JavaScript and frameworks, why frameworks exist and what they give us, how to start thinking about choosing a framework to learn, and what alternatives there are to client-side frameworks.</p>\n  </dd>\n  <dt id="2._framework_main_features"><a class="only-in-en-us" title="Currently only available in English (US)">2. Framework main features <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Each major JavaScript framework has a different approach to updating the DOM, handling browser events, and providing an enjoyable developer experience. This article will explore the main features of "the big 4" frameworks, looking at how frameworks tend to work from a high level, and the differences between them.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="react_tutorials"><h2 id="react_tutorials"><a>React tutorials</a></h2><div class="section-content"><div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> React tutorials last tested in May 2020, with React/ReactDOM 16.13.1 and create-react-app 3.4.1.</p>\n  <p>If you need to check your code against our version, you can find a finished version of the sample React app code in our <a class="external" target="_blank">todo-react repository</a>. For a running live version, see <a class="external" target="_blank">https://mdn.github.io/todo-react-build/</a>.</p>\n</div>\n<dl>\n  <dt id="1._getting_started_with_react"><a>1. Getting started with React</a></dt>\n  <dd>\n    <p>In this article we will say hello to React. We\'ll discover a little bit of detail about its background and use cases, set up a basic React toolchain on our local computer, and create and play with a simple starter app, learning a bit about how React works in the process.</p>\n  </dd>\n  <dt id="2._beginning_our_react_todo_list"><a class="only-in-en-us" title="Currently only available in English (US)">2. Beginning our React todo list <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Let\'s say that we\'ve been tasked with creating a proof-of-concept in React – an app that allows users to add, edit, and delete tasks they want to work on, and also mark tasks as complete without deleting them. This article will walk you through putting the basic <code>App</code> component structure and styling in place, ready for individual component definition and interactivity, which we\'ll add later.</p>\n  </dd>\n  <dt id="3._componentizing_our_react_app"><a class="only-in-en-us" title="Currently only available in English (US)">3. Componentizing our React app <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>At this point, our app is a monolith. Before we can make it do things, we need to break it apart into manageable, descriptive components. React doesn\'t have any hard rules for what is and isn\'t a component – that\'s up to you! In this article we will show you a sensible way to break our app up into components.</p>\n  </dd>\n  <dt id="4._react_interactivity_events_and_state"><a class="only-in-en-us" title="Currently only available in English (US)">4. React interactivity: Events and state <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>With our component plan worked out, it\'s now time to start updating our app from a completely static UI to one that actually allows us to interact and change things. In this article we\'ll do this, digging into events and state along the way.</p>\n  </dd>\n  <dt id="5._react_interactivity_editing_filtering_conditional_rendering"><a class="only-in-en-us" title="Currently only available in English (US)">5. React interactivity: Editing, filtering, conditional rendering <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>As we near the end of our React journey (for now at least), we\'ll add the finishing touches to the main areas of functionality in our Todo list app. This includes allowing you to edit existing tasks, and filtering the list of tasks between all, completed, and incomplete tasks. We\'ll look at conditional UI rendering along the way.</p>\n  </dd>\n  <dt id="6._accessibility_in_react"><a class="only-in-en-us" title="Currently only available in English (US)">6. Accessibility in React <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>In our final tutorial article, we\'ll focus on (pun intended) accessibility, including focus management in React, which can improve usability and reduce confusion for both keyboard-only and screenreader users.</p>\n  </dd>\n  <dt id="7._react_resources"><a class="only-in-en-us" title="Currently only available in English (US)">7. React resources <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Our final article provides you with a list of React resources that you can use to go further in your learning.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="ember_tutorials"><h2 id="ember_tutorials"><a>Ember tutorials</a></h2><div class="section-content"><div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Ember tutorials last tested in May 2020, with Ember/Ember CLI version 3.18.0.</p>\n  <p>If you need to check your code against our version, you can find a finished version of the sample Ember app code in the <a class="external" target="_blank">ember-todomvc-tutorial repository</a>. For a running live version, see <a class="external" target="_blank">https://nullvoxpopuli.github.io/ember-todomvc-tutorial/</a> (this also includes a few additional features not covered in the tutorial).</p>\n</div>\n<dl>\n  <dt id="1._getting_started_with_ember"><a class="only-in-en-us" title="Currently only available in English (US)">1. Getting started with Ember <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>In our first Ember article we will look at how Ember works and what it\'s useful for, install the Ember toolchain locally, create a sample app, and then do some initial setup to get it ready for development.</p>\n  </dd>\n  <dt id="2._ember_app_structure_and_componentization"><a class="only-in-en-us" title="Currently only available in English (US)">2. Ember app structure and componentization <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>In this article we\'ll get right on with planning out the structure of our TodoMVC Ember app, adding in the HTML for it, and then breaking that HTML structure into components.</p>\n  </dd>\n  <dt id="3._ember_interactivity_events_classes_and_state"><a class="only-in-en-us" title="Currently only available in English (US)">3. Ember interactivity: Events, classes and state <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>At this point we\'ll start adding some interactivity to our app, providing the ability to add and display new todo items. Along the way, we\'ll look at using events in Ember, creating component classes to contain JavaScript code to control interactive features, and setting up a service to keep track of the data state of our app.</p>\n  </dd>\n  <dt id="4._ember_interactivity_footer_functionality_conditional_rendering"><a class="only-in-en-us" title="Currently only available in English (US)">4. Ember Interactivity: Footer functionality, conditional rendering <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Now it\'s time to start tackling the footer functionality in our app. Here we\'ll get the todo counter to update to show the correct number of todos still to complete, and correctly apply styling to completed todos (i.e. where the checkbox has been checked). We\'ll also wire up our "Clear completed" button. Along the way, we\'ll learn about using conditional rendering in our templates.</p>\n  </dd>\n  <dt id="5._routing_in_ember"><a class="only-in-en-us" title="Currently only available in English (US)">5. Routing in Ember <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>In this article we learn about routing, or URL-based filtering as it is sometimes referred to. We\'ll use it to provide a unique URL for each of the three todo views — "All", "Active", and "Completed".</p>\n  </dd>\n  <dt id="6._ember_resources_and_troubleshooting"><a class="only-in-en-us" title="Currently only available in English (US)">6. Ember resources and troubleshooting <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Our final Ember article provides you with a list of resources that you can use to go further in your learning, plus some useful troubleshooting and other information.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="vue_tutorials"><h2 id="vue_tutorials"><a>Vue tutorials</a></h2><div class="section-content"><div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Vue tutorials last tested in May 2020, with Vue 2.6.11.</p>\n  <p>If you need to check your code against our version, you can find a finished version of the sample Vue app code in our <a class="external" target="_blank">todo-vue repository</a>. For a running live version, see <a class="external" target="_blank">https://mdn.github.io/todo-vue/dist/</a>.</p>\n</div>\n<dl>\n  <dt id="1._getting_started_with_vue"><a class="only-in-en-us" title="Currently only available in English (US)">1. Getting started with Vue <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Now let\'s introduce Vue, the third of our frameworks. In this article we\'ll look at a little bit of Vue background, learn how to install it and create a new project, study the high-level structure of the whole project and an individual component, see how to run the project locally, and get it prepared to start building our example.</p>\n  </dd>\n  <dt id="2._creating_our_first_vue_component"><a class="only-in-en-us" title="Currently only available in English (US)">2. Creating our first Vue component <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Now it\'s time to dive deeper into Vue, and create our own custom component — we\'ll start by creating a component to represent each item in the todo list. Along the way, we\'ll learn about a few important concepts such as calling components inside other components, passing data to them via props, and saving data state.</p>\n  </dd>\n  <dt id="3._rendering_a_list_of_vue_components"><a class="only-in-en-us" title="Currently only available in English (US)">3. Rendering a list of Vue components <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>At this point we\'ve got a fully working component; we\'re now ready to add multiple <code>ToDoItem</code> components to our App. In this artcle we\'ll look at adding a set of todo item data to our <code>App.vue</code> component, which we\'ll then loop through and display inside <code>ToDoItem</code> components using the <code>v-for</code> directive.</p>\n  </dd>\n  <dt id="4._adding_a_new_todo_form_vue_events_methods_and_models"><a class="only-in-en-us" title="Currently only available in English (US)">4. Adding a new todo form: Vue events, methods, and models <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>We now have sample data in place, and a loop that takes each bit of data and renders it inside a <code>ToDoItem</code> in our app. What we really need next is the ability to allow our users to enter their own todo items into the app, and for that we\'ll need a text <code>&lt;input&gt;</code>, an event to fire when the data is submitted, a method to fire upon submission to add the data and rerender the list, and a model to control the data. This is what we\'ll cover in this article.</p>\n  </dd>\n  <dt id="5._styling_vue_components_with_css"><a class="only-in-en-us" title="Currently only available in English (US)">5. Styling Vue components with CSS <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>The time has finally come to make our app look a bit nicer. In this article we\'ll explore the different ways of styling Vue components with CSS.</p>\n  </dd>\n  <dt id="6._using_vue_computed_properties"><a class="only-in-en-us" title="Currently only available in English (US)">6. Using Vue computed properties <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>In this article we\'ll add a counter that displays the number of completed todo items, using a feature of Vue called computed properties. These work similarly to methods, but only re-run when one of their dependencies changes.</p>\n  </dd>\n  <dt id="7._vue_conditional_rendering_editing_existing_todos"><a class="only-in-en-us" title="Currently only available in English (US)">7. Vue conditional rendering: editing existing todos <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Now it is time to add one of the major parts of functionality that we\'re still missing — the ability to edit existing todo items. To do this, we will take advantage of Vue\'s conditional rendering capabilities — namely <code>v-if</code> and <code>v-else</code> — to allow us to toggle between the existing todo item view, and an edit view where you can update todo item labels. We\'ll also look at adding functionality to delete todo items.</p>\n  </dd>\n  <dt id="8._focus_management_with_vue_refs"><a class="only-in-en-us" title="Currently only available in English (US)">8. Focus management with Vue refs <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>We are nearly done with Vue. The last bit of functionality to look at is focus management, or put another way, how we can improve our app\'s keyboard accessibility. We\'ll look at using Vue refs to handle this — an advanced feature that allows you to have direct access to the underlying DOM nodes below the virtual DOM, or direct access from one component to the internal DOM structure of a child component.</p>\n  </dd>\n  <dt id="9._vue_resources"><a class="only-in-en-us" title="Currently only available in English (US)">9. Vue resources <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Now we\'ll round off our study of Vue by giving you a list of resources that you can use to go further in your learning, plus some other useful tips.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="which_frameworks_did_we_choose"><h2 id="which_frameworks_did_we_choose"><a>Which frameworks did we choose?</a></h2><div class="section-content"><p>We are publishing our initial set of articles with guides focusing on three of the major frameworks out there — React/ReactDOM, Ember, and Vue. There is a variety of reasons for this:</p>\n<ul>\n  <li>They are popular choices that will be around for a while — like with any software tool, it is good to stick with actively-developed choices that are likely to not be discontinued next week, and which will be desirable additions to your skillset when looking for a job.</li>\n  <li>They have strong communities and good documentation. It is very important to be able to get help with learning a complex subject, especially when you are just starting out.</li>\n  <li>We don\'t have the resources to cover <em>all</em> modern frameworks. That list would be very difficult to keep up-to-date anyway, as new ones appear all the time.</li>\n  <li>As a beginner, trying to choose what to focus on out of the huge number of choices available is a very real problem. Keeping the list short is therefore helpful.</li>\n</ul>\n<p>We want to say this up front — we\'ve <strong>not</strong> chosen the frameworks we are focusing on because we think they are the best, or because we endorse them in any way. We just think they score highly on the above criteria.</p>\n<p>Note that we were hoping to have more frameworks included upon intial publication, but we decided to release the content and then add more framework guides later, rather than delay it longer. If your favourite framework is not represented in this content and you\'d like to help change that, feel free to discuss it with us! Get in touch with us via <a class="external" target="_blank">Matrix</a>, or <a class="external" target="_blank">Discourse</a>, or drop us a mail on the <a>mdn-admins list</a>.</p></div></section>',
					works: [],
				},
				{
					title: 'Клиентский веб API',
					chapter: 3.6,
					content:
						'<header><h1>Клиентский веб API</h1></header><div class="section-content"><p>При написании клиентского JavaScript для приложений или веб-сайтов вам не приходится слишком сильно углубляться, пока вы не начнёте использовать API — интерфейсы управления различными аспектами браузера или операционной системы на которой этот сайт работает, или же с данными с других веб-сайтов или сервисов. В этом модуле мы рассмотрим что API из себя представляет и как использовать самые распространённые из них, с которыми вы можете столкнуться в разработке.</p></div><section aria-labelledby="прежде_чем_начать"><h2 id="прежде_чем_начать"><a>Прежде чем начать</a></h2><div class="section-content"><p>Убедитесь, что вы прочли и хорошо разбираетесь в следующих модулях (<a>Первые шаги</a>, <a>Структурные элементы</a>, и <a>Введение в объекты</a>). Эти модули включали в себя простое использование API, так как зачастую без них сложно писать примеры клиентского кода JavaScript. В данном модуле мы предполагаем, что вы хорошо знакомы с основами JavaScript, и немного подробнее рассмотрим общие веб-API.</p>\n<p>Естественно знание <a>HTML</a> и <a>CSS</a> здесь также необходимо.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Если вы работаете на устройстве, где у вас нет возможности создавать свои собственные файлы, вы можете проверить большинство примеров кода в онлайн-программах вроде <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble</a>.</p>\n</div></div></section><section aria-labelledby="руководства"><h2 id="руководства"><a>Руководства</a></h2><div class="section-content"><dl>\n  <dt id="введение_в_различные_web_api"><a>Введение в различные web API</a></dt>\n  <dd>\n    <p>Прежде всего, мы начнём изучение API с основ - что это такое, как это работает, как вы используете их в своём коде и как они структурированы? Мы также рассмотрим, что представляют собой различные основные классы API, и как их можно использовать.</p>\n  </dd>\n  <dt id="управление_документами"><a>Управление документами</a></dt>\n  <dd>\n    <p>При написании веб-страниц и приложений вы чаще всего будете управлять каким-либо образом веб-документами. Обычно это делается с помощью Document Object Model (DOM), набора API-интерфейсов для управления HTML-разметкой и стилями, которые используют объект <a><code>Document</code></a>. В этой статье мы рассмотрим, как использовать DOM, а также некоторые интересные API, которые могут изменить рабочую среду интересными способами.</p>\n  </dd>\n  <dt id="получение_данных_с_сервера"><a>Получение данных с сервера</a></dt>\n  <dd>\n    <p>Другой очень распространённой задачей в современных веб-сайтах и приложениях является получение отдельных элементов данных с сервера для обновления разделов веб-страницы без необходимости загрузки абсолютно новой страницы. Эта, казалось бы, небольшая деталь оказала огромное влияние на производительность и поведение сайтов, поэтому в этой статье мы объясним концепцию и рассмотрим технологии, которые позволяют это, например <a><code>XMLHttpRequest</code></a> и <a>Fetch API</a>.</p>\n  </dd>\n  <dt id="сторонние_api"><a>Сторонние API</a></dt>\n  <dd>\n    <p>API, которые мы рассматривали до сих пор, встроены в браузер, но не все API встроены в браузер. Многие крупные веб-сайты и сервисы, такие как Google Maps, Twitter, Facebook, PayPal и т.д. предоставляют API-интерфейсы, позволяющие разработчикам использовать свои данные (например, показывать ваш Twitter-поток в вашем блоге) или сервисы (например, отображение пользовательских карт Google на вашем сайте, или с помощью входа в систему Facebook для входа в систему пользователей). В этой статье рассматривается различие между API браузера и сторонними API и показано типичное использование последнего.</p>\n  </dd>\n  <dt id="рисование_графики"><a class="only-in-en-us" title="Currently only available in English (US)">Рисование графики <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>В браузере содержатся очень мощные инструменты графического программирования, начиная с языка Scalable Vector Graphics (<a>SVG</a>) и заканчивая API для рисования элементов HTML <a><code>&lt;canvas&gt;</code></a> (см. <a>The Canvas API</a> и <a>WebGL</a>). В статье содержится введение в Canvas API и дополнительные ресурсы, чтобы вы могли узнать больше.</p>\n  </dd>\n  <dt id="видео_и_аудио_api"><a class="only-in-en-us" title="Currently only available in English (US)">Видео и аудио API <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>HTML5 поставляется с элементами для размещения мультимедийных материалов в документах - <a><code>&lt;video&gt;</code></a> и <a><code>&lt;audio&gt;</code></a> - которые, в свою очередь, имеют свои собственные API для управления воспроизведением, поиском и т. д. В статье показано, как выполнять общие задачи, такие как создание пользовательских элементов управления воспроизведением.</p>\n  </dd>\n  <dt id="клиентское_хранилище"><a>Клиентское хранилище</a></dt>\n  <dd>\n    <p>Современные веб-браузеры имеют ряд различных технологий, которые позволяют хранить данные, связанные с веб-сайтами, и извлекать их, когда это необходимо, что позволяет вам сохранять данные в долгосрочной перспективе, сохранять сайты в автономном режиме и многое другое. В этой статье объясняются самые основы того, как они работают.</p>\n  </dd>\n</dl></div></section>',
					works: [],
				},
			],
		},
	],
};
